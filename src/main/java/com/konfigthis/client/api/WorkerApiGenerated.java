/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CollectionResource;
import com.konfigthis.client.model.CommunicationResource1;
import com.konfigthis.client.model.ContactTypeResource1;
import com.konfigthis.client.model.DirectDepositResource;
import com.konfigthis.client.model.JobTitleResource1;
import com.konfigthis.client.model.LegalIdResource1;
import com.konfigthis.client.model.Link;
import com.konfigthis.client.model.NameResource1;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrganizationResource1;
import com.konfigthis.client.model.PayComponentFrequencyTypeResource1;
import com.konfigthis.client.model.PayRateResource;
import com.konfigthis.client.model.PayRatesStandardResource;
import com.konfigthis.client.model.PayStandardResource;
import com.konfigthis.client.model.RecurringResource;
import com.konfigthis.client.model.RelationshipResource;
import com.konfigthis.client.model.Status1;
import com.konfigthis.client.model.SupervisorResource1;
import com.konfigthis.client.model.TimeOffResource;
import com.konfigthis.client.model.WorkerAssignmentDistributionsResource;
import com.konfigthis.client.model.WorkerContactResource;
import com.konfigthis.client.model.WorkerCustomFieldsResource;
import com.konfigthis.client.model.WorkerFederalTaxResource;
import com.konfigthis.client.model.WorkerResource1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCommunicationCall(String workerId, CommunicationResource1 communicationResource1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = communicationResource1;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/communications"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.communication.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.communication.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommunicationValidateBeforeCall(String workerId, CommunicationResource1 communicationResource1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addCommunication(Async)");
        }

        // verify the required parameter 'communicationResource1' is set
        if (communicationResource1 == null) {
            throw new ApiException("Missing the required parameter 'communicationResource1' when calling addCommunication(Async)");
        }

        return addCommunicationCall(workerId, communicationResource1, _callback);

    }


    private ApiResponse<CommunicationResource1> addCommunicationWithHttpInfo(String workerId, CommunicationResource1 communicationResource1) throws ApiException {
        okhttp3.Call localVarCall = addCommunicationValidateBeforeCall(workerId, communicationResource1, null);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCommunicationAsync(String workerId, CommunicationResource1 communicationResource1, final ApiCallback<CommunicationResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommunicationValidateBeforeCall(workerId, communicationResource1, _callback);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCommunicationRequestBuilder {
        private final String workerId;
        private String communicationId;
        private String type;
        private String usageType;
        private String dialCountry;
        private String dialArea;
        private String dialNumber;
        private String dialExtension;
        private String uri;
        private String streetLineOne;
        private String streetLineTwo;
        private String postOfficeBox;
        private String city;
        private String postalCode;
        private String postalCodeExtension;
        private String countrySubdivisionCode;
        private String countryCode;
        private List<Link> links;

        private AddCommunicationRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set communicationId
         * @param communicationId The ID for the workers specific communication item. (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder communicationId(String communicationId) {
            this.communicationId = communicationId;
            return this;
        }
        
        /**
         * Set type
         * @param type A set of communication types classifying an instruction that the customer, requester, or subject must comply with in order for the screening to go forward. NOTE: PHONE and EMAIL type supports BUSINESS and PERSONAL usage type only.MOBILE_PHONE, FAX and PAGER supports BUSINESS usage type only.This data field cannot be PATCHED. (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set usageType
         * @param usageType A code classifying a designated use associated with a contact method. For example, whether a telephone or email address is one for business communications or one primarily for personal use.This data field cannot be PATCHED. (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder usageType(String usageType) {
            this.usageType = usageType;
            return this;
        }
        
        /**
         * Set dialCountry
         * @param dialCountry The country dialing code for a communication number (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder dialCountry(String dialCountry) {
            this.dialCountry = dialCountry;
            return this;
        }
        
        /**
         * Set dialArea
         * @param dialArea The area dialing code for a communication number (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder dialArea(String dialArea) {
            this.dialArea = dialArea;
            return this;
        }
        
        /**
         * Set dialNumber
         * @param dialNumber The communication number, not including country dialing or area dialing codes (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder dialNumber(String dialNumber) {
            this.dialNumber = dialNumber;
            return this;
        }
        
        /**
         * Set dialExtension
         * @param dialExtension The extension of the associated communication number (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder dialExtension(String dialExtension) {
            this.dialExtension = dialExtension;
            return this;
        }
        
        /**
         * Set uri
         * @param uri The mailto address as specified in RFC2368 (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder uri(String uri) {
            this.uri = uri;
            return this;
        }
        
        /**
         * Set streetLineOne
         * @param streetLineOne The street address line one (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder streetLineOne(String streetLineOne) {
            this.streetLineOne = streetLineOne;
            return this;
        }
        
        /**
         * Set streetLineTwo
         * @param streetLineTwo The street address line two (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder streetLineTwo(String streetLineTwo) {
            this.streetLineTwo = streetLineTwo;
            return this;
        }
        
        /**
         * Set postOfficeBox
         * @param postOfficeBox The postal office box. This data field cannot be PATCHED (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder postOfficeBox(String postOfficeBox) {
            this.postOfficeBox = postOfficeBox;
            return this;
        }
        
        /**
         * Set city
         * @param city The city name (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode The zip-code (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set postalCodeExtension
         * @param postalCodeExtension The zip-code extension (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder postalCodeExtension(String postalCodeExtension) {
            this.postalCodeExtension = postalCodeExtension;
            return this;
        }
        
        /**
         * Set countrySubdivisionCode
         * @param countrySubdivisionCode The state code (ISO 3166 subdivision code). This data field cannot be PATCHED for ACTIVE worker (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder countrySubdivisionCode(String countrySubdivisionCode) {
            this.countrySubdivisionCode = countrySubdivisionCode;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode The country code (ISO 3166 alpha-2) (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AddCommunicationRequestBuilder
         */
        public AddCommunicationRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for addCommunication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            return addCommunicationCall(workerId, communicationResource1, _callback);
        }

        private CommunicationResource1 buildBodyParams() {
            CommunicationResource1 communicationResource1 = new CommunicationResource1();
            communicationResource1.communicationId(this.communicationId);
            if (this.type != null)
            communicationResource1.type(CommunicationResource1.TypeEnum.fromValue(this.type));
            if (this.usageType != null)
            communicationResource1.usageType(CommunicationResource1.UsageTypeEnum.fromValue(this.usageType));
            communicationResource1.dialCountry(this.dialCountry);
            communicationResource1.dialArea(this.dialArea);
            communicationResource1.dialNumber(this.dialNumber);
            communicationResource1.dialExtension(this.dialExtension);
            communicationResource1.uri(this.uri);
            communicationResource1.streetLineOne(this.streetLineOne);
            communicationResource1.streetLineTwo(this.streetLineTwo);
            communicationResource1.postOfficeBox(this.postOfficeBox);
            communicationResource1.city(this.city);
            communicationResource1.postalCode(this.postalCode);
            communicationResource1.postalCodeExtension(this.postalCodeExtension);
            communicationResource1.countrySubdivisionCode(this.countrySubdivisionCode);
            communicationResource1.countryCode(this.countryCode);
            communicationResource1.links(this.links);
            return communicationResource1;
        }

        /**
         * Execute addCommunication request
         * @return CommunicationResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CommunicationResource1 execute() throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            ApiResponse<CommunicationResource1> localVarResp = addCommunicationWithHttpInfo(workerId, communicationResource1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCommunication request with HTTP info returned
         * @return ApiResponse&lt;CommunicationResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommunicationResource1> executeWithHttpInfo() throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            return addCommunicationWithHttpInfo(workerId, communicationResource1);
        }

        /**
         * Execute addCommunication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommunicationResource1> _callback) throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            return addCommunicationAsync(workerId, communicationResource1, _callback);
        }
    }

    /**
     * Worker Communication
     * Add a single communication to the \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     * @param workerId The id assigned to the worker that workers are being requested for. (required)
     * @param communicationResource1  (required)
     * @return AddCommunicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddCommunicationRequestBuilder addCommunication(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddCommunicationRequestBuilder(workerId);
    }
    private okhttp3.Call addDirectDepositCall(String workerId, DirectDepositResource directDepositResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directDepositResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/directdeposits"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposit.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposit.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDirectDepositValidateBeforeCall(String workerId, DirectDepositResource directDepositResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addDirectDeposit(Async)");
        }

        // verify the required parameter 'directDepositResource' is set
        if (directDepositResource == null) {
            throw new ApiException("Missing the required parameter 'directDepositResource' when calling addDirectDeposit(Async)");
        }

        return addDirectDepositCall(workerId, directDepositResource, _callback);

    }


    private ApiResponse<DirectDepositResource> addDirectDepositWithHttpInfo(String workerId, DirectDepositResource directDepositResource) throws ApiException {
        okhttp3.Call localVarCall = addDirectDepositValidateBeforeCall(workerId, directDepositResource, null);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDirectDepositAsync(String workerId, DirectDepositResource directDepositResource, final ApiCallback<DirectDepositResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDirectDepositValidateBeforeCall(workerId, directDepositResource, _callback);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDirectDepositRequestBuilder {
        private final String workerId;
        private String directDepositId;
        private OffsetDateTime startDate;
        private String paymentType;
        private String accountType;
        private Double value;
        private String routingNumber;
        private String accountNumber;
        private String priority;
        private List<Link> links;

        private AddDirectDepositRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set directDepositId
         * @param directDepositId The ID for the direct deposit item. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder directDepositId(String directDepositId) {
            this.directDepositId = directDepositId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date that this direct deposit will be applied to future pay periods. This data field cannot be PATCHED. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set paymentType
         * @param paymentType A type of payment for the direct deposit. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder paymentType(String paymentType) {
            this.paymentType = paymentType;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Financial institutions account type. This data field cannot be PATCHED. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set value
         * @param value The amount to be applied to this direct deposit. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set routingNumber
         * @param routingNumber The financial institutions routing number.This data field cannot be PATCHED. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The financial institutions account number.This data field cannot be PATCHED. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set priority
         * @param priority The priority order for which the direct deposits will be performed in. When a new direct deposit is added the priority will be assigned. The priority can be modified only by swapping with a different direct deposit using the bulk PATCH. A paymentType of REMAINDER will show a priority of 99 and can&#39;t be modified.This data field cannot be PATCHED. (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder priority(String priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AddDirectDepositRequestBuilder
         */
        public AddDirectDepositRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for addDirectDeposit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return addDirectDepositCall(workerId, directDepositResource, _callback);
        }

        private DirectDepositResource buildBodyParams() {
            DirectDepositResource directDepositResource = new DirectDepositResource();
            directDepositResource.directDepositId(this.directDepositId);
            directDepositResource.startDate(this.startDate);
            if (this.paymentType != null)
            directDepositResource.paymentType(DirectDepositResource.PaymentTypeEnum.fromValue(this.paymentType));
            if (this.accountType != null)
            directDepositResource.accountType(DirectDepositResource.AccountTypeEnum.fromValue(this.accountType));
            directDepositResource.value(this.value);
            directDepositResource.routingNumber(this.routingNumber);
            directDepositResource.accountNumber(this.accountNumber);
            directDepositResource.priority(this.priority);
            directDepositResource.links(this.links);
            return directDepositResource;
        }

        /**
         * Execute addDirectDeposit request
         * @return DirectDepositResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DirectDepositResource execute() throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            ApiResponse<DirectDepositResource> localVarResp = addDirectDepositWithHttpInfo(workerId, directDepositResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDirectDeposit request with HTTP info returned
         * @return ApiResponse&lt;DirectDepositResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DirectDepositResource> executeWithHttpInfo() throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return addDirectDepositWithHttpInfo(workerId, directDepositResource);
        }

        /**
         * Execute addDirectDeposit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DirectDepositResource> _callback) throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return addDirectDepositAsync(workerId, directDepositResource, _callback);
        }
    }

    /**
     * Worker Direct Deposit
     * Add a direct deposit to an \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param directDepositResource  (required)
     * @return AddDirectDepositRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddDirectDepositRequestBuilder addDirectDeposit(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddDirectDepositRequestBuilder(workerId);
    }
    private okhttp3.Call addFederalTaxSetupCall(String workerId, WorkerFederalTaxResource workerFederalTaxResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerFederalTaxResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/federaltax"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.paychex.worker.federaltax2020.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.federaltax2020.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFederalTaxSetupValidateBeforeCall(String workerId, WorkerFederalTaxResource workerFederalTaxResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addFederalTaxSetup(Async)");
        }

        // verify the required parameter 'workerFederalTaxResource' is set
        if (workerFederalTaxResource == null) {
            throw new ApiException("Missing the required parameter 'workerFederalTaxResource' when calling addFederalTaxSetup(Async)");
        }

        return addFederalTaxSetupCall(workerId, workerFederalTaxResource, _callback);

    }


    private ApiResponse<WorkerFederalTaxResource> addFederalTaxSetupWithHttpInfo(String workerId, WorkerFederalTaxResource workerFederalTaxResource) throws ApiException {
        okhttp3.Call localVarCall = addFederalTaxSetupValidateBeforeCall(workerId, workerFederalTaxResource, null);
        Type localVarReturnType = new TypeToken<WorkerFederalTaxResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFederalTaxSetupAsync(String workerId, WorkerFederalTaxResource workerFederalTaxResource, final ApiCallback<WorkerFederalTaxResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFederalTaxSetupValidateBeforeCall(workerId, workerFederalTaxResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerFederalTaxResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFederalTaxSetupRequestBuilder {
        private final String workerId;
        private String taxId;
        private String filingStatus;
        private String multipleJobs;
        private String dependentsAmount;
        private String otherIncome;
        private String deductionsAmount;
        private String extraWithholdingAmount;
        private String taxesWithheld;

        private AddFederalTaxSetupRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set taxId
         * @param taxId The ID for the federal tax item. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set filingStatus
         * @param filingStatus Filing status. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder filingStatus(String filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set multipleJobs
         * @param multipleJobs See federal W-4 instructions. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder multipleJobs(String multipleJobs) {
            this.multipleJobs = multipleJobs;
            return this;
        }
        
        /**
         * Set dependentsAmount
         * @param dependentsAmount See federal W-4 instructions. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder dependentsAmount(String dependentsAmount) {
            this.dependentsAmount = dependentsAmount;
            return this;
        }
        
        /**
         * Set otherIncome
         * @param otherIncome See federal W-4 instructions. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder otherIncome(String otherIncome) {
            this.otherIncome = otherIncome;
            return this;
        }
        
        /**
         * Set deductionsAmount
         * @param deductionsAmount See federal W-4 instructions. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder deductionsAmount(String deductionsAmount) {
            this.deductionsAmount = deductionsAmount;
            return this;
        }
        
        /**
         * Set extraWithholdingAmount
         * @param extraWithholdingAmount Additional tax you want withheld each pay period. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder extraWithholdingAmount(String extraWithholdingAmount) {
            this.extraWithholdingAmount = extraWithholdingAmount;
            return this;
        }
        
        /**
         * Set taxesWithheld
         * @param taxesWithheld Should federal taxes be withheld. (optional)
         * @return AddFederalTaxSetupRequestBuilder
         */
        public AddFederalTaxSetupRequestBuilder taxesWithheld(String taxesWithheld) {
            this.taxesWithheld = taxesWithheld;
            return this;
        }
        
        /**
         * Build call for addFederalTaxSetup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Worker Federal Tax successfully added </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            return addFederalTaxSetupCall(workerId, workerFederalTaxResource, _callback);
        }

        private WorkerFederalTaxResource buildBodyParams() {
            WorkerFederalTaxResource workerFederalTaxResource = new WorkerFederalTaxResource();
            workerFederalTaxResource.taxId(this.taxId);
            if (this.filingStatus != null)
            workerFederalTaxResource.filingStatus(WorkerFederalTaxResource.FilingStatusEnum.fromValue(this.filingStatus));
            if (this.multipleJobs != null)
            workerFederalTaxResource.multipleJobs(WorkerFederalTaxResource.MultipleJobsEnum.fromValue(this.multipleJobs));
            workerFederalTaxResource.dependentsAmount(this.dependentsAmount);
            workerFederalTaxResource.otherIncome(this.otherIncome);
            workerFederalTaxResource.deductionsAmount(this.deductionsAmount);
            workerFederalTaxResource.extraWithholdingAmount(this.extraWithholdingAmount);
            if (this.taxesWithheld != null)
            workerFederalTaxResource.taxesWithheld(WorkerFederalTaxResource.TaxesWithheldEnum.fromValue(this.taxesWithheld));
            return workerFederalTaxResource;
        }

        /**
         * Execute addFederalTaxSetup request
         * @return WorkerFederalTaxResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Worker Federal Tax successfully added </td><td>  -  </td></tr>
         </table>
         */
        public WorkerFederalTaxResource execute() throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            ApiResponse<WorkerFederalTaxResource> localVarResp = addFederalTaxSetupWithHttpInfo(workerId, workerFederalTaxResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFederalTaxSetup request with HTTP info returned
         * @return ApiResponse&lt;WorkerFederalTaxResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Worker Federal Tax successfully added </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerFederalTaxResource> executeWithHttpInfo() throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            return addFederalTaxSetupWithHttpInfo(workerId, workerFederalTaxResource);
        }

        /**
         * Execute addFederalTaxSetup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Worker Federal Tax successfully added </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerFederalTaxResource> _callback) throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            return addFederalTaxSetupAsync(workerId, workerFederalTaxResource, _callback);
        }
    }

    /**
     * Worker Federal Tax
     * Add federal tax setup for a \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param workerFederalTaxResource  (required)
     * @return AddFederalTaxSetupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Worker Federal Tax successfully added </td><td>  -  </td></tr>
     </table>
     */
    public AddFederalTaxSetupRequestBuilder addFederalTaxSetup(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddFederalTaxSetupRequestBuilder(workerId);
    }
    private okhttp3.Call addPayComponentCall(String workerId, RecurringResource recurringResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recurringResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/paycomponents"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponents.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponents.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPayComponentValidateBeforeCall(String workerId, RecurringResource recurringResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addPayComponent(Async)");
        }

        // verify the required parameter 'recurringResource' is set
        if (recurringResource == null) {
            throw new ApiException("Missing the required parameter 'recurringResource' when calling addPayComponent(Async)");
        }

        return addPayComponentCall(workerId, recurringResource, _callback);

    }


    private ApiResponse<RecurringResource> addPayComponentWithHttpInfo(String workerId, RecurringResource recurringResource) throws ApiException {
        okhttp3.Call localVarCall = addPayComponentValidateBeforeCall(workerId, recurringResource, null);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPayComponentAsync(String workerId, RecurringResource recurringResource, final ApiCallback<RecurringResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPayComponentValidateBeforeCall(workerId, recurringResource, _callback);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPayComponentRequestBuilder {
        private final String workerId;
        private String workerComponentId;
        private String componentId;
        private String name;
        private String calculationType;
        private String calculationBaseId;
        private Double value;
        private OffsetDateTime startDate;
        private OffsetDateTime effectiveDate;
        private OffsetDateTime endDate;
        private String effectOnPay;
        private String classificationType;
        private PayComponentFrequencyTypeResource1 frequency;
        private List<Link> links;

        private AddPayComponentRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set workerComponentId
         * @param workerComponentId The id of a single pay component that a workers has. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder workerComponentId(String workerComponentId) {
            this.workerComponentId = workerComponentId;
            return this;
        }
        
        /**
         * Set componentId
         * @param componentId The unique identifier of the pay component. This data field cannot be PATCHED. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder componentId(String componentId) {
            this.componentId = componentId;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the pay component. This data field will be populated automatically based on componentId. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set calculationType
         * @param calculationType The type of calculation that will be applied for the pay component . (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder calculationType(String calculationType) {
            this.calculationType = calculationType;
            return this;
        }
        
        /**
         * Set calculationBaseId
         * @param calculationBaseId This is required if you are not using a FLAT_DOLLAR_AMOUNT Calculation Type. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder calculationBaseId(String calculationBaseId) {
            this.calculationBaseId = calculationBaseId;
            return this;
        }
        
        /**
         * Set value
         * @param value This is used to specify the value that is used against the calculationType. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date which this pay component will start to be applied during the payruns. This is an optional field that default to current datetime if not provided. This cannot be backdated but can be added to start in the future. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Date which this pay component has started for the worker. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder effectiveDate(OffsetDateTime effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date which this pay component has ended for the worker. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set effectOnPay
         * @param effectOnPay What the effect on pay will be (REDUCTION OR ADDITION), currently only reductions are available. This data field will be populated automatically based on componentId. This data field cannot be PATCHED (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder effectOnPay(String effectOnPay) {
            this.effectOnPay = effectOnPay;
            return this;
        }
        
        /**
         * Set classificationType
         * @param classificationType The category that this component falls into. (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder classificationType(String classificationType) {
            this.classificationType = classificationType;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder frequency(PayComponentFrequencyTypeResource1 frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AddPayComponentRequestBuilder
         */
        public AddPayComponentRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for addPayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return addPayComponentCall(workerId, recurringResource, _callback);
        }

        private RecurringResource buildBodyParams() {
            RecurringResource recurringResource = new RecurringResource();
            recurringResource.workerComponentId(this.workerComponentId);
            recurringResource.componentId(this.componentId);
            recurringResource.name(this.name);
            if (this.calculationType != null)
            recurringResource.calculationType(RecurringResource.CalculationTypeEnum.fromValue(this.calculationType));
            recurringResource.calculationBaseId(this.calculationBaseId);
            recurringResource.value(this.value);
            recurringResource.startDate(this.startDate);
            recurringResource.effectiveDate(this.effectiveDate);
            recurringResource.endDate(this.endDate);
            recurringResource.effectOnPay(this.effectOnPay);
            recurringResource.classificationType(this.classificationType);
            recurringResource.frequency(this.frequency);
            recurringResource.links(this.links);
            return recurringResource;
        }

        /**
         * Execute addPayComponent request
         * @return RecurringResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public RecurringResource execute() throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            ApiResponse<RecurringResource> localVarResp = addPayComponentWithHttpInfo(workerId, recurringResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPayComponent request with HTTP info returned
         * @return ApiResponse&lt;RecurringResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringResource> executeWithHttpInfo() throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return addPayComponentWithHttpInfo(workerId, recurringResource);
        }

        /**
         * Execute addPayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringResource> _callback) throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return addPayComponentAsync(workerId, recurringResource, _callback);
        }
    }

    /**
     * Worker Pay Component
     * Add a single pay component to the \&quot;Active\&quot; worker. This pay component will be used for apply recurring pay components on a workers check based on the frequency specified. supports the ability to POST both Addition and Reduction type pay components.
     * @param workerId ID associated with desired worker. (required)
     * @param recurringResource  (required)
     * @return AddPayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddPayComponentRequestBuilder addPayComponent(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddPayComponentRequestBuilder(workerId);
    }
    private okhttp3.Call addPayRateCall(String workerId, PayRateResource payRateResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payRateResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation/payrates"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.payrate.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.payrate.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPayRateValidateBeforeCall(String workerId, PayRateResource payRateResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addPayRate(Async)");
        }

        // verify the required parameter 'payRateResource' is set
        if (payRateResource == null) {
            throw new ApiException("Missing the required parameter 'payRateResource' when calling addPayRate(Async)");
        }

        return addPayRateCall(workerId, payRateResource, _callback);

    }


    private ApiResponse<PayRateResource> addPayRateWithHttpInfo(String workerId, PayRateResource payRateResource) throws ApiException {
        okhttp3.Call localVarCall = addPayRateValidateBeforeCall(workerId, payRateResource, null);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPayRateAsync(String workerId, PayRateResource payRateResource, final ApiCallback<PayRateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPayRateValidateBeforeCall(workerId, payRateResource, _callback);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPayRateRequestBuilder {
        private final String workerId;
        private String description;
        private String rateId;
        private OffsetDateTime startDate;
        private String rateNumber;
        private String rateType;
        private String amount;
        private String standardHours;
        private String standardOvertime;
        private Boolean _default;
        private String effectiveDate;
        private List<Link> links;

        private AddPayRateRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set description
         * @param description Describes the rate for the worker. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set rateId
         * @param rateId Unique identifier for this workers pay rate. **This ID will change if this is created for an IN_PROGRESS worker that is later completed within Flex** (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder rateId(String rateId) {
            this.rateId = rateId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date when the pay rate is going to begin. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set rateNumber
         * @param rateNumber The number of the rate. A worker can have up to 5 different rates. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder rateNumber(String rateNumber) {
            this.rateNumber = rateNumber;
            return this;
        }
        
        /**
         * Set rateType
         * @param rateType Type of rate. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder rateType(String rateType) {
            this.rateType = rateType;
            return this;
        }
        
        /**
         * Set amount
         * @param amount The currency amount which this rate is applied. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder amount(String amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set standardHours
         * @param standardHours Default standard hours that this rate is used with a pay frequency. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder standardHours(String standardHours) {
            this.standardHours = standardHours;
            return this;
        }
        
        /**
         * Set standardOvertime
         * @param standardOvertime Default over time hours that this rate is used with a pay frequency. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder standardOvertime(String standardOvertime) {
            this.standardOvertime = standardOvertime;
            return this;
        }
        
        /**
         * Set _default
         * @param _default If this rate is the default one to apply on the worker. (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date when the pay rate becomes effective for the worker.(can be used only in POST/PATCH for an active worker) (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder effectiveDate(String effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AddPayRateRequestBuilder
         */
        public AddPayRateRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for addPayRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            return addPayRateCall(workerId, payRateResource, _callback);
        }

        private PayRateResource buildBodyParams() {
            PayRateResource payRateResource = new PayRateResource();
            payRateResource.description(this.description);
            payRateResource.rateId(this.rateId);
            payRateResource.startDate(this.startDate);
            payRateResource.rateNumber(this.rateNumber);
            if (this.rateType != null)
            payRateResource.rateType(PayRateResource.RateTypeEnum.fromValue(this.rateType));
            payRateResource.amount(this.amount);
            payRateResource.standardHours(this.standardHours);
            payRateResource.standardOvertime(this.standardOvertime);
            payRateResource._default(this._default);
            payRateResource.effectiveDate(this.effectiveDate);
            payRateResource.links(this.links);
            return payRateResource;
        }

        /**
         * Execute addPayRate request
         * @return PayRateResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayRateResource execute() throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            ApiResponse<PayRateResource> localVarResp = addPayRateWithHttpInfo(workerId, payRateResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPayRate request with HTTP info returned
         * @return ApiResponse&lt;PayRateResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayRateResource> executeWithHttpInfo() throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            return addPayRateWithHttpInfo(workerId, payRateResource);
        }

        /**
         * Execute addPayRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayRateResource> _callback) throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            return addPayRateAsync(workerId, payRateResource, _callback);
        }
    }

    /**
     * Worker Pay Rate
     * Add a single compensation rate to the \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param payRateResource  (required)
     * @return AddPayRateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddPayRateRequestBuilder addPayRate(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddPayRateRequestBuilder(workerId);
    }
    private okhttp3.Call addWorkerContactsCall(String workerId, WorkerContactResource workerContactResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerContactResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/contacts"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.contacts.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.contacts.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addWorkerContactsValidateBeforeCall(String workerId, WorkerContactResource workerContactResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addWorkerContacts(Async)");
        }

        // verify the required parameter 'workerContactResource' is set
        if (workerContactResource == null) {
            throw new ApiException("Missing the required parameter 'workerContactResource' when calling addWorkerContacts(Async)");
        }

        return addWorkerContactsCall(workerId, workerContactResource, _callback);

    }


    private ApiResponse<WorkerContactResource> addWorkerContactsWithHttpInfo(String workerId, WorkerContactResource workerContactResource) throws ApiException {
        okhttp3.Call localVarCall = addWorkerContactsValidateBeforeCall(workerId, workerContactResource, null);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addWorkerContactsAsync(String workerId, WorkerContactResource workerContactResource, final ApiCallback<WorkerContactResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addWorkerContactsValidateBeforeCall(workerId, workerContactResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddWorkerContactsRequestBuilder {
        private final String workerId;
        private String contactId;
        private ContactTypeResource1 contactType;
        private RelationshipResource relationship;

        private AddWorkerContactsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set contactId
         * @param contactId The ID for the workers specific contact. (optional)
         * @return AddWorkerContactsRequestBuilder
         */
        public AddWorkerContactsRequestBuilder contactId(String contactId) {
            this.contactId = contactId;
            return this;
        }
        
        /**
         * Set contactType
         * @param contactType  (optional)
         * @return AddWorkerContactsRequestBuilder
         */
        public AddWorkerContactsRequestBuilder contactType(ContactTypeResource1 contactType) {
            this.contactType = contactType;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship  (optional)
         * @return AddWorkerContactsRequestBuilder
         */
        public AddWorkerContactsRequestBuilder relationship(RelationshipResource relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Build call for addWorkerContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            return addWorkerContactsCall(workerId, workerContactResource, _callback);
        }

        private WorkerContactResource buildBodyParams() {
            WorkerContactResource workerContactResource = new WorkerContactResource();
            workerContactResource.contactId(this.contactId);
            workerContactResource.contactType(this.contactType);
            workerContactResource.relationship(this.relationship);
            return workerContactResource;
        }

        /**
         * Execute addWorkerContacts request
         * @return WorkerContactResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerContactResource execute() throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            ApiResponse<WorkerContactResource> localVarResp = addWorkerContactsWithHttpInfo(workerId, workerContactResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addWorkerContacts request with HTTP info returned
         * @return ApiResponse&lt;WorkerContactResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerContactResource> executeWithHttpInfo() throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            return addWorkerContactsWithHttpInfo(workerId, workerContactResource);
        }

        /**
         * Execute addWorkerContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerContactResource> _callback) throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            return addWorkerContactsAsync(workerId, workerContactResource, _callback);
        }
    }

    /**
     * Worker Contacts
     * Add one or more contacts to a worker. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. If one or more contacts are posted for the same contact type, and there are currently no contacts of that type for the worker, the first contact in the list will be made primary unless another in the list is expressly marked as primary. When a new contact is made primary the previous primary contact will be marked as not primary. Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
     * @param workerId ID associated with desired worker. (required)
     * @param workerContactResource  (required)
     * @return AddWorkerContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public AddWorkerContactsRequestBuilder addWorkerContacts(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddWorkerContactsRequestBuilder(workerId);
    }
    private okhttp3.Call createCustomFieldCall(String workerId, WorkerCustomFieldsResource workerCustomFieldsResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerCustomFieldsResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/customfields"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.customfields.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.customfields.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldValidateBeforeCall(String workerId, WorkerCustomFieldsResource workerCustomFieldsResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling createCustomField(Async)");
        }

        // verify the required parameter 'workerCustomFieldsResource' is set
        if (workerCustomFieldsResource == null) {
            throw new ApiException("Missing the required parameter 'workerCustomFieldsResource' when calling createCustomField(Async)");
        }

        return createCustomFieldCall(workerId, workerCustomFieldsResource, _callback);

    }


    private ApiResponse<WorkerCustomFieldsResource> createCustomFieldWithHttpInfo(String workerId, WorkerCustomFieldsResource workerCustomFieldsResource) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldValidateBeforeCall(workerId, workerCustomFieldsResource, null);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomFieldAsync(String workerId, WorkerCustomFieldsResource workerCustomFieldsResource, final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldValidateBeforeCall(workerId, workerCustomFieldsResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomFieldRequestBuilder {
        private final String workerId;
        private String workerCustomFieldId;
        private String customFieldId;
        private String type;
        private Boolean booleanValue;
        private String textValue;
        private Double numericValue;
        private OffsetDateTime dateValue;
        private String dropdownId;
        private String dropdownValue;
        private String customFieldName;
        private Boolean required;
        private Boolean checkStub;
        private Boolean employeeEditable;

        private CreateCustomFieldRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set workerCustomFieldId
         * @param workerCustomFieldId The unique identifier that is autogenerated when a custom field is created (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder workerCustomFieldId(String workerCustomFieldId) {
            this.workerCustomFieldId = workerCustomFieldId;
            return this;
        }
        
        /**
         * Set customFieldId
         * @param customFieldId client Custom Field Id (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder customFieldId(String customFieldId) {
            this.customFieldId = customFieldId;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of field the custom field is (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set booleanValue
         * @param booleanValue The value for BOOLEAN type (true/false) (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder booleanValue(Boolean booleanValue) {
            this.booleanValue = booleanValue;
            return this;
        }
        
        /**
         * Set textValue
         * @param textValue The value for TEXT type (any text, alphanumeric, special characters allowed) (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder textValue(String textValue) {
            this.textValue = textValue;
            return this;
        }
        
        /**
         * Set numericValue
         * @param numericValue Numeric data type can have three formats namely - whole number, second decimal place and fourth decimal place, example: 12 , 12.34 or 12.3456 (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder numericValue(Double numericValue) {
            this.numericValue = numericValue;
            return this;
        }
        
        /**
         * Set dateValue
         * @param dateValue The value for DATE type , example : 2012-02-01T05:00:00Z (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder dateValue(OffsetDateTime dateValue) {
            this.dateValue = dateValue;
            return this;
        }
        
        /**
         * Set dropdownId
         * @param dropdownId The unique identifier that is autogenerated when dropdown list is created (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder dropdownId(String dropdownId) {
            this.dropdownId = dropdownId;
            return this;
        }
        
        /**
         * Set dropdownValue
         * @param dropdownValue The value for dropdown list (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder dropdownValue(String dropdownValue) {
            this.dropdownValue = dropdownValue;
            return this;
        }
        
        /**
         * Set customFieldName
         * @param customFieldName The name of the custom field. Such as: \\\&quot;Hobbies\\\&quot; (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder customFieldName(String customFieldName) {
            this.customFieldName = customFieldName;
            return this;
        }
        
        /**
         * Set required
         * @param required Where to indicate if the custom field is required on the worker where true &#x3D; required and false &#x3D; not required (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set checkStub
         * @param checkStub Where to indicate if the custom field is required on the workers pay stub, where true &#x3D; required and false &#x3D; not required. (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder checkStub(Boolean checkStub) {
            this.checkStub = checkStub;
            return this;
        }
        
        /**
         * Set employeeEditable
         * @param employeeEditable Where to indicate if the custom field is able to be edited by the employee, where true &#x3D; required and false &#x3D; not required. (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder employeeEditable(Boolean employeeEditable) {
            this.employeeEditable = employeeEditable;
            return this;
        }
        
        /**
         * Build call for createCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            return createCustomFieldCall(workerId, workerCustomFieldsResource, _callback);
        }

        private WorkerCustomFieldsResource buildBodyParams() {
            WorkerCustomFieldsResource workerCustomFieldsResource = new WorkerCustomFieldsResource();
            workerCustomFieldsResource.workerCustomFieldId(this.workerCustomFieldId);
            workerCustomFieldsResource.customFieldId(this.customFieldId);
            if (this.type != null)
            workerCustomFieldsResource.type(WorkerCustomFieldsResource.TypeEnum.fromValue(this.type));
            workerCustomFieldsResource.booleanValue(this.booleanValue);
            workerCustomFieldsResource.textValue(this.textValue);
            workerCustomFieldsResource.numericValue(this.numericValue);
            workerCustomFieldsResource.dateValue(this.dateValue);
            workerCustomFieldsResource.dropdownId(this.dropdownId);
            workerCustomFieldsResource.dropdownValue(this.dropdownValue);
            workerCustomFieldsResource.customFieldName(this.customFieldName);
            workerCustomFieldsResource.required(this.required);
            workerCustomFieldsResource.checkStub(this.checkStub);
            workerCustomFieldsResource.employeeEditable(this.employeeEditable);
            return workerCustomFieldsResource;
        }

        /**
         * Execute createCustomField request
         * @return WorkerCustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully created </td><td>  -  </td></tr>
         </table>
         */
        public WorkerCustomFieldsResource execute() throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            ApiResponse<WorkerCustomFieldsResource> localVarResp = createCustomFieldWithHttpInfo(workerId, workerCustomFieldsResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomField request with HTTP info returned
         * @return ApiResponse&lt;WorkerCustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerCustomFieldsResource> executeWithHttpInfo() throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            return createCustomFieldWithHttpInfo(workerId, workerCustomFieldsResource);
        }

        /**
         * Execute createCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            return createCustomFieldAsync(workerId, workerCustomFieldsResource, _callback);
        }
    }

    /**
     * Worker Custom Field
     * Create CustomField at the worker level
     * @param workerId ID associated with desired worker. (required)
     * @param workerCustomFieldsResource  (required)
     * @return CreateCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Custom field successfully created </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFieldRequestBuilder createCustomField(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new CreateCustomFieldRequestBuilder(workerId);
    }
    private okhttp3.Call deleteContactByContactIdCall(String workerId, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/contacts/{contactId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContactByContactIdValidateBeforeCall(String workerId, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling deleteContactByContactId(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling deleteContactByContactId(Async)");
        }

        return deleteContactByContactIdCall(workerId, contactId, _callback);

    }


    private ApiResponse<Void> deleteContactByContactIdWithHttpInfo(String workerId, String contactId) throws ApiException {
        okhttp3.Call localVarCall = deleteContactByContactIdValidateBeforeCall(workerId, contactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteContactByContactIdAsync(String workerId, String contactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContactByContactIdValidateBeforeCall(workerId, contactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteContactByContactIdRequestBuilder {
        private final String workerId;
        private final String contactId;

        private DeleteContactByContactIdRequestBuilder(String workerId, String contactId) {
            this.workerId = workerId;
            this.contactId = contactId;
        }

        /**
         * Build call for deleteContactByContactId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContactByContactIdCall(workerId, contactId, _callback);
        }


        /**
         * Execute deleteContactByContactId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteContactByContactIdWithHttpInfo(workerId, contactId);
        }

        /**
         * Execute deleteContactByContactId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteContactByContactIdWithHttpInfo(workerId, contactId);
        }

        /**
         * Execute deleteContactByContactId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteContactByContactIdAsync(workerId, contactId, _callback);
        }
    }

    /**
     * Worker Contact
     * Delete a worker contact by contactId.
     * @param workerId ID associated with desired worker. (required)
     * @param contactId ID associated with desired worker contact. (required)
     * @return DeleteContactByContactIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteContactByContactIdRequestBuilder deleteContactByContactId(String workerId, String contactId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new DeleteContactByContactIdRequestBuilder(workerId, contactId);
    }
    private okhttp3.Call deleteCustomFieldCall(String workerId, String workerCustomFieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/customfields/{workerCustomFieldId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "workerCustomFieldId" + "}", localVarApiClient.escapeString(workerCustomFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldValidateBeforeCall(String workerId, String workerCustomFieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling deleteCustomField(Async)");
        }

        // verify the required parameter 'workerCustomFieldId' is set
        if (workerCustomFieldId == null) {
            throw new ApiException("Missing the required parameter 'workerCustomFieldId' when calling deleteCustomField(Async)");
        }

        return deleteCustomFieldCall(workerId, workerCustomFieldId, _callback);

    }


    private ApiResponse<Void> deleteCustomFieldWithHttpInfo(String workerId, String workerCustomFieldId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(workerId, workerCustomFieldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomFieldAsync(String workerId, String workerCustomFieldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(workerId, workerCustomFieldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomFieldRequestBuilder {
        private final String workerId;
        private final String workerCustomFieldId;

        private DeleteCustomFieldRequestBuilder(String workerId, String workerCustomFieldId) {
            this.workerId = workerId;
            this.workerCustomFieldId = workerCustomFieldId;
        }

        /**
         * Build call for deleteCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomFieldCall(workerId, workerCustomFieldId, _callback);
        }


        /**
         * Execute deleteCustomField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomFieldWithHttpInfo(workerId, workerCustomFieldId);
        }

        /**
         * Execute deleteCustomField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomFieldWithHttpInfo(workerId, workerCustomFieldId);
        }

        /**
         * Execute deleteCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomFieldAsync(workerId, workerCustomFieldId, _callback);
        }
    }

    /**
     * Worker Custom Field
     * Delete CustomField at the worker level
     * @param workerId ID associated with desired worker. (required)
     * @param workerCustomFieldId ID associated with desired worker custom field. (required)
     * @return DeleteCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomFieldRequestBuilder deleteCustomField(String workerId, String workerCustomFieldId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (workerCustomFieldId == null) throw new IllegalArgumentException("\"workerCustomFieldId\" is required but got null");
            

        return new DeleteCustomFieldRequestBuilder(workerId, workerCustomFieldId);
    }
    private okhttp3.Call deleteInProgressCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInProgressValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling deleteInProgress(Async)");
        }

        return deleteInProgressCall(workerId, _callback);

    }


    private ApiResponse<Void> deleteInProgressWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = deleteInProgressValidateBeforeCall(workerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInProgressAsync(String workerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInProgressValidateBeforeCall(workerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteInProgressRequestBuilder {
        private final String workerId;

        private DeleteInProgressRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for deleteInProgress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Inprogress Worker successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInProgressCall(workerId, _callback);
        }


        /**
         * Execute deleteInProgress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Inprogress Worker successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInProgressWithHttpInfo(workerId);
        }

        /**
         * Execute deleteInProgress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Inprogress Worker successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInProgressWithHttpInfo(workerId);
        }

        /**
         * Execute deleteInProgress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Inprogress Worker successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInProgressAsync(workerId, _callback);
        }
    }

    /**
     * Worker
     * Delete in progress Worker
     * @param workerId ID associated with desired worker. (required)
     * @return DeleteInProgressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inprogress Worker successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInProgressRequestBuilder deleteInProgress(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new DeleteInProgressRequestBuilder(workerId);
    }
    private okhttp3.Call getCommunicationItemCall(String workerId, String communicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/communications/{communicationId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "communicationId" + "}", localVarApiClient.escapeString(communicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.communication.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommunicationItemValidateBeforeCall(String workerId, String communicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getCommunicationItem(Async)");
        }

        // verify the required parameter 'communicationId' is set
        if (communicationId == null) {
            throw new ApiException("Missing the required parameter 'communicationId' when calling getCommunicationItem(Async)");
        }

        return getCommunicationItemCall(workerId, communicationId, _callback);

    }


    private ApiResponse<CommunicationResource1> getCommunicationItemWithHttpInfo(String workerId, String communicationId) throws ApiException {
        okhttp3.Call localVarCall = getCommunicationItemValidateBeforeCall(workerId, communicationId, null);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommunicationItemAsync(String workerId, String communicationId, final ApiCallback<CommunicationResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommunicationItemValidateBeforeCall(workerId, communicationId, _callback);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommunicationItemRequestBuilder {
        private final String workerId;
        private final String communicationId;

        private GetCommunicationItemRequestBuilder(String workerId, String communicationId) {
            this.workerId = workerId;
            this.communicationId = communicationId;
        }

        /**
         * Build call for getCommunicationItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommunicationItemCall(workerId, communicationId, _callback);
        }


        /**
         * Execute getCommunicationItem request
         * @return CommunicationResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CommunicationResource1 execute() throws ApiException {
            ApiResponse<CommunicationResource1> localVarResp = getCommunicationItemWithHttpInfo(workerId, communicationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommunicationItem request with HTTP info returned
         * @return ApiResponse&lt;CommunicationResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommunicationResource1> executeWithHttpInfo() throws ApiException {
            return getCommunicationItemWithHttpInfo(workerId, communicationId);
        }

        /**
         * Execute getCommunicationItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommunicationResource1> _callback) throws ApiException {
            return getCommunicationItemAsync(workerId, communicationId, _callback);
        }
    }

    /**
     * Worker Communication
     * A \&quot;Active\&quot; or \&quot;In-progress\&quot; workers single communication item.
     * @param workerId The id assigned to the worker that workers are being requested for. (required)
     * @param communicationId The id of a single workers communication. (required)
     * @return GetCommunicationItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCommunicationItemRequestBuilder getCommunicationItem(String workerId, String communicationId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (communicationId == null) throw new IllegalArgumentException("\"communicationId\" is required but got null");
            

        return new GetCommunicationItemRequestBuilder(workerId, communicationId);
    }
    private okhttp3.Call getCommunicationsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/communications"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.communications.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommunicationsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getCommunications(Async)");
        }

        return getCommunicationsCall(workerId, _callback);

    }


    private ApiResponse<CommunicationResource1> getCommunicationsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getCommunicationsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommunicationsAsync(String workerId, final ApiCallback<CommunicationResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommunicationsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommunicationsRequestBuilder {
        private final String workerId;

        private GetCommunicationsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getCommunications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommunicationsCall(workerId, _callback);
        }


        /**
         * Execute getCommunications request
         * @return CommunicationResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CommunicationResource1 execute() throws ApiException {
            ApiResponse<CommunicationResource1> localVarResp = getCommunicationsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommunications request with HTTP info returned
         * @return ApiResponse&lt;CommunicationResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommunicationResource1> executeWithHttpInfo() throws ApiException {
            return getCommunicationsWithHttpInfo(workerId);
        }

        /**
         * Execute getCommunications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommunicationResource1> _callback) throws ApiException {
            return getCommunicationsAsync(workerId, _callback);
        }
    }

    /**
     * Worker Communications
     * Information about \&quot;Active\&quot; or \&quot;In-progress\&quot;  workers communications.
     * @param workerId The id assigned to the worker that workers are being requested for. (required)
     * @return GetCommunicationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCommunicationsRequestBuilder getCommunications(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetCommunicationsRequestBuilder(workerId);
    }
    private okhttp3.Call getCompensationInformationCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.v1+json",
            "application/vnd.paychex.payroll.compensation.standards_rates.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompensationInformationValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getCompensationInformation(Async)");
        }

        return getCompensationInformationCall(workerId, _callback);

    }


    private ApiResponse<CollectionResource> getCompensationInformationWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getCompensationInformationValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<CollectionResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompensationInformationAsync(String workerId, final ApiCallback<CollectionResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompensationInformationValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<CollectionResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompensationInformationRequestBuilder {
        private final String workerId;

        private GetCompensationInformationRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getCompensationInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompensationInformationCall(workerId, _callback);
        }


        /**
         * Execute getCompensationInformation request
         * @return CollectionResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CollectionResource execute() throws ApiException {
            ApiResponse<CollectionResource> localVarResp = getCompensationInformationWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompensationInformation request with HTTP info returned
         * @return ApiResponse&lt;CollectionResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionResource> executeWithHttpInfo() throws ApiException {
            return getCompensationInformationWithHttpInfo(workerId);
        }

        /**
         * Execute getCompensationInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionResource> _callback) throws ApiException {
            return getCompensationInformationAsync(workerId, _callback);
        }
    }

    /**
     * Worker Compensation
     * Information about a workers compensation.
     * @param workerId ID associated with desired worker. (required)
     * @return GetCompensationInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCompensationInformationRequestBuilder getCompensationInformation(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetCompensationInformationRequestBuilder(workerId);
    }
    private okhttp3.Call getContactByContactIdCall(String workerId, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/contacts/{contactId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.contact.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactByContactIdValidateBeforeCall(String workerId, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getContactByContactId(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getContactByContactId(Async)");
        }

        return getContactByContactIdCall(workerId, contactId, _callback);

    }


    private ApiResponse<WorkerContactResource> getContactByContactIdWithHttpInfo(String workerId, String contactId) throws ApiException {
        okhttp3.Call localVarCall = getContactByContactIdValidateBeforeCall(workerId, contactId, null);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContactByContactIdAsync(String workerId, String contactId, final ApiCallback<WorkerContactResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactByContactIdValidateBeforeCall(workerId, contactId, _callback);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContactByContactIdRequestBuilder {
        private final String workerId;
        private final String contactId;

        private GetContactByContactIdRequestBuilder(String workerId, String contactId) {
            this.workerId = workerId;
            this.contactId = contactId;
        }

        /**
         * Build call for getContactByContactId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContactByContactIdCall(workerId, contactId, _callback);
        }


        /**
         * Execute getContactByContactId request
         * @return WorkerContactResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerContactResource execute() throws ApiException {
            ApiResponse<WorkerContactResource> localVarResp = getContactByContactIdWithHttpInfo(workerId, contactId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContactByContactId request with HTTP info returned
         * @return ApiResponse&lt;WorkerContactResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerContactResource> executeWithHttpInfo() throws ApiException {
            return getContactByContactIdWithHttpInfo(workerId, contactId);
        }

        /**
         * Execute getContactByContactId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerContactResource> _callback) throws ApiException {
            return getContactByContactIdAsync(workerId, contactId, _callback);
        }
    }

    /**
     * Worker Contact
     * Get a worker contact by contactId.
     * @param workerId ID associated with desired worker. (required)
     * @param contactId The id of a single Contact. (required)
     * @return GetContactByContactIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetContactByContactIdRequestBuilder getContactByContactId(String workerId, String contactId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new GetContactByContactIdRequestBuilder(workerId, contactId);
    }
    private okhttp3.Call getContactsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/contacts"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.contacts.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getContacts(Async)");
        }

        return getContactsCall(workerId, _callback);

    }


    private ApiResponse<WorkerContactResource> getContactsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getContactsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContactsAsync(String workerId, final ApiCallback<WorkerContactResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContactsRequestBuilder {
        private final String workerId;

        private GetContactsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContactsCall(workerId, _callback);
        }


        /**
         * Execute getContacts request
         * @return WorkerContactResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerContactResource execute() throws ApiException {
            ApiResponse<WorkerContactResource> localVarResp = getContactsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContacts request with HTTP info returned
         * @return ApiResponse&lt;WorkerContactResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerContactResource> executeWithHttpInfo() throws ApiException {
            return getContactsWithHttpInfo(workerId);
        }

        /**
         * Execute getContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerContactResource> _callback) throws ApiException {
            return getContactsAsync(workerId, _callback);
        }
    }

    /**
     * Worker Contacts
     * Get all contacts for the specified worker.
     * @param workerId ID associated with desired worker. (required)
     * @return GetContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetContactsRequestBuilder getContacts(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetContactsRequestBuilder(workerId);
    }
    private okhttp3.Call getCustomFieldCall(String workerId, String workerCustomFieldId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/customfields/{workerCustomFieldId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "workerCustomFieldId" + "}", localVarApiClient.escapeString(workerCustomFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.customfield.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldValidateBeforeCall(String workerId, String workerCustomFieldId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getCustomField(Async)");
        }

        // verify the required parameter 'workerCustomFieldId' is set
        if (workerCustomFieldId == null) {
            throw new ApiException("Missing the required parameter 'workerCustomFieldId' when calling getCustomField(Async)");
        }

        return getCustomFieldCall(workerId, workerCustomFieldId, asof, _callback);

    }


    private ApiResponse<WorkerCustomFieldsResource> getCustomFieldWithHttpInfo(String workerId, String workerCustomFieldId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(workerId, workerCustomFieldId, asof, null);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldAsync(String workerId, String workerCustomFieldId, String asof, final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(workerId, workerCustomFieldId, asof, _callback);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldRequestBuilder {
        private final String workerId;
        private final String workerCustomFieldId;
        private String asof;

        private GetCustomFieldRequestBuilder(String workerId, String workerCustomFieldId) {
            this.workerId = workerId;
            this.workerCustomFieldId = workerCustomFieldId;
        }

        /**
         * Set asof
         * @param asof Returns custom field as of the date used in the request (optional)
         * @return GetCustomFieldRequestBuilder
         */
        public GetCustomFieldRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldCall(workerId, workerCustomFieldId, asof, _callback);
        }


        /**
         * Execute getCustomField request
         * @return WorkerCustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public WorkerCustomFieldsResource execute() throws ApiException {
            ApiResponse<WorkerCustomFieldsResource> localVarResp = getCustomFieldWithHttpInfo(workerId, workerCustomFieldId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomField request with HTTP info returned
         * @return ApiResponse&lt;WorkerCustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerCustomFieldsResource> executeWithHttpInfo() throws ApiException {
            return getCustomFieldWithHttpInfo(workerId, workerCustomFieldId, asof);
        }

        /**
         * Execute getCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {
            return getCustomFieldAsync(workerId, workerCustomFieldId, asof, _callback);
        }
    }

    /**
     * Worker Custom Field
     * Get the worker&#39;s customFields by workerCustomFieldId
     * @param workerId ID associated with desired worker. (required)
     * @param workerCustomFieldId ID associated with desired worker custom field. (required)
     * @return GetCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Custom field successfully returned </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldRequestBuilder getCustomField(String workerId, String workerCustomFieldId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (workerCustomFieldId == null) throw new IllegalArgumentException("\"workerCustomFieldId\" is required but got null");
            

        return new GetCustomFieldRequestBuilder(workerId, workerCustomFieldId);
    }
    private okhttp3.Call getCustomFieldsCall(String workerId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/customfields"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.customfields.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(String workerId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(workerId, asof, _callback);

    }


    private ApiResponse<WorkerCustomFieldsResource> getCustomFieldsWithHttpInfo(String workerId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(workerId, asof, null);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(String workerId, String asof, final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(workerId, asof, _callback);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private final String workerId;
        private String asof;

        private GetCustomFieldsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set asof
         * @param asof Returns all custom fields as of the date used in the request (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom fields successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(workerId, asof, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return WorkerCustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom fields successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public WorkerCustomFieldsResource execute() throws ApiException {
            ApiResponse<WorkerCustomFieldsResource> localVarResp = getCustomFieldsWithHttpInfo(workerId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;WorkerCustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom fields successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerCustomFieldsResource> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(workerId, asof);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom fields successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {
            return getCustomFieldsAsync(workerId, asof, _callback);
        }
    }

    /**
     * Worker Custom Fields
     * Get the worker&#39;s customFields
     * @param workerId ID associated with desired worker. (required)
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Custom fields successfully returned </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetCustomFieldsRequestBuilder(workerId);
    }
    private okhttp3.Call getDirectDepositCall(String workerId, String directDepositId, String effectivitydate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/directdeposits/{directDepositId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "directDepositId" + "}", localVarApiClient.escapeString(directDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectivitydate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivitydate", effectivitydate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposit.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectDepositValidateBeforeCall(String workerId, String directDepositId, String effectivitydate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getDirectDeposit(Async)");
        }

        // verify the required parameter 'directDepositId' is set
        if (directDepositId == null) {
            throw new ApiException("Missing the required parameter 'directDepositId' when calling getDirectDeposit(Async)");
        }

        return getDirectDepositCall(workerId, directDepositId, effectivitydate, _callback);

    }


    private ApiResponse<DirectDepositResource> getDirectDepositWithHttpInfo(String workerId, String directDepositId, String effectivitydate) throws ApiException {
        okhttp3.Call localVarCall = getDirectDepositValidateBeforeCall(workerId, directDepositId, effectivitydate, null);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDirectDepositAsync(String workerId, String directDepositId, String effectivitydate, final ApiCallback<DirectDepositResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectDepositValidateBeforeCall(workerId, directDepositId, effectivitydate, _callback);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDirectDepositRequestBuilder {
        private final String workerId;
        private final String directDepositId;
        private String effectivitydate;

        private GetDirectDepositRequestBuilder(String workerId, String directDepositId) {
            this.workerId = workerId;
            this.directDepositId = directDepositId;
        }

        /**
         * Set effectivitydate
         * @param effectivitydate The effectivity date. (optional)
         * @return GetDirectDepositRequestBuilder
         */
        public GetDirectDepositRequestBuilder effectivitydate(String effectivitydate) {
            this.effectivitydate = effectivitydate;
            return this;
        }
        
        /**
         * Build call for getDirectDeposit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDirectDepositCall(workerId, directDepositId, effectivitydate, _callback);
        }


        /**
         * Execute getDirectDeposit request
         * @return DirectDepositResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DirectDepositResource execute() throws ApiException {
            ApiResponse<DirectDepositResource> localVarResp = getDirectDepositWithHttpInfo(workerId, directDepositId, effectivitydate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDirectDeposit request with HTTP info returned
         * @return ApiResponse&lt;DirectDepositResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DirectDepositResource> executeWithHttpInfo() throws ApiException {
            return getDirectDepositWithHttpInfo(workerId, directDepositId, effectivitydate);
        }

        /**
         * Execute getDirectDeposit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DirectDepositResource> _callback) throws ApiException {
            return getDirectDepositAsync(workerId, directDepositId, effectivitydate, _callback);
        }
    }

    /**
     * Worker Direct Deposit
     * Single direct deposit for an \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param directDepositId The id assigned to the direct deposit for this worker. (required)
     * @return GetDirectDepositRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDirectDepositRequestBuilder getDirectDeposit(String workerId, String directDepositId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (directDepositId == null) throw new IllegalArgumentException("\"directDepositId\" is required but got null");
            

        return new GetDirectDepositRequestBuilder(workerId, directDepositId);
    }
    private okhttp3.Call getFederalTaxSetupCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/federaltax"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.paychex.worker.federaltax2020.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFederalTaxSetupValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getFederalTaxSetup(Async)");
        }

        return getFederalTaxSetupCall(workerId, _callback);

    }


    private ApiResponse<WorkerFederalTaxResource> getFederalTaxSetupWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getFederalTaxSetupValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<WorkerFederalTaxResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFederalTaxSetupAsync(String workerId, final ApiCallback<WorkerFederalTaxResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFederalTaxSetupValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<WorkerFederalTaxResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFederalTaxSetupRequestBuilder {
        private final String workerId;

        private GetFederalTaxSetupRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getFederalTaxSetup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFederalTaxSetupCall(workerId, _callback);
        }


        /**
         * Execute getFederalTaxSetup request
         * @return WorkerFederalTaxResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public WorkerFederalTaxResource execute() throws ApiException {
            ApiResponse<WorkerFederalTaxResource> localVarResp = getFederalTaxSetupWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFederalTaxSetup request with HTTP info returned
         * @return ApiResponse&lt;WorkerFederalTaxResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerFederalTaxResource> executeWithHttpInfo() throws ApiException {
            return getFederalTaxSetupWithHttpInfo(workerId);
        }

        /**
         * Execute getFederalTaxSetup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerFederalTaxResource> _callback) throws ApiException {
            return getFederalTaxSetupAsync(workerId, _callback);
        }
    }

    /**
     * Worker Federal Tax
     * Federal tax setup for \&quot;Active\&quot; or \&quot;In-progress\&quot;  worker.
     * @param workerId ID associated with desired worker. (required)
     * @return GetFederalTaxSetupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
     </table>
     */
    public GetFederalTaxSetupRequestBuilder getFederalTaxSetup(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetFederalTaxSetupRequestBuilder(workerId);
    }
    private okhttp3.Call getInformationCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.v1+json",
            "application/vnd.paychex.worker_communications.v1+json",
            "application/vnd.paychex.worker.nonpii.v1+json",
            "application/vnd.paychex.worker.nonpii_communications.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getInformation(Async)");
        }

        return getInformationCall(workerId, _callback);

    }


    private ApiResponse<WorkerResource1> getInformationWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<WorkerResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String workerId, final ApiCallback<WorkerResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<WorkerResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final String workerId;

        private GetInformationRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(workerId, _callback);
        }


        /**
         * Execute getInformation request
         * @return WorkerResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerResource1 execute() throws ApiException {
            ApiResponse<WorkerResource1> localVarResp = getInformationWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;WorkerResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerResource1> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(workerId);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerResource1> _callback) throws ApiException {
            return getInformationAsync(workerId, _callback);
        }
    }

    /**
     * Worker
     * Information about a unique worker (employee and contractor) that your application has been granted access to. Currently workers that exist within Paychex Flex payroll will be available, future enhancements will make workers from other Paychex systems available.
     * @param workerId ID associated with desired worker. (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetInformationRequestBuilder(workerId);
    }
    private okhttp3.Call getPayComponentCall(String workerId, String workerComponentId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/paycomponents/{workerComponentId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "workerComponentId" + "}", localVarApiClient.escapeString(workerComponentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponent.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayComponentValidateBeforeCall(String workerId, String workerComponentId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayComponent(Async)");
        }

        // verify the required parameter 'workerComponentId' is set
        if (workerComponentId == null) {
            throw new ApiException("Missing the required parameter 'workerComponentId' when calling getPayComponent(Async)");
        }

        return getPayComponentCall(workerId, workerComponentId, asof, _callback);

    }


    private ApiResponse<RecurringResource> getPayComponentWithHttpInfo(String workerId, String workerComponentId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getPayComponentValidateBeforeCall(workerId, workerComponentId, asof, null);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayComponentAsync(String workerId, String workerComponentId, String asof, final ApiCallback<RecurringResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayComponentValidateBeforeCall(workerId, workerComponentId, asof, _callback);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayComponentRequestBuilder {
        private final String workerId;
        private final String workerComponentId;
        private String asof;

        private GetPayComponentRequestBuilder(String workerId, String workerComponentId) {
            this.workerId = workerId;
            this.workerComponentId = workerComponentId;
        }

        /**
         * Set asof
         * @param asof Returns pay component as of the date used in the request (optional)
         * @return GetPayComponentRequestBuilder
         */
        public GetPayComponentRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getPayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayComponentCall(workerId, workerComponentId, asof, _callback);
        }


        /**
         * Execute getPayComponent request
         * @return RecurringResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public RecurringResource execute() throws ApiException {
            ApiResponse<RecurringResource> localVarResp = getPayComponentWithHttpInfo(workerId, workerComponentId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayComponent request with HTTP info returned
         * @return ApiResponse&lt;RecurringResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringResource> executeWithHttpInfo() throws ApiException {
            return getPayComponentWithHttpInfo(workerId, workerComponentId, asof);
        }

        /**
         * Execute getPayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringResource> _callback) throws ApiException {
            return getPayComponentAsync(workerId, workerComponentId, asof, _callback);
        }
    }

    /**
     * Worker Pay Component
     * Retrieve a specific pay component that a \&quot;Active\&quot; worker has.
     * @param workerId ID associated with desired worker. (required)
     * @param workerComponentId The id of a single pay component that a  \&quot;Active\&quot; worker has. (required)
     * @return GetPayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetPayComponentRequestBuilder getPayComponent(String workerId, String workerComponentId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (workerComponentId == null) throw new IllegalArgumentException("\"workerComponentId\" is required but got null");
            

        return new GetPayComponentRequestBuilder(workerId, workerComponentId);
    }
    private okhttp3.Call getPayComponentsCall(String workerId, String effectonpay, String asof, String name, String componentid, String classificationtype, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/paycomponents"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectonpay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectonpay", effectonpay));
        }

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (componentid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("componentid", componentid));
        }

        if (classificationtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationtype", classificationtype));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponents.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayComponentsValidateBeforeCall(String workerId, String effectonpay, String asof, String name, String componentid, String classificationtype, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayComponents(Async)");
        }

        return getPayComponentsCall(workerId, effectonpay, asof, name, componentid, classificationtype, _callback);

    }


    private ApiResponse<RecurringResource> getPayComponentsWithHttpInfo(String workerId, String effectonpay, String asof, String name, String componentid, String classificationtype) throws ApiException {
        okhttp3.Call localVarCall = getPayComponentsValidateBeforeCall(workerId, effectonpay, asof, name, componentid, classificationtype, null);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayComponentsAsync(String workerId, String effectonpay, String asof, String name, String componentid, String classificationtype, final ApiCallback<RecurringResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayComponentsValidateBeforeCall(workerId, effectonpay, asof, name, componentid, classificationtype, _callback);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayComponentsRequestBuilder {
        private final String workerId;
        private String effectonpay;
        private String asof;
        private String name;
        private String componentid;
        private String classificationtype;

        private GetPayComponentsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set effectonpay
         * @param effectonpay What the effect on pay will be (REDUCTION OR ADDITION), currently only reductions are available. (optional)
         * @return GetPayComponentsRequestBuilder
         */
        public GetPayComponentsRequestBuilder effectonpay(String effectonpay) {
            this.effectonpay = effectonpay;
            return this;
        }
        
        /**
         * Set asof
         * @param asof Returns all pay components as of the date used in the request (optional)
         * @return GetPayComponentsRequestBuilder
         */
        public GetPayComponentsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of a pay component that a workers has. (optional)
         * @return GetPayComponentsRequestBuilder
         */
        public GetPayComponentsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set componentid
         * @param componentid The unique identifier of the pay component. (optional)
         * @return GetPayComponentsRequestBuilder
         */
        public GetPayComponentsRequestBuilder componentid(String componentid) {
            this.componentid = componentid;
            return this;
        }
        
        /**
         * Set classificationtype
         * @param classificationtype The classification type of a pay component that a worker has. (such as \&quot;DEDUCTION\&quot;, or \&quot;REGULAR\&quot;,) (optional)
         * @return GetPayComponentsRequestBuilder
         */
        public GetPayComponentsRequestBuilder classificationtype(String classificationtype) {
            this.classificationtype = classificationtype;
            return this;
        }
        
        /**
         * Build call for getPayComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayComponentsCall(workerId, effectonpay, asof, name, componentid, classificationtype, _callback);
        }


        /**
         * Execute getPayComponents request
         * @return RecurringResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public RecurringResource execute() throws ApiException {
            ApiResponse<RecurringResource> localVarResp = getPayComponentsWithHttpInfo(workerId, effectonpay, asof, name, componentid, classificationtype);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayComponents request with HTTP info returned
         * @return ApiResponse&lt;RecurringResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringResource> executeWithHttpInfo() throws ApiException {
            return getPayComponentsWithHttpInfo(workerId, effectonpay, asof, name, componentid, classificationtype);
        }

        /**
         * Execute getPayComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringResource> _callback) throws ApiException {
            return getPayComponentsAsync(workerId, effectonpay, asof, name, componentid, classificationtype, _callback);
        }
    }

    /**
     * Worker Pay Components
     * Get all the the pay components for a specific \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @return GetPayComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetPayComponentsRequestBuilder getPayComponents(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetPayComponentsRequestBuilder(workerId);
    }
    private okhttp3.Call getPayRateCall(String workerId, String rateId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation/payrates/{rateId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "rateId" + "}", localVarApiClient.escapeString(rateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.payrate.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayRateValidateBeforeCall(String workerId, String rateId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayRate(Async)");
        }

        // verify the required parameter 'rateId' is set
        if (rateId == null) {
            throw new ApiException("Missing the required parameter 'rateId' when calling getPayRate(Async)");
        }

        return getPayRateCall(workerId, rateId, asof, _callback);

    }


    private ApiResponse<PayRateResource> getPayRateWithHttpInfo(String workerId, String rateId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getPayRateValidateBeforeCall(workerId, rateId, asof, null);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayRateAsync(String workerId, String rateId, String asof, final ApiCallback<PayRateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayRateValidateBeforeCall(workerId, rateId, asof, _callback);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayRateRequestBuilder {
        private final String workerId;
        private final String rateId;
        private String asof;

        private GetPayRateRequestBuilder(String workerId, String rateId) {
            this.workerId = workerId;
            this.rateId = rateId;
        }

        /**
         * Set asof
         * @param asof Returns compensation as of the date used in the request (optional)
         * @return GetPayRateRequestBuilder
         */
        public GetPayRateRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getPayRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayRateCall(workerId, rateId, asof, _callback);
        }


        /**
         * Execute getPayRate request
         * @return PayRateResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayRateResource execute() throws ApiException {
            ApiResponse<PayRateResource> localVarResp = getPayRateWithHttpInfo(workerId, rateId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayRate request with HTTP info returned
         * @return ApiResponse&lt;PayRateResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayRateResource> executeWithHttpInfo() throws ApiException {
            return getPayRateWithHttpInfo(workerId, rateId, asof);
        }

        /**
         * Execute getPayRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayRateResource> _callback) throws ApiException {
            return getPayRateAsync(workerId, rateId, asof, _callback);
        }
    }

    /**
     * Worker Pay Rate
     * A workers single compensation rate.
     * @param workerId ID associated with desired worker. (required)
     * @param rateId The id of a single workers compensation rate. (required)
     * @return GetPayRateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetPayRateRequestBuilder getPayRate(String workerId, String rateId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (rateId == null) throw new IllegalArgumentException("\"rateId\" is required but got null");
            

        return new GetPayRateRequestBuilder(workerId, rateId);
    }
    private okhttp3.Call getPayRatesByWorkerIdCall(String workerId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation/payrates"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.payrates.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayRatesByWorkerIdValidateBeforeCall(String workerId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayRatesByWorkerId(Async)");
        }

        return getPayRatesByWorkerIdCall(workerId, asof, _callback);

    }


    private ApiResponse<PayRateResource> getPayRatesByWorkerIdWithHttpInfo(String workerId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getPayRatesByWorkerIdValidateBeforeCall(workerId, asof, null);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayRatesByWorkerIdAsync(String workerId, String asof, final ApiCallback<PayRateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayRatesByWorkerIdValidateBeforeCall(workerId, asof, _callback);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayRatesByWorkerIdRequestBuilder {
        private final String workerId;
        private String asof;

        private GetPayRatesByWorkerIdRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set asof
         * @param asof Returns all pay rates as of the date used in the request (optional)
         * @return GetPayRatesByWorkerIdRequestBuilder
         */
        public GetPayRatesByWorkerIdRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getPayRatesByWorkerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayRatesByWorkerIdCall(workerId, asof, _callback);
        }


        /**
         * Execute getPayRatesByWorkerId request
         * @return PayRateResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayRateResource execute() throws ApiException {
            ApiResponse<PayRateResource> localVarResp = getPayRatesByWorkerIdWithHttpInfo(workerId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayRatesByWorkerId request with HTTP info returned
         * @return ApiResponse&lt;PayRateResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayRateResource> executeWithHttpInfo() throws ApiException {
            return getPayRatesByWorkerIdWithHttpInfo(workerId, asof);
        }

        /**
         * Execute getPayRatesByWorkerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayRateResource> _callback) throws ApiException {
            return getPayRatesByWorkerIdAsync(workerId, asof, _callback);
        }
    }

    /**
     * Worker Pay Rates
     * Information about a workers compensation rates. Rate one is only one available if the worker is In-Progress. The multiple rates is available for workers that have been completed within Flex. It’s not required for a worker to have a rate in the system.
     * @param workerId ID associated with desired worker. (required)
     * @return GetPayRatesByWorkerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetPayRatesByWorkerIdRequestBuilder getPayRatesByWorkerId(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetPayRatesByWorkerIdRequestBuilder(workerId);
    }
    private okhttp3.Call getPayStandardsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation/paystandards"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.paystandards.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayStandardsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getPayStandards(Async)");
        }

        return getPayStandardsCall(workerId, _callback);

    }


    private ApiResponse<PayStandardResource> getPayStandardsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getPayStandardsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<PayStandardResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayStandardsAsync(String workerId, final ApiCallback<PayStandardResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayStandardsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<PayStandardResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayStandardsRequestBuilder {
        private final String workerId;

        private GetPayStandardsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getPayStandards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayStandardsCall(workerId, _callback);
        }


        /**
         * Execute getPayStandards request
         * @return PayStandardResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayStandardResource execute() throws ApiException {
            ApiResponse<PayStandardResource> localVarResp = getPayStandardsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayStandards request with HTTP info returned
         * @return ApiResponse&lt;PayStandardResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayStandardResource> executeWithHttpInfo() throws ApiException {
            return getPayStandardsWithHttpInfo(workerId);
        }

        /**
         * Execute getPayStandards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayStandardResource> _callback) throws ApiException {
            return getPayStandardsAsync(workerId, _callback);
        }
    }

    /**
     * Worker Pay Standards
     * Information about a workers compensation pay standards.
     * @param workerId ID associated with desired worker. (required)
     * @return GetPayStandardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetPayStandardsRequestBuilder getPayStandards(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetPayStandardsRequestBuilder(workerId);
    }
    private okhttp3.Call getTimeOffBalanceCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/timeoff"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.timeoff.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffBalanceValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getTimeOffBalance(Async)");
        }

        return getTimeOffBalanceCall(workerId, _callback);

    }


    private ApiResponse<TimeOffResource> getTimeOffBalanceWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffBalanceValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<TimeOffResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffBalanceAsync(String workerId, final ApiCallback<TimeOffResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffBalanceValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<TimeOffResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffBalanceRequestBuilder {
        private final String workerId;

        private GetTimeOffBalanceRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getTimeOffBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffBalanceCall(workerId, _callback);
        }


        /**
         * Execute getTimeOffBalance request
         * @return TimeOffResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffResource execute() throws ApiException {
            ApiResponse<TimeOffResource> localVarResp = getTimeOffBalanceWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffBalance request with HTTP info returned
         * @return ApiResponse&lt;TimeOffResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffResource> executeWithHttpInfo() throws ApiException {
            return getTimeOffBalanceWithHttpInfo(workerId);
        }

        /**
         * Execute getTimeOffBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffResource> _callback) throws ApiException {
            return getTimeOffBalanceAsync(workerId, _callback);
        }
    }

    /**
     * Worker Time Off
     * Array of time off balance(s) a worker has for each policy type of time off, for that worker. NOTE: This data is only available if the client has the Time Off Accrual product (This is not related to the Flex Time product which has it is own dev portal for those APIs).
     * @param workerId The ID of the worker. (required)
     * @return GetTimeOffBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffBalanceRequestBuilder getTimeOffBalance(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetTimeOffBalanceRequestBuilder(workerId);
    }
    private okhttp3.Call getWorkerStatusListCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/status"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.workerstatuses.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerStatusListValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getWorkerStatusList(Async)");
        }

        return getWorkerStatusListCall(workerId, _callback);

    }


    private ApiResponse<Status1> getWorkerStatusListWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = getWorkerStatusListValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<Status1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkerStatusListAsync(String workerId, final ApiCallback<Status1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerStatusListValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<Status1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkerStatusListRequestBuilder {
        private final String workerId;

        private GetWorkerStatusListRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for getWorkerStatusList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkerStatusListCall(workerId, _callback);
        }


        /**
         * Execute getWorkerStatusList request
         * @return Status1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Status1 execute() throws ApiException {
            ApiResponse<Status1> localVarResp = getWorkerStatusListWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkerStatusList request with HTTP info returned
         * @return ApiResponse&lt;Status1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Status1> executeWithHttpInfo() throws ApiException {
            return getWorkerStatusListWithHttpInfo(workerId);
        }

        /**
         * Execute getWorkerStatusList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Status1> _callback) throws ApiException {
            return getWorkerStatusListAsync(workerId, _callback);
        }
    }

    /**
     * Worker Statuses
     * Retrieve the full list of worker statuses (past, present, and future). For each status the workerStatusId is the value of the corresponding company worker status ID. If no company worker status with a matching type/reason exists then workerStatusId is omitted. If multiple statuses share an effective date the order field will indicate the order in which they were posted.
     * @param workerId ID associated with desired worker. (required)
     * @return GetWorkerStatusListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkerStatusListRequestBuilder getWorkerStatusList(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new GetWorkerStatusListRequestBuilder(workerId);
    }
    private okhttp3.Call listAssignmentDistributionsCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/assignmentdistributions"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.assignmentdistributions.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignmentDistributionsValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling listAssignmentDistributions(Async)");
        }

        return listAssignmentDistributionsCall(workerId, _callback);

    }


    private ApiResponse<WorkerAssignmentDistributionsResource> listAssignmentDistributionsWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = listAssignmentDistributionsValidateBeforeCall(workerId, null);
        Type localVarReturnType = new TypeToken<WorkerAssignmentDistributionsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignmentDistributionsAsync(String workerId, final ApiCallback<WorkerAssignmentDistributionsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignmentDistributionsValidateBeforeCall(workerId, _callback);
        Type localVarReturnType = new TypeToken<WorkerAssignmentDistributionsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignmentDistributionsRequestBuilder {
        private final String workerId;

        private ListAssignmentDistributionsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for listAssignmentDistributions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignmentDistributionsCall(workerId, _callback);
        }


        /**
         * Execute listAssignmentDistributions request
         * @return WorkerAssignmentDistributionsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerAssignmentDistributionsResource execute() throws ApiException {
            ApiResponse<WorkerAssignmentDistributionsResource> localVarResp = listAssignmentDistributionsWithHttpInfo(workerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignmentDistributions request with HTTP info returned
         * @return ApiResponse&lt;WorkerAssignmentDistributionsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerAssignmentDistributionsResource> executeWithHttpInfo() throws ApiException {
            return listAssignmentDistributionsWithHttpInfo(workerId);
        }

        /**
         * Execute listAssignmentDistributions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerAssignmentDistributionsResource> _callback) throws ApiException {
            return listAssignmentDistributionsAsync(workerId, _callback);
        }
    }

    /**
     * Worker Assignments
     * Array of assignments that will be used for auto distribution assigned to the worker.
     * @param workerId The ID of the worker. (required)
     * @return ListAssignmentDistributionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignmentDistributionsRequestBuilder listAssignmentDistributions(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new ListAssignmentDistributionsRequestBuilder(workerId);
    }
    private okhttp3.Call listDirectDepositsCall(String workerId, String effectivitydate, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/directdeposits"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectivitydate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivitydate", effectivitydate));
        }

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposits.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDirectDepositsValidateBeforeCall(String workerId, String effectivitydate, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling listDirectDeposits(Async)");
        }

        return listDirectDepositsCall(workerId, effectivitydate, asof, _callback);

    }


    private ApiResponse<DirectDepositResource> listDirectDepositsWithHttpInfo(String workerId, String effectivitydate, String asof) throws ApiException {
        okhttp3.Call localVarCall = listDirectDepositsValidateBeforeCall(workerId, effectivitydate, asof, null);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDirectDepositsAsync(String workerId, String effectivitydate, String asof, final ApiCallback<DirectDepositResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDirectDepositsValidateBeforeCall(workerId, effectivitydate, asof, _callback);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDirectDepositsRequestBuilder {
        private final String workerId;
        private String effectivitydate;
        private String asof;

        private ListDirectDepositsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set effectivitydate
         * @param effectivitydate The effectivity date (optional)
         * @return ListDirectDepositsRequestBuilder
         */
        public ListDirectDepositsRequestBuilder effectivitydate(String effectivitydate) {
            this.effectivitydate = effectivitydate;
            return this;
        }
        
        /**
         * Set asof
         * @param asof Returns all direct deposits as of the date used in the request (optional)
         * @return ListDirectDepositsRequestBuilder
         */
        public ListDirectDepositsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for listDirectDeposits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDirectDepositsCall(workerId, effectivitydate, asof, _callback);
        }


        /**
         * Execute listDirectDeposits request
         * @return DirectDepositResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DirectDepositResource execute() throws ApiException {
            ApiResponse<DirectDepositResource> localVarResp = listDirectDepositsWithHttpInfo(workerId, effectivitydate, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDirectDeposits request with HTTP info returned
         * @return ApiResponse&lt;DirectDepositResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DirectDepositResource> executeWithHttpInfo() throws ApiException {
            return listDirectDepositsWithHttpInfo(workerId, effectivitydate, asof);
        }

        /**
         * Execute listDirectDeposits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DirectDepositResource> _callback) throws ApiException {
            return listDirectDepositsAsync(workerId, effectivitydate, asof, _callback);
        }
    }

    /**
     * Worker Direct Deposits
     * Array of direct deposits on the \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @return ListDirectDepositsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListDirectDepositsRequestBuilder listDirectDeposits(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new ListDirectDepositsRequestBuilder(workerId);
    }
    private okhttp3.Call removeCommunicationCall(String workerId, String communicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/communications/{communicationId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "communicationId" + "}", localVarApiClient.escapeString(communicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.communications.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCommunicationValidateBeforeCall(String workerId, String communicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling removeCommunication(Async)");
        }

        // verify the required parameter 'communicationId' is set
        if (communicationId == null) {
            throw new ApiException("Missing the required parameter 'communicationId' when calling removeCommunication(Async)");
        }

        return removeCommunicationCall(workerId, communicationId, _callback);

    }


    private ApiResponse<CommunicationResource1> removeCommunicationWithHttpInfo(String workerId, String communicationId) throws ApiException {
        okhttp3.Call localVarCall = removeCommunicationValidateBeforeCall(workerId, communicationId, null);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeCommunicationAsync(String workerId, String communicationId, final ApiCallback<CommunicationResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCommunicationValidateBeforeCall(workerId, communicationId, _callback);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveCommunicationRequestBuilder {
        private final String workerId;
        private final String communicationId;

        private RemoveCommunicationRequestBuilder(String workerId, String communicationId) {
            this.workerId = workerId;
            this.communicationId = communicationId;
        }

        /**
         * Build call for removeCommunication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCommunicationCall(workerId, communicationId, _callback);
        }


        /**
         * Execute removeCommunication request
         * @return CommunicationResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CommunicationResource1 execute() throws ApiException {
            ApiResponse<CommunicationResource1> localVarResp = removeCommunicationWithHttpInfo(workerId, communicationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeCommunication request with HTTP info returned
         * @return ApiResponse&lt;CommunicationResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommunicationResource1> executeWithHttpInfo() throws ApiException {
            return removeCommunicationWithHttpInfo(workerId, communicationId);
        }

        /**
         * Execute removeCommunication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommunicationResource1> _callback) throws ApiException {
            return removeCommunicationAsync(workerId, communicationId, _callback);
        }
    }

    /**
     * Worker Communication
     * Remove a communication item from a \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     * @param workerId The id assigned to the worker that workers are being requested for. (required)
     * @param communicationId The id of a single workers communication. (required)
     * @return RemoveCommunicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCommunicationRequestBuilder removeCommunication(String workerId, String communicationId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (communicationId == null) throw new IllegalArgumentException("\"communicationId\" is required but got null");
            

        return new RemoveCommunicationRequestBuilder(workerId, communicationId);
    }
    private okhttp3.Call removeDirectDepositCall(String workerId, String directDepositId, String effectivitydate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/directdeposits/{directDepositId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "directDepositId" + "}", localVarApiClient.escapeString(directDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectivitydate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivitydate", effectivitydate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDirectDepositValidateBeforeCall(String workerId, String directDepositId, String effectivitydate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling removeDirectDeposit(Async)");
        }

        // verify the required parameter 'directDepositId' is set
        if (directDepositId == null) {
            throw new ApiException("Missing the required parameter 'directDepositId' when calling removeDirectDeposit(Async)");
        }

        return removeDirectDepositCall(workerId, directDepositId, effectivitydate, _callback);

    }


    private ApiResponse<Void> removeDirectDepositWithHttpInfo(String workerId, String directDepositId, String effectivitydate) throws ApiException {
        okhttp3.Call localVarCall = removeDirectDepositValidateBeforeCall(workerId, directDepositId, effectivitydate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeDirectDepositAsync(String workerId, String directDepositId, String effectivitydate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDirectDepositValidateBeforeCall(workerId, directDepositId, effectivitydate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveDirectDepositRequestBuilder {
        private final String workerId;
        private final String directDepositId;
        private String effectivitydate;

        private RemoveDirectDepositRequestBuilder(String workerId, String directDepositId) {
            this.workerId = workerId;
            this.directDepositId = directDepositId;
        }

        /**
         * Set effectivitydate
         * @param effectivitydate The effectivity date. (optional)
         * @return RemoveDirectDepositRequestBuilder
         */
        public RemoveDirectDepositRequestBuilder effectivitydate(String effectivitydate) {
            this.effectivitydate = effectivitydate;
            return this;
        }
        
        /**
         * Build call for removeDirectDeposit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Direct Deposit successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDirectDepositCall(workerId, directDepositId, effectivitydate, _callback);
        }


        /**
         * Execute removeDirectDeposit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Direct Deposit successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeDirectDepositWithHttpInfo(workerId, directDepositId, effectivitydate);
        }

        /**
         * Execute removeDirectDeposit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Direct Deposit successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeDirectDepositWithHttpInfo(workerId, directDepositId, effectivitydate);
        }

        /**
         * Execute removeDirectDeposit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Direct Deposit successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeDirectDepositAsync(workerId, directDepositId, effectivitydate, _callback);
        }
    }

    /**
     * Worker Direct Deposit
     * Remove a single direct deposit for a \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param directDepositId The id assigned to the direct deposit for this worker. (required)
     * @return RemoveDirectDepositRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Direct Deposit successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDirectDepositRequestBuilder removeDirectDeposit(String workerId, String directDepositId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (directDepositId == null) throw new IllegalArgumentException("\"directDepositId\" is required but got null");
            

        return new RemoveDirectDepositRequestBuilder(workerId, directDepositId);
    }
    private okhttp3.Call removeFederalTaxCall(String workerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/federaltax"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFederalTaxValidateBeforeCall(String workerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling removeFederalTax(Async)");
        }

        return removeFederalTaxCall(workerId, _callback);

    }


    private ApiResponse<Void> removeFederalTaxWithHttpInfo(String workerId) throws ApiException {
        okhttp3.Call localVarCall = removeFederalTaxValidateBeforeCall(workerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFederalTaxAsync(String workerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFederalTaxValidateBeforeCall(workerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFederalTaxRequestBuilder {
        private final String workerId;

        private RemoveFederalTaxRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Build call for removeFederalTax
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Worker Federal Tax successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFederalTaxCall(workerId, _callback);
        }


        /**
         * Execute removeFederalTax request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Worker Federal Tax successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFederalTaxWithHttpInfo(workerId);
        }

        /**
         * Execute removeFederalTax request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Worker Federal Tax successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFederalTaxWithHttpInfo(workerId);
        }

        /**
         * Execute removeFederalTax request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Worker Federal Tax successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFederalTaxAsync(workerId, _callback);
        }
    }

    /**
     * Worker Federal Tax
     * Remove the federal tax setup for an \&quot;In-progress\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @return RemoveFederalTaxRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Worker Federal Tax successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFederalTaxRequestBuilder removeFederalTax(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new RemoveFederalTaxRequestBuilder(workerId);
    }
    private okhttp3.Call removePayComponentCall(String workerId, String workerComponentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/paycomponents/{workerComponentId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "workerComponentId" + "}", localVarApiClient.escapeString(workerComponentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePayComponentValidateBeforeCall(String workerId, String workerComponentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling removePayComponent(Async)");
        }

        // verify the required parameter 'workerComponentId' is set
        if (workerComponentId == null) {
            throw new ApiException("Missing the required parameter 'workerComponentId' when calling removePayComponent(Async)");
        }

        return removePayComponentCall(workerId, workerComponentId, _callback);

    }


    private ApiResponse<Void> removePayComponentWithHttpInfo(String workerId, String workerComponentId) throws ApiException {
        okhttp3.Call localVarCall = removePayComponentValidateBeforeCall(workerId, workerComponentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePayComponentAsync(String workerId, String workerComponentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePayComponentValidateBeforeCall(workerId, workerComponentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePayComponentRequestBuilder {
        private final String workerId;
        private final String workerComponentId;

        private RemovePayComponentRequestBuilder(String workerId, String workerComponentId) {
            this.workerId = workerId;
            this.workerComponentId = workerComponentId;
        }

        /**
         * Build call for removePayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePayComponentCall(workerId, workerComponentId, _callback);
        }


        /**
         * Execute removePayComponent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePayComponentWithHttpInfo(workerId, workerComponentId);
        }

        /**
         * Execute removePayComponent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePayComponentWithHttpInfo(workerId, workerComponentId);
        }

        /**
         * Execute removePayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePayComponentAsync(workerId, workerComponentId, _callback);
        }
    }

    /**
     * Worker Pay Component
     * Remove a specific pay component that a \&quot;Active\&quot; worker has.
     * @param workerId ID associated with desired worker. (required)
     * @param workerComponentId The id of a single pay component that a workers has. (required)
     * @return RemovePayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemovePayComponentRequestBuilder removePayComponent(String workerId, String workerComponentId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (workerComponentId == null) throw new IllegalArgumentException("\"workerComponentId\" is required but got null");
            

        return new RemovePayComponentRequestBuilder(workerId, workerComponentId);
    }
    private okhttp3.Call removePayRateCall(String workerId, String rateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation/payrates/{rateId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "rateId" + "}", localVarApiClient.escapeString(rateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePayRateValidateBeforeCall(String workerId, String rateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling removePayRate(Async)");
        }

        // verify the required parameter 'rateId' is set
        if (rateId == null) {
            throw new ApiException("Missing the required parameter 'rateId' when calling removePayRate(Async)");
        }

        return removePayRateCall(workerId, rateId, _callback);

    }


    private ApiResponse<Void> removePayRateWithHttpInfo(String workerId, String rateId) throws ApiException {
        okhttp3.Call localVarCall = removePayRateValidateBeforeCall(workerId, rateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePayRateAsync(String workerId, String rateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePayRateValidateBeforeCall(workerId, rateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePayRateRequestBuilder {
        private final String workerId;
        private final String rateId;

        private RemovePayRateRequestBuilder(String workerId, String rateId) {
            this.workerId = workerId;
            this.rateId = rateId;
        }

        /**
         * Build call for removePayRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePayRateCall(workerId, rateId, _callback);
        }


        /**
         * Execute removePayRate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePayRateWithHttpInfo(workerId, rateId);
        }

        /**
         * Execute removePayRate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePayRateWithHttpInfo(workerId, rateId);
        }

        /**
         * Execute removePayRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePayRateAsync(workerId, rateId, _callback);
        }
    }

    /**
     * Worker Pay Rate
     * Remove a compensation rate from a worker.
     * @param workerId ID associated with desired worker. (required)
     * @param rateId The id of a single workers compensation rate. (required)
     * @return RemovePayRateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public RemovePayRateRequestBuilder removePayRate(String workerId, String rateId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (rateId == null) throw new IllegalArgumentException("\"rateId\" is required but got null");
            

        return new RemovePayRateRequestBuilder(workerId, rateId);
    }
    private okhttp3.Call updateCommunicationItemCall(String workerId, String communicationId, CommunicationResource1 communicationResource1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = communicationResource1;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/communications/{communicationId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "communicationId" + "}", localVarApiClient.escapeString(communicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.communication.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.communication.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommunicationItemValidateBeforeCall(String workerId, String communicationId, CommunicationResource1 communicationResource1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateCommunicationItem(Async)");
        }

        // verify the required parameter 'communicationId' is set
        if (communicationId == null) {
            throw new ApiException("Missing the required parameter 'communicationId' when calling updateCommunicationItem(Async)");
        }

        // verify the required parameter 'communicationResource1' is set
        if (communicationResource1 == null) {
            throw new ApiException("Missing the required parameter 'communicationResource1' when calling updateCommunicationItem(Async)");
        }

        return updateCommunicationItemCall(workerId, communicationId, communicationResource1, _callback);

    }


    private ApiResponse<CommunicationResource1> updateCommunicationItemWithHttpInfo(String workerId, String communicationId, CommunicationResource1 communicationResource1) throws ApiException {
        okhttp3.Call localVarCall = updateCommunicationItemValidateBeforeCall(workerId, communicationId, communicationResource1, null);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCommunicationItemAsync(String workerId, String communicationId, CommunicationResource1 communicationResource1, final ApiCallback<CommunicationResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommunicationItemValidateBeforeCall(workerId, communicationId, communicationResource1, _callback);
        Type localVarReturnType = new TypeToken<CommunicationResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCommunicationItemRequestBuilder {
        private final String workerId;
        private final String communicationId;
        private String communicationId;
        private String type;
        private String usageType;
        private String dialCountry;
        private String dialArea;
        private String dialNumber;
        private String dialExtension;
        private String uri;
        private String streetLineOne;
        private String streetLineTwo;
        private String postOfficeBox;
        private String city;
        private String postalCode;
        private String postalCodeExtension;
        private String countrySubdivisionCode;
        private String countryCode;
        private List<Link> links;

        private UpdateCommunicationItemRequestBuilder(String workerId, String communicationId) {
            this.workerId = workerId;
            this.communicationId = communicationId;
        }

        /**
         * Set communicationId
         * @param communicationId The ID for the workers specific communication item. (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder communicationId(String communicationId) {
            this.communicationId = communicationId;
            return this;
        }
        
        /**
         * Set type
         * @param type A set of communication types classifying an instruction that the customer, requester, or subject must comply with in order for the screening to go forward. NOTE: PHONE and EMAIL type supports BUSINESS and PERSONAL usage type only.MOBILE_PHONE, FAX and PAGER supports BUSINESS usage type only.This data field cannot be PATCHED. (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set usageType
         * @param usageType A code classifying a designated use associated with a contact method. For example, whether a telephone or email address is one for business communications or one primarily for personal use.This data field cannot be PATCHED. (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder usageType(String usageType) {
            this.usageType = usageType;
            return this;
        }
        
        /**
         * Set dialCountry
         * @param dialCountry The country dialing code for a communication number (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder dialCountry(String dialCountry) {
            this.dialCountry = dialCountry;
            return this;
        }
        
        /**
         * Set dialArea
         * @param dialArea The area dialing code for a communication number (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder dialArea(String dialArea) {
            this.dialArea = dialArea;
            return this;
        }
        
        /**
         * Set dialNumber
         * @param dialNumber The communication number, not including country dialing or area dialing codes (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder dialNumber(String dialNumber) {
            this.dialNumber = dialNumber;
            return this;
        }
        
        /**
         * Set dialExtension
         * @param dialExtension The extension of the associated communication number (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder dialExtension(String dialExtension) {
            this.dialExtension = dialExtension;
            return this;
        }
        
        /**
         * Set uri
         * @param uri The mailto address as specified in RFC2368 (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder uri(String uri) {
            this.uri = uri;
            return this;
        }
        
        /**
         * Set streetLineOne
         * @param streetLineOne The street address line one (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder streetLineOne(String streetLineOne) {
            this.streetLineOne = streetLineOne;
            return this;
        }
        
        /**
         * Set streetLineTwo
         * @param streetLineTwo The street address line two (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder streetLineTwo(String streetLineTwo) {
            this.streetLineTwo = streetLineTwo;
            return this;
        }
        
        /**
         * Set postOfficeBox
         * @param postOfficeBox The postal office box. This data field cannot be PATCHED (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder postOfficeBox(String postOfficeBox) {
            this.postOfficeBox = postOfficeBox;
            return this;
        }
        
        /**
         * Set city
         * @param city The city name (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode The zip-code (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set postalCodeExtension
         * @param postalCodeExtension The zip-code extension (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder postalCodeExtension(String postalCodeExtension) {
            this.postalCodeExtension = postalCodeExtension;
            return this;
        }
        
        /**
         * Set countrySubdivisionCode
         * @param countrySubdivisionCode The state code (ISO 3166 subdivision code). This data field cannot be PATCHED for ACTIVE worker (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder countrySubdivisionCode(String countrySubdivisionCode) {
            this.countrySubdivisionCode = countrySubdivisionCode;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode The country code (ISO 3166 alpha-2) (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateCommunicationItemRequestBuilder
         */
        public UpdateCommunicationItemRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updateCommunicationItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            return updateCommunicationItemCall(workerId, communicationId, communicationResource1, _callback);
        }

        private CommunicationResource1 buildBodyParams() {
            CommunicationResource1 communicationResource1 = new CommunicationResource1();
            communicationResource1.communicationId(this.communicationId);
            if (this.type != null)
            communicationResource1.type(CommunicationResource1.TypeEnum.fromValue(this.type));
            if (this.usageType != null)
            communicationResource1.usageType(CommunicationResource1.UsageTypeEnum.fromValue(this.usageType));
            communicationResource1.dialCountry(this.dialCountry);
            communicationResource1.dialArea(this.dialArea);
            communicationResource1.dialNumber(this.dialNumber);
            communicationResource1.dialExtension(this.dialExtension);
            communicationResource1.uri(this.uri);
            communicationResource1.streetLineOne(this.streetLineOne);
            communicationResource1.streetLineTwo(this.streetLineTwo);
            communicationResource1.postOfficeBox(this.postOfficeBox);
            communicationResource1.city(this.city);
            communicationResource1.postalCode(this.postalCode);
            communicationResource1.postalCodeExtension(this.postalCodeExtension);
            communicationResource1.countrySubdivisionCode(this.countrySubdivisionCode);
            communicationResource1.countryCode(this.countryCode);
            communicationResource1.links(this.links);
            return communicationResource1;
        }

        /**
         * Execute updateCommunicationItem request
         * @return CommunicationResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CommunicationResource1 execute() throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            ApiResponse<CommunicationResource1> localVarResp = updateCommunicationItemWithHttpInfo(workerId, communicationId, communicationResource1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCommunicationItem request with HTTP info returned
         * @return ApiResponse&lt;CommunicationResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommunicationResource1> executeWithHttpInfo() throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            return updateCommunicationItemWithHttpInfo(workerId, communicationId, communicationResource1);
        }

        /**
         * Execute updateCommunicationItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommunicationResource1> _callback) throws ApiException {
            CommunicationResource1 communicationResource1 = buildBodyParams();
            return updateCommunicationItemAsync(workerId, communicationId, communicationResource1, _callback);
        }
    }

    /**
     * Worker Communication
     * Update a \&quot;Active\&quot; or \&quot;In-progress\&quot; workers specific communication item.
     * @param workerId The id assigned to the worker that workers are being requested for. (required)
     * @param communicationId The id of a single workers communication. (required)
     * @param communicationResource1  (required)
     * @return UpdateCommunicationItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCommunicationItemRequestBuilder updateCommunicationItem(String workerId, String communicationId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (communicationId == null) throw new IllegalArgumentException("\"communicationId\" is required but got null");
            

        return new UpdateCommunicationItemRequestBuilder(workerId, communicationId);
    }
    private okhttp3.Call updateCompensationRateCall(String workerId, String rateId, PayRateResource payRateResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payRateResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/compensation/payrates/{rateId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "rateId" + "}", localVarApiClient.escapeString(rateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.payrate.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.compensation.payrate.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompensationRateValidateBeforeCall(String workerId, String rateId, PayRateResource payRateResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateCompensationRate(Async)");
        }

        // verify the required parameter 'rateId' is set
        if (rateId == null) {
            throw new ApiException("Missing the required parameter 'rateId' when calling updateCompensationRate(Async)");
        }

        // verify the required parameter 'payRateResource' is set
        if (payRateResource == null) {
            throw new ApiException("Missing the required parameter 'payRateResource' when calling updateCompensationRate(Async)");
        }

        return updateCompensationRateCall(workerId, rateId, payRateResource, _callback);

    }


    private ApiResponse<PayRateResource> updateCompensationRateWithHttpInfo(String workerId, String rateId, PayRateResource payRateResource) throws ApiException {
        okhttp3.Call localVarCall = updateCompensationRateValidateBeforeCall(workerId, rateId, payRateResource, null);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompensationRateAsync(String workerId, String rateId, PayRateResource payRateResource, final ApiCallback<PayRateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompensationRateValidateBeforeCall(workerId, rateId, payRateResource, _callback);
        Type localVarReturnType = new TypeToken<PayRateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompensationRateRequestBuilder {
        private final String workerId;
        private final String rateId;
        private String description;
        private String rateId;
        private OffsetDateTime startDate;
        private String rateNumber;
        private String rateType;
        private String amount;
        private String standardHours;
        private String standardOvertime;
        private Boolean _default;
        private String effectiveDate;
        private List<Link> links;

        private UpdateCompensationRateRequestBuilder(String workerId, String rateId) {
            this.workerId = workerId;
            this.rateId = rateId;
        }

        /**
         * Set description
         * @param description Describes the rate for the worker. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set rateId
         * @param rateId Unique identifier for this workers pay rate. **This ID will change if this is created for an IN_PROGRESS worker that is later completed within Flex** (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder rateId(String rateId) {
            this.rateId = rateId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date when the pay rate is going to begin. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set rateNumber
         * @param rateNumber The number of the rate. A worker can have up to 5 different rates. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder rateNumber(String rateNumber) {
            this.rateNumber = rateNumber;
            return this;
        }
        
        /**
         * Set rateType
         * @param rateType Type of rate. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder rateType(String rateType) {
            this.rateType = rateType;
            return this;
        }
        
        /**
         * Set amount
         * @param amount The currency amount which this rate is applied. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder amount(String amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set standardHours
         * @param standardHours Default standard hours that this rate is used with a pay frequency. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder standardHours(String standardHours) {
            this.standardHours = standardHours;
            return this;
        }
        
        /**
         * Set standardOvertime
         * @param standardOvertime Default over time hours that this rate is used with a pay frequency. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder standardOvertime(String standardOvertime) {
            this.standardOvertime = standardOvertime;
            return this;
        }
        
        /**
         * Set _default
         * @param _default If this rate is the default one to apply on the worker. (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date when the pay rate becomes effective for the worker.(can be used only in POST/PATCH for an active worker) (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder effectiveDate(String effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateCompensationRateRequestBuilder
         */
        public UpdateCompensationRateRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updateCompensationRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            return updateCompensationRateCall(workerId, rateId, payRateResource, _callback);
        }

        private PayRateResource buildBodyParams() {
            PayRateResource payRateResource = new PayRateResource();
            payRateResource.description(this.description);
            payRateResource.rateId(this.rateId);
            payRateResource.startDate(this.startDate);
            payRateResource.rateNumber(this.rateNumber);
            if (this.rateType != null)
            payRateResource.rateType(PayRateResource.RateTypeEnum.fromValue(this.rateType));
            payRateResource.amount(this.amount);
            payRateResource.standardHours(this.standardHours);
            payRateResource.standardOvertime(this.standardOvertime);
            payRateResource._default(this._default);
            payRateResource.effectiveDate(this.effectiveDate);
            payRateResource.links(this.links);
            return payRateResource;
        }

        /**
         * Execute updateCompensationRate request
         * @return PayRateResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayRateResource execute() throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            ApiResponse<PayRateResource> localVarResp = updateCompensationRateWithHttpInfo(workerId, rateId, payRateResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompensationRate request with HTTP info returned
         * @return ApiResponse&lt;PayRateResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayRateResource> executeWithHttpInfo() throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            return updateCompensationRateWithHttpInfo(workerId, rateId, payRateResource);
        }

        /**
         * Execute updateCompensationRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayRateResource> _callback) throws ApiException {
            PayRateResource payRateResource = buildBodyParams();
            return updateCompensationRateAsync(workerId, rateId, payRateResource, _callback);
        }
    }

    /**
     * Worker Pay Rate
     * Update a workers specific compensation rate.
     * @param workerId ID associated with desired worker. (required)
     * @param rateId The id of a single workers compensation rate. (required)
     * @param payRateResource  (required)
     * @return UpdateCompensationRateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompensationRateRequestBuilder updateCompensationRate(String workerId, String rateId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (rateId == null) throw new IllegalArgumentException("\"rateId\" is required but got null");
            

        return new UpdateCompensationRateRequestBuilder(workerId, rateId);
    }
    private okhttp3.Call updateContactCall(String workerId, String contactId, WorkerContactResource workerContactResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerContactResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/contacts/{contactId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.contacts.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.contacts.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactValidateBeforeCall(String workerId, String contactId, WorkerContactResource workerContactResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateContact(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling updateContact(Async)");
        }

        // verify the required parameter 'workerContactResource' is set
        if (workerContactResource == null) {
            throw new ApiException("Missing the required parameter 'workerContactResource' when calling updateContact(Async)");
        }

        return updateContactCall(workerId, contactId, workerContactResource, _callback);

    }


    private ApiResponse<WorkerContactResource> updateContactWithHttpInfo(String workerId, String contactId, WorkerContactResource workerContactResource) throws ApiException {
        okhttp3.Call localVarCall = updateContactValidateBeforeCall(workerId, contactId, workerContactResource, null);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContactAsync(String workerId, String contactId, WorkerContactResource workerContactResource, final ApiCallback<WorkerContactResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactValidateBeforeCall(workerId, contactId, workerContactResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerContactResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContactRequestBuilder {
        private final String workerId;
        private final String contactId;
        private String contactId;
        private ContactTypeResource1 contactType;
        private RelationshipResource relationship;

        private UpdateContactRequestBuilder(String workerId, String contactId) {
            this.workerId = workerId;
            this.contactId = contactId;
        }

        /**
         * Set contactId
         * @param contactId The ID for the workers specific contact. (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder contactId(String contactId) {
            this.contactId = contactId;
            return this;
        }
        
        /**
         * Set contactType
         * @param contactType  (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder contactType(ContactTypeResource1 contactType) {
            this.contactType = contactType;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship  (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder relationship(RelationshipResource relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Build call for updateContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            return updateContactCall(workerId, contactId, workerContactResource, _callback);
        }

        private WorkerContactResource buildBodyParams() {
            WorkerContactResource workerContactResource = new WorkerContactResource();
            workerContactResource.contactId(this.contactId);
            workerContactResource.contactType(this.contactType);
            workerContactResource.relationship(this.relationship);
            return workerContactResource;
        }

        /**
         * Execute updateContact request
         * @return WorkerContactResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerContactResource execute() throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            ApiResponse<WorkerContactResource> localVarResp = updateContactWithHttpInfo(workerId, contactId, workerContactResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContact request with HTTP info returned
         * @return ApiResponse&lt;WorkerContactResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerContactResource> executeWithHttpInfo() throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            return updateContactWithHttpInfo(workerId, contactId, workerContactResource);
        }

        /**
         * Execute updateContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerContactResource> _callback) throws ApiException {
            WorkerContactResource workerContactResource = buildBodyParams();
            return updateContactAsync(workerId, contactId, workerContactResource, _callback);
        }
    }

    /**
     * Worker Contacts
     * Update a worker contact. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. When a new contact is made primary the previous primary contact will be marked as not primary. A postal contact can be switched from a street address to a PO box and vice versa. This is done by setting either streetLineOne or postOfficeBox (a postal communication may not have both). Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
     * @param workerId ID associated with desired worker. (required)
     * @param contactId ID associated with desired worker contact. (required)
     * @param workerContactResource  (required)
     * @return UpdateContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContactRequestBuilder updateContact(String workerId, String contactId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new UpdateContactRequestBuilder(workerId, contactId);
    }
    private okhttp3.Call updateCustomFieldCall(String workerId, String workerCustomFieldId, WorkerCustomFieldsResource workerCustomFieldsResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerCustomFieldsResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/customfields/{workerCustomFieldId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "workerCustomFieldId" + "}", localVarApiClient.escapeString(workerCustomFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.customfield.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.customfield.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValidateBeforeCall(String workerId, String workerCustomFieldId, WorkerCustomFieldsResource workerCustomFieldsResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'workerCustomFieldId' is set
        if (workerCustomFieldId == null) {
            throw new ApiException("Missing the required parameter 'workerCustomFieldId' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'workerCustomFieldsResource' is set
        if (workerCustomFieldsResource == null) {
            throw new ApiException("Missing the required parameter 'workerCustomFieldsResource' when calling updateCustomField(Async)");
        }

        return updateCustomFieldCall(workerId, workerCustomFieldId, workerCustomFieldsResource, _callback);

    }


    private ApiResponse<WorkerCustomFieldsResource> updateCustomFieldWithHttpInfo(String workerId, String workerCustomFieldId, WorkerCustomFieldsResource workerCustomFieldsResource) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(workerId, workerCustomFieldId, workerCustomFieldsResource, null);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldAsync(String workerId, String workerCustomFieldId, WorkerCustomFieldsResource workerCustomFieldsResource, final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(workerId, workerCustomFieldId, workerCustomFieldsResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerCustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldRequestBuilder {
        private final String workerId;
        private final String workerCustomFieldId;
        private String workerCustomFieldId;
        private String customFieldId;
        private String type;
        private Boolean booleanValue;
        private String textValue;
        private Double numericValue;
        private OffsetDateTime dateValue;
        private String dropdownId;
        private String dropdownValue;
        private String customFieldName;
        private Boolean required;
        private Boolean checkStub;
        private Boolean employeeEditable;

        private UpdateCustomFieldRequestBuilder(String workerId, String workerCustomFieldId) {
            this.workerId = workerId;
            this.workerCustomFieldId = workerCustomFieldId;
        }

        /**
         * Set workerCustomFieldId
         * @param workerCustomFieldId The unique identifier that is autogenerated when a custom field is created (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder workerCustomFieldId(String workerCustomFieldId) {
            this.workerCustomFieldId = workerCustomFieldId;
            return this;
        }
        
        /**
         * Set customFieldId
         * @param customFieldId client Custom Field Id (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder customFieldId(String customFieldId) {
            this.customFieldId = customFieldId;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of field the custom field is (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set booleanValue
         * @param booleanValue The value for BOOLEAN type (true/false) (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder booleanValue(Boolean booleanValue) {
            this.booleanValue = booleanValue;
            return this;
        }
        
        /**
         * Set textValue
         * @param textValue The value for TEXT type (any text, alphanumeric, special characters allowed) (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder textValue(String textValue) {
            this.textValue = textValue;
            return this;
        }
        
        /**
         * Set numericValue
         * @param numericValue Numeric data type can have three formats namely - whole number, second decimal place and fourth decimal place, example: 12 , 12.34 or 12.3456 (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder numericValue(Double numericValue) {
            this.numericValue = numericValue;
            return this;
        }
        
        /**
         * Set dateValue
         * @param dateValue The value for DATE type , example : 2012-02-01T05:00:00Z (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder dateValue(OffsetDateTime dateValue) {
            this.dateValue = dateValue;
            return this;
        }
        
        /**
         * Set dropdownId
         * @param dropdownId The unique identifier that is autogenerated when dropdown list is created (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder dropdownId(String dropdownId) {
            this.dropdownId = dropdownId;
            return this;
        }
        
        /**
         * Set dropdownValue
         * @param dropdownValue The value for dropdown list (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder dropdownValue(String dropdownValue) {
            this.dropdownValue = dropdownValue;
            return this;
        }
        
        /**
         * Set customFieldName
         * @param customFieldName The name of the custom field. Such as: \\\&quot;Hobbies\\\&quot; (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder customFieldName(String customFieldName) {
            this.customFieldName = customFieldName;
            return this;
        }
        
        /**
         * Set required
         * @param required Where to indicate if the custom field is required on the worker where true &#x3D; required and false &#x3D; not required (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set checkStub
         * @param checkStub Where to indicate if the custom field is required on the workers pay stub, where true &#x3D; required and false &#x3D; not required. (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder checkStub(Boolean checkStub) {
            this.checkStub = checkStub;
            return this;
        }
        
        /**
         * Set employeeEditable
         * @param employeeEditable Where to indicate if the custom field is able to be edited by the employee, where true &#x3D; required and false &#x3D; not required. (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder employeeEditable(Boolean employeeEditable) {
            this.employeeEditable = employeeEditable;
            return this;
        }
        
        /**
         * Build call for updateCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            return updateCustomFieldCall(workerId, workerCustomFieldId, workerCustomFieldsResource, _callback);
        }

        private WorkerCustomFieldsResource buildBodyParams() {
            WorkerCustomFieldsResource workerCustomFieldsResource = new WorkerCustomFieldsResource();
            workerCustomFieldsResource.workerCustomFieldId(this.workerCustomFieldId);
            workerCustomFieldsResource.customFieldId(this.customFieldId);
            if (this.type != null)
            workerCustomFieldsResource.type(WorkerCustomFieldsResource.TypeEnum.fromValue(this.type));
            workerCustomFieldsResource.booleanValue(this.booleanValue);
            workerCustomFieldsResource.textValue(this.textValue);
            workerCustomFieldsResource.numericValue(this.numericValue);
            workerCustomFieldsResource.dateValue(this.dateValue);
            workerCustomFieldsResource.dropdownId(this.dropdownId);
            workerCustomFieldsResource.dropdownValue(this.dropdownValue);
            workerCustomFieldsResource.customFieldName(this.customFieldName);
            workerCustomFieldsResource.required(this.required);
            workerCustomFieldsResource.checkStub(this.checkStub);
            workerCustomFieldsResource.employeeEditable(this.employeeEditable);
            return workerCustomFieldsResource;
        }

        /**
         * Execute updateCustomField request
         * @return WorkerCustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public WorkerCustomFieldsResource execute() throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            ApiResponse<WorkerCustomFieldsResource> localVarResp = updateCustomFieldWithHttpInfo(workerId, workerCustomFieldId, workerCustomFieldsResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomField request with HTTP info returned
         * @return ApiResponse&lt;WorkerCustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerCustomFieldsResource> executeWithHttpInfo() throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            return updateCustomFieldWithHttpInfo(workerId, workerCustomFieldId, workerCustomFieldsResource);
        }

        /**
         * Execute updateCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Custom field successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerCustomFieldsResource> _callback) throws ApiException {
            WorkerCustomFieldsResource workerCustomFieldsResource = buildBodyParams();
            return updateCustomFieldAsync(workerId, workerCustomFieldId, workerCustomFieldsResource, _callback);
        }
    }

    /**
     * Worker CustomField
     * Update CustomField at the worker level
     * @param workerId ID associated with desired worker. (required)
     * @param workerCustomFieldId ID associated with desired worker custom field. (required)
     * @param workerCustomFieldsResource  (required)
     * @return UpdateCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Custom field successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldRequestBuilder updateCustomField(String workerId, String workerCustomFieldId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (workerCustomFieldId == null) throw new IllegalArgumentException("\"workerCustomFieldId\" is required but got null");
            

        return new UpdateCustomFieldRequestBuilder(workerId, workerCustomFieldId);
    }
    private okhttp3.Call updateDirectDepositCall(String workerId, String directDepositId, DirectDepositResource directDepositResource, String effectivitydate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directDepositResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/directdeposits/{directDepositId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "directDepositId" + "}", localVarApiClient.escapeString(directDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectivitydate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivitydate", effectivitydate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposit.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposit.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDirectDepositValidateBeforeCall(String workerId, String directDepositId, DirectDepositResource directDepositResource, String effectivitydate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateDirectDeposit(Async)");
        }

        // verify the required parameter 'directDepositId' is set
        if (directDepositId == null) {
            throw new ApiException("Missing the required parameter 'directDepositId' when calling updateDirectDeposit(Async)");
        }

        // verify the required parameter 'directDepositResource' is set
        if (directDepositResource == null) {
            throw new ApiException("Missing the required parameter 'directDepositResource' when calling updateDirectDeposit(Async)");
        }

        return updateDirectDepositCall(workerId, directDepositId, directDepositResource, effectivitydate, _callback);

    }


    private ApiResponse<DirectDepositResource> updateDirectDepositWithHttpInfo(String workerId, String directDepositId, DirectDepositResource directDepositResource, String effectivitydate) throws ApiException {
        okhttp3.Call localVarCall = updateDirectDepositValidateBeforeCall(workerId, directDepositId, directDepositResource, effectivitydate, null);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDirectDepositAsync(String workerId, String directDepositId, DirectDepositResource directDepositResource, String effectivitydate, final ApiCallback<DirectDepositResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDirectDepositValidateBeforeCall(workerId, directDepositId, directDepositResource, effectivitydate, _callback);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDirectDepositRequestBuilder {
        private final String workerId;
        private final String directDepositId;
        private String directDepositId;
        private OffsetDateTime startDate;
        private String paymentType;
        private String accountType;
        private Double value;
        private String routingNumber;
        private String accountNumber;
        private String priority;
        private List<Link> links;
        private String effectivitydate;

        private UpdateDirectDepositRequestBuilder(String workerId, String directDepositId) {
            this.workerId = workerId;
            this.directDepositId = directDepositId;
        }

        /**
         * Set directDepositId
         * @param directDepositId The ID for the direct deposit item. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder directDepositId(String directDepositId) {
            this.directDepositId = directDepositId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date that this direct deposit will be applied to future pay periods. This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set paymentType
         * @param paymentType A type of payment for the direct deposit. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder paymentType(String paymentType) {
            this.paymentType = paymentType;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Financial institutions account type. This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set value
         * @param value The amount to be applied to this direct deposit. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set routingNumber
         * @param routingNumber The financial institutions routing number.This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The financial institutions account number.This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set priority
         * @param priority The priority order for which the direct deposits will be performed in. When a new direct deposit is added the priority will be assigned. The priority can be modified only by swapping with a different direct deposit using the bulk PATCH. A paymentType of REMAINDER will show a priority of 99 and can&#39;t be modified.This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder priority(String priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set effectivitydate
         * @param effectivitydate The effectivity date. (optional)
         * @return UpdateDirectDepositRequestBuilder
         */
        public UpdateDirectDepositRequestBuilder effectivitydate(String effectivitydate) {
            this.effectivitydate = effectivitydate;
            return this;
        }
        
        /**
         * Build call for updateDirectDeposit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return updateDirectDepositCall(workerId, directDepositId, directDepositResource, effectivitydate, _callback);
        }

        private DirectDepositResource buildBodyParams() {
            DirectDepositResource directDepositResource = new DirectDepositResource();
            directDepositResource.directDepositId(this.directDepositId);
            directDepositResource.startDate(this.startDate);
            if (this.paymentType != null)
            directDepositResource.paymentType(DirectDepositResource.PaymentTypeEnum.fromValue(this.paymentType));
            if (this.accountType != null)
            directDepositResource.accountType(DirectDepositResource.AccountTypeEnum.fromValue(this.accountType));
            directDepositResource.value(this.value);
            directDepositResource.routingNumber(this.routingNumber);
            directDepositResource.accountNumber(this.accountNumber);
            directDepositResource.priority(this.priority);
            directDepositResource.links(this.links);
            return directDepositResource;
        }

        /**
         * Execute updateDirectDeposit request
         * @return DirectDepositResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DirectDepositResource execute() throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            ApiResponse<DirectDepositResource> localVarResp = updateDirectDepositWithHttpInfo(workerId, directDepositId, directDepositResource, effectivitydate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDirectDeposit request with HTTP info returned
         * @return ApiResponse&lt;DirectDepositResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DirectDepositResource> executeWithHttpInfo() throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return updateDirectDepositWithHttpInfo(workerId, directDepositId, directDepositResource, effectivitydate);
        }

        /**
         * Execute updateDirectDeposit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DirectDepositResource> _callback) throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return updateDirectDepositAsync(workerId, directDepositId, directDepositResource, effectivitydate, _callback);
        }
    }

    /**
     * Worker Direct Deposit
     * Update a single direct deposit for a an \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param directDepositId The id assigned to the direct deposit for this worker. (required)
     * @param directDepositResource  (required)
     * @return UpdateDirectDepositRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDirectDepositRequestBuilder updateDirectDeposit(String workerId, String directDepositId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (directDepositId == null) throw new IllegalArgumentException("\"directDepositId\" is required but got null");
            

        return new UpdateDirectDepositRequestBuilder(workerId, directDepositId);
    }
    private okhttp3.Call updateDirectDepositsCall(String workerId, DirectDepositResource directDepositResource, String effectivitydate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directDepositResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/directdeposits"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectivitydate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectivitydate", effectivitydate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposits.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.directdeposits.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDirectDepositsValidateBeforeCall(String workerId, DirectDepositResource directDepositResource, String effectivitydate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateDirectDeposits(Async)");
        }

        // verify the required parameter 'directDepositResource' is set
        if (directDepositResource == null) {
            throw new ApiException("Missing the required parameter 'directDepositResource' when calling updateDirectDeposits(Async)");
        }

        return updateDirectDepositsCall(workerId, directDepositResource, effectivitydate, _callback);

    }


    private ApiResponse<DirectDepositResource> updateDirectDepositsWithHttpInfo(String workerId, DirectDepositResource directDepositResource, String effectivitydate) throws ApiException {
        okhttp3.Call localVarCall = updateDirectDepositsValidateBeforeCall(workerId, directDepositResource, effectivitydate, null);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDirectDepositsAsync(String workerId, DirectDepositResource directDepositResource, String effectivitydate, final ApiCallback<DirectDepositResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDirectDepositsValidateBeforeCall(workerId, directDepositResource, effectivitydate, _callback);
        Type localVarReturnType = new TypeToken<DirectDepositResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDirectDepositsRequestBuilder {
        private final String workerId;
        private String directDepositId;
        private OffsetDateTime startDate;
        private String paymentType;
        private String accountType;
        private Double value;
        private String routingNumber;
        private String accountNumber;
        private String priority;
        private List<Link> links;
        private String effectivitydate;

        private UpdateDirectDepositsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set directDepositId
         * @param directDepositId The ID for the direct deposit item. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder directDepositId(String directDepositId) {
            this.directDepositId = directDepositId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date that this direct deposit will be applied to future pay periods. This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set paymentType
         * @param paymentType A type of payment for the direct deposit. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder paymentType(String paymentType) {
            this.paymentType = paymentType;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Financial institutions account type. This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set value
         * @param value The amount to be applied to this direct deposit. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set routingNumber
         * @param routingNumber The financial institutions routing number.This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The financial institutions account number.This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set priority
         * @param priority The priority order for which the direct deposits will be performed in. When a new direct deposit is added the priority will be assigned. The priority can be modified only by swapping with a different direct deposit using the bulk PATCH. A paymentType of REMAINDER will show a priority of 99 and can&#39;t be modified.This data field cannot be PATCHED. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder priority(String priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set effectivitydate
         * @param effectivitydate The effectivity date. (optional)
         * @return UpdateDirectDepositsRequestBuilder
         */
        public UpdateDirectDepositsRequestBuilder effectivitydate(String effectivitydate) {
            this.effectivitydate = effectivitydate;
            return this;
        }
        
        /**
         * Build call for updateDirectDeposits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This is successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return updateDirectDepositsCall(workerId, directDepositResource, effectivitydate, _callback);
        }

        private DirectDepositResource buildBodyParams() {
            DirectDepositResource directDepositResource = new DirectDepositResource();
            directDepositResource.directDepositId(this.directDepositId);
            directDepositResource.startDate(this.startDate);
            if (this.paymentType != null)
            directDepositResource.paymentType(DirectDepositResource.PaymentTypeEnum.fromValue(this.paymentType));
            if (this.accountType != null)
            directDepositResource.accountType(DirectDepositResource.AccountTypeEnum.fromValue(this.accountType));
            directDepositResource.value(this.value);
            directDepositResource.routingNumber(this.routingNumber);
            directDepositResource.accountNumber(this.accountNumber);
            directDepositResource.priority(this.priority);
            directDepositResource.links(this.links);
            return directDepositResource;
        }

        /**
         * Execute updateDirectDeposits request
         * @return DirectDepositResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This is successful </td><td>  -  </td></tr>
         </table>
         */
        public DirectDepositResource execute() throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            ApiResponse<DirectDepositResource> localVarResp = updateDirectDepositsWithHttpInfo(workerId, directDepositResource, effectivitydate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDirectDeposits request with HTTP info returned
         * @return ApiResponse&lt;DirectDepositResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This is successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DirectDepositResource> executeWithHttpInfo() throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return updateDirectDepositsWithHttpInfo(workerId, directDepositResource, effectivitydate);
        }

        /**
         * Execute updateDirectDeposits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This is successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DirectDepositResource> _callback) throws ApiException {
            DirectDepositResource directDepositResource = buildBodyParams();
            return updateDirectDepositsAsync(workerId, directDepositResource, effectivitydate, _callback);
        }
    }

    /**
     * Worker Direct Deposits
     * Update multiple direct deposits of an \&quot;Active\&quot; Worker at a time.
     * @param workerId ID associated with desired worker. (required)
     * @param directDepositResource  (required)
     * @return UpdateDirectDepositsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is successful </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDirectDepositsRequestBuilder updateDirectDeposits(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateDirectDepositsRequestBuilder(workerId);
    }
    private okhttp3.Call updateFederalTaxSetupCall(String workerId, WorkerFederalTaxResource workerFederalTaxResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerFederalTaxResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/federaltax"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.paychex.worker.federaltax2020.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.federaltax2020.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFederalTaxSetupValidateBeforeCall(String workerId, WorkerFederalTaxResource workerFederalTaxResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateFederalTaxSetup(Async)");
        }

        // verify the required parameter 'workerFederalTaxResource' is set
        if (workerFederalTaxResource == null) {
            throw new ApiException("Missing the required parameter 'workerFederalTaxResource' when calling updateFederalTaxSetup(Async)");
        }

        return updateFederalTaxSetupCall(workerId, workerFederalTaxResource, _callback);

    }


    private ApiResponse<WorkerFederalTaxResource> updateFederalTaxSetupWithHttpInfo(String workerId, WorkerFederalTaxResource workerFederalTaxResource) throws ApiException {
        okhttp3.Call localVarCall = updateFederalTaxSetupValidateBeforeCall(workerId, workerFederalTaxResource, null);
        Type localVarReturnType = new TypeToken<WorkerFederalTaxResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFederalTaxSetupAsync(String workerId, WorkerFederalTaxResource workerFederalTaxResource, final ApiCallback<WorkerFederalTaxResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFederalTaxSetupValidateBeforeCall(workerId, workerFederalTaxResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerFederalTaxResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFederalTaxSetupRequestBuilder {
        private final String workerId;
        private String taxId;
        private String filingStatus;
        private String multipleJobs;
        private String dependentsAmount;
        private String otherIncome;
        private String deductionsAmount;
        private String extraWithholdingAmount;
        private String taxesWithheld;

        private UpdateFederalTaxSetupRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set taxId
         * @param taxId The ID for the federal tax item. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set filingStatus
         * @param filingStatus Filing status. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder filingStatus(String filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set multipleJobs
         * @param multipleJobs See federal W-4 instructions. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder multipleJobs(String multipleJobs) {
            this.multipleJobs = multipleJobs;
            return this;
        }
        
        /**
         * Set dependentsAmount
         * @param dependentsAmount See federal W-4 instructions. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder dependentsAmount(String dependentsAmount) {
            this.dependentsAmount = dependentsAmount;
            return this;
        }
        
        /**
         * Set otherIncome
         * @param otherIncome See federal W-4 instructions. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder otherIncome(String otherIncome) {
            this.otherIncome = otherIncome;
            return this;
        }
        
        /**
         * Set deductionsAmount
         * @param deductionsAmount See federal W-4 instructions. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder deductionsAmount(String deductionsAmount) {
            this.deductionsAmount = deductionsAmount;
            return this;
        }
        
        /**
         * Set extraWithholdingAmount
         * @param extraWithholdingAmount Additional tax you want withheld each pay period. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder extraWithholdingAmount(String extraWithholdingAmount) {
            this.extraWithholdingAmount = extraWithholdingAmount;
            return this;
        }
        
        /**
         * Set taxesWithheld
         * @param taxesWithheld Should federal taxes be withheld. (optional)
         * @return UpdateFederalTaxSetupRequestBuilder
         */
        public UpdateFederalTaxSetupRequestBuilder taxesWithheld(String taxesWithheld) {
            this.taxesWithheld = taxesWithheld;
            return this;
        }
        
        /**
         * Build call for updateFederalTaxSetup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            return updateFederalTaxSetupCall(workerId, workerFederalTaxResource, _callback);
        }

        private WorkerFederalTaxResource buildBodyParams() {
            WorkerFederalTaxResource workerFederalTaxResource = new WorkerFederalTaxResource();
            workerFederalTaxResource.taxId(this.taxId);
            if (this.filingStatus != null)
            workerFederalTaxResource.filingStatus(WorkerFederalTaxResource.FilingStatusEnum.fromValue(this.filingStatus));
            if (this.multipleJobs != null)
            workerFederalTaxResource.multipleJobs(WorkerFederalTaxResource.MultipleJobsEnum.fromValue(this.multipleJobs));
            workerFederalTaxResource.dependentsAmount(this.dependentsAmount);
            workerFederalTaxResource.otherIncome(this.otherIncome);
            workerFederalTaxResource.deductionsAmount(this.deductionsAmount);
            workerFederalTaxResource.extraWithholdingAmount(this.extraWithholdingAmount);
            if (this.taxesWithheld != null)
            workerFederalTaxResource.taxesWithheld(WorkerFederalTaxResource.TaxesWithheldEnum.fromValue(this.taxesWithheld));
            return workerFederalTaxResource;
        }

        /**
         * Execute updateFederalTaxSetup request
         * @return WorkerFederalTaxResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public WorkerFederalTaxResource execute() throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            ApiResponse<WorkerFederalTaxResource> localVarResp = updateFederalTaxSetupWithHttpInfo(workerId, workerFederalTaxResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFederalTaxSetup request with HTTP info returned
         * @return ApiResponse&lt;WorkerFederalTaxResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerFederalTaxResource> executeWithHttpInfo() throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            return updateFederalTaxSetupWithHttpInfo(workerId, workerFederalTaxResource);
        }

        /**
         * Execute updateFederalTaxSetup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerFederalTaxResource> _callback) throws ApiException {
            WorkerFederalTaxResource workerFederalTaxResource = buildBodyParams();
            return updateFederalTaxSetupAsync(workerId, workerFederalTaxResource, _callback);
        }
    }

    /**
     * Worker Federal Tax
     * Update the federal tax setup for a \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param workerFederalTaxResource  (required)
     * @return UpdateFederalTaxSetupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Federal Tax successfully returned </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFederalTaxSetupRequestBuilder updateFederalTaxSetup(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateFederalTaxSetupRequestBuilder(workerId);
    }
    private okhttp3.Call updatePayComponentCall(String workerId, String workerComponentId, RecurringResource recurringResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recurringResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/paycomponents/{workerComponentId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "workerComponentId" + "}", localVarApiClient.escapeString(workerComponentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponent.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponent.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayComponentValidateBeforeCall(String workerId, String workerComponentId, RecurringResource recurringResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updatePayComponent(Async)");
        }

        // verify the required parameter 'workerComponentId' is set
        if (workerComponentId == null) {
            throw new ApiException("Missing the required parameter 'workerComponentId' when calling updatePayComponent(Async)");
        }

        // verify the required parameter 'recurringResource' is set
        if (recurringResource == null) {
            throw new ApiException("Missing the required parameter 'recurringResource' when calling updatePayComponent(Async)");
        }

        return updatePayComponentCall(workerId, workerComponentId, recurringResource, _callback);

    }


    private ApiResponse<RecurringResource> updatePayComponentWithHttpInfo(String workerId, String workerComponentId, RecurringResource recurringResource) throws ApiException {
        okhttp3.Call localVarCall = updatePayComponentValidateBeforeCall(workerId, workerComponentId, recurringResource, null);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayComponentAsync(String workerId, String workerComponentId, RecurringResource recurringResource, final ApiCallback<RecurringResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayComponentValidateBeforeCall(workerId, workerComponentId, recurringResource, _callback);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayComponentRequestBuilder {
        private final String workerId;
        private final String workerComponentId;
        private String workerComponentId;
        private String componentId;
        private String name;
        private String calculationType;
        private String calculationBaseId;
        private Double value;
        private OffsetDateTime startDate;
        private OffsetDateTime effectiveDate;
        private OffsetDateTime endDate;
        private String effectOnPay;
        private String classificationType;
        private PayComponentFrequencyTypeResource1 frequency;
        private List<Link> links;

        private UpdatePayComponentRequestBuilder(String workerId, String workerComponentId) {
            this.workerId = workerId;
            this.workerComponentId = workerComponentId;
        }

        /**
         * Set workerComponentId
         * @param workerComponentId The id of a single pay component that a workers has. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder workerComponentId(String workerComponentId) {
            this.workerComponentId = workerComponentId;
            return this;
        }
        
        /**
         * Set componentId
         * @param componentId The unique identifier of the pay component. This data field cannot be PATCHED. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder componentId(String componentId) {
            this.componentId = componentId;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the pay component. This data field will be populated automatically based on componentId. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set calculationType
         * @param calculationType The type of calculation that will be applied for the pay component . (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder calculationType(String calculationType) {
            this.calculationType = calculationType;
            return this;
        }
        
        /**
         * Set calculationBaseId
         * @param calculationBaseId This is required if you are not using a FLAT_DOLLAR_AMOUNT Calculation Type. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder calculationBaseId(String calculationBaseId) {
            this.calculationBaseId = calculationBaseId;
            return this;
        }
        
        /**
         * Set value
         * @param value This is used to specify the value that is used against the calculationType. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date which this pay component will start to be applied during the payruns. This is an optional field that default to current datetime if not provided. This cannot be backdated but can be added to start in the future. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Date which this pay component has started for the worker. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder effectiveDate(OffsetDateTime effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date which this pay component has ended for the worker. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set effectOnPay
         * @param effectOnPay What the effect on pay will be (REDUCTION OR ADDITION), currently only reductions are available. This data field will be populated automatically based on componentId. This data field cannot be PATCHED (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder effectOnPay(String effectOnPay) {
            this.effectOnPay = effectOnPay;
            return this;
        }
        
        /**
         * Set classificationType
         * @param classificationType The category that this component falls into. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder classificationType(String classificationType) {
            this.classificationType = classificationType;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder frequency(PayComponentFrequencyTypeResource1 frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updatePayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return updatePayComponentCall(workerId, workerComponentId, recurringResource, _callback);
        }

        private RecurringResource buildBodyParams() {
            RecurringResource recurringResource = new RecurringResource();
            recurringResource.workerComponentId(this.workerComponentId);
            recurringResource.componentId(this.componentId);
            recurringResource.name(this.name);
            if (this.calculationType != null)
            recurringResource.calculationType(RecurringResource.CalculationTypeEnum.fromValue(this.calculationType));
            recurringResource.calculationBaseId(this.calculationBaseId);
            recurringResource.value(this.value);
            recurringResource.startDate(this.startDate);
            recurringResource.effectiveDate(this.effectiveDate);
            recurringResource.endDate(this.endDate);
            recurringResource.effectOnPay(this.effectOnPay);
            recurringResource.classificationType(this.classificationType);
            recurringResource.frequency(this.frequency);
            recurringResource.links(this.links);
            return recurringResource;
        }

        /**
         * Execute updatePayComponent request
         * @return RecurringResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public RecurringResource execute() throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            ApiResponse<RecurringResource> localVarResp = updatePayComponentWithHttpInfo(workerId, workerComponentId, recurringResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePayComponent request with HTTP info returned
         * @return ApiResponse&lt;RecurringResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringResource> executeWithHttpInfo() throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return updatePayComponentWithHttpInfo(workerId, workerComponentId, recurringResource);
        }

        /**
         * Execute updatePayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringResource> _callback) throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return updatePayComponentAsync(workerId, workerComponentId, recurringResource, _callback);
        }
    }

    /**
     * Worker Pay Component
     *  Update a single pay component associated to the \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param workerComponentId The id of a single pay component that a workers has. (required)
     * @param recurringResource  (required)
     * @return UpdatePayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayComponentRequestBuilder updatePayComponent(String workerId, String workerComponentId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (workerComponentId == null) throw new IllegalArgumentException("\"workerComponentId\" is required but got null");
            

        return new UpdatePayComponentRequestBuilder(workerId, workerComponentId);
    }
    private okhttp3.Call updatePayComponentsCall(String workerId, RecurringResource recurringResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recurringResource;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/paycomponents"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponents.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponents.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayComponentsValidateBeforeCall(String workerId, RecurringResource recurringResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updatePayComponents(Async)");
        }

        // verify the required parameter 'recurringResource' is set
        if (recurringResource == null) {
            throw new ApiException("Missing the required parameter 'recurringResource' when calling updatePayComponents(Async)");
        }

        return updatePayComponentsCall(workerId, recurringResource, _callback);

    }


    private ApiResponse<RecurringResource> updatePayComponentsWithHttpInfo(String workerId, RecurringResource recurringResource) throws ApiException {
        okhttp3.Call localVarCall = updatePayComponentsValidateBeforeCall(workerId, recurringResource, null);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayComponentsAsync(String workerId, RecurringResource recurringResource, final ApiCallback<RecurringResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayComponentsValidateBeforeCall(workerId, recurringResource, _callback);
        Type localVarReturnType = new TypeToken<RecurringResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayComponentsRequestBuilder {
        private final String workerId;
        private String workerComponentId;
        private String componentId;
        private String name;
        private String calculationType;
        private String calculationBaseId;
        private Double value;
        private OffsetDateTime startDate;
        private OffsetDateTime effectiveDate;
        private OffsetDateTime endDate;
        private String effectOnPay;
        private String classificationType;
        private PayComponentFrequencyTypeResource1 frequency;
        private List<Link> links;

        private UpdatePayComponentsRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set workerComponentId
         * @param workerComponentId The id of a single pay component that a workers has. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder workerComponentId(String workerComponentId) {
            this.workerComponentId = workerComponentId;
            return this;
        }
        
        /**
         * Set componentId
         * @param componentId The unique identifier of the pay component. This data field cannot be PATCHED. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder componentId(String componentId) {
            this.componentId = componentId;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the pay component. This data field will be populated automatically based on componentId. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set calculationType
         * @param calculationType The type of calculation that will be applied for the pay component . (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder calculationType(String calculationType) {
            this.calculationType = calculationType;
            return this;
        }
        
        /**
         * Set calculationBaseId
         * @param calculationBaseId This is required if you are not using a FLAT_DOLLAR_AMOUNT Calculation Type. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder calculationBaseId(String calculationBaseId) {
            this.calculationBaseId = calculationBaseId;
            return this;
        }
        
        /**
         * Set value
         * @param value This is used to specify the value that is used against the calculationType. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date which this pay component will start to be applied during the payruns. This is an optional field that default to current datetime if not provided. This cannot be backdated but can be added to start in the future. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Date which this pay component has started for the worker. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder effectiveDate(OffsetDateTime effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date which this pay component has ended for the worker. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set effectOnPay
         * @param effectOnPay What the effect on pay will be (REDUCTION OR ADDITION), currently only reductions are available. This data field will be populated automatically based on componentId. This data field cannot be PATCHED (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder effectOnPay(String effectOnPay) {
            this.effectOnPay = effectOnPay;
            return this;
        }
        
        /**
         * Set classificationType
         * @param classificationType The category that this component falls into. (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder classificationType(String classificationType) {
            this.classificationType = classificationType;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder frequency(PayComponentFrequencyTypeResource1 frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdatePayComponentsRequestBuilder
         */
        public UpdatePayComponentsRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updatePayComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return updatePayComponentsCall(workerId, recurringResource, _callback);
        }

        private RecurringResource buildBodyParams() {
            RecurringResource recurringResource = new RecurringResource();
            recurringResource.workerComponentId(this.workerComponentId);
            recurringResource.componentId(this.componentId);
            recurringResource.name(this.name);
            if (this.calculationType != null)
            recurringResource.calculationType(RecurringResource.CalculationTypeEnum.fromValue(this.calculationType));
            recurringResource.calculationBaseId(this.calculationBaseId);
            recurringResource.value(this.value);
            recurringResource.startDate(this.startDate);
            recurringResource.effectiveDate(this.effectiveDate);
            recurringResource.endDate(this.endDate);
            recurringResource.effectOnPay(this.effectOnPay);
            recurringResource.classificationType(this.classificationType);
            recurringResource.frequency(this.frequency);
            recurringResource.links(this.links);
            return recurringResource;
        }

        /**
         * Execute updatePayComponents request
         * @return RecurringResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public RecurringResource execute() throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            ApiResponse<RecurringResource> localVarResp = updatePayComponentsWithHttpInfo(workerId, recurringResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePayComponents request with HTTP info returned
         * @return ApiResponse&lt;RecurringResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringResource> executeWithHttpInfo() throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return updatePayComponentsWithHttpInfo(workerId, recurringResource);
        }

        /**
         * Execute updatePayComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringResource> _callback) throws ApiException {
            RecurringResource recurringResource = buildBodyParams();
            return updatePayComponentsAsync(workerId, recurringResource, _callback);
        }
    }

    /**
     * Worker Pay Components
     * Batch update pay components associated to the \&quot;Active\&quot; worker.
     * @param workerId ID associated with desired worker. (required)
     * @param recurringResource  (required)
     * @return UpdatePayComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayComponentsRequestBuilder updatePayComponents(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdatePayComponentsRequestBuilder(workerId);
    }
    private okhttp3.Call updateUniqueWorkerCall(String workerId, WorkerResource1 workerResource1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerResource1;

        // create path and map variables
        String localVarPath = "/workers/{workerId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.worker.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.worker.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUniqueWorkerValidateBeforeCall(String workerId, WorkerResource1 workerResource1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling updateUniqueWorker(Async)");
        }

        // verify the required parameter 'workerResource1' is set
        if (workerResource1 == null) {
            throw new ApiException("Missing the required parameter 'workerResource1' when calling updateUniqueWorker(Async)");
        }

        return updateUniqueWorkerCall(workerId, workerResource1, _callback);

    }


    private ApiResponse<WorkerResource1> updateUniqueWorkerWithHttpInfo(String workerId, WorkerResource1 workerResource1) throws ApiException {
        okhttp3.Call localVarCall = updateUniqueWorkerValidateBeforeCall(workerId, workerResource1, null);
        Type localVarReturnType = new TypeToken<WorkerResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUniqueWorkerAsync(String workerId, WorkerResource1 workerResource1, final ApiCallback<WorkerResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUniqueWorkerValidateBeforeCall(workerId, workerResource1, _callback);
        Type localVarReturnType = new TypeToken<WorkerResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUniqueWorkerRequestBuilder {
        private final String workerId;
        private String workerId;
        private String employeeId;
        private String workerType;
        private String employmentType;
        private String exemptionType;
        private OffsetDateTime birthDate;
        private String sex;
        private String ethnicityCode;
        private OffsetDateTime hireDate;
        private String clockId;
        private NameResource1 name;
        private LegalIdResource1 legalId;
        private String laborAssignmentId;
        private String locationId;
        private String jobId;
        private JobTitleResource1 job;
        private OrganizationResource1 organization;
        private SupervisorResource1 supervisor;
        private Status1 currentStatus;
        private List<CommunicationResource1> communications;
        private List<Link> links;
        private String workerCorrelationId;

        private UpdateUniqueWorkerRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set workerId
         * @param workerId The unique identifier associated with this worker representation. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder workerId(String workerId) {
            this.workerId = workerId;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId The workers employee identification information. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set workerType
         * @param workerType The type of worker. This data field cannot be PATCHED. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder workerType(String workerType) {
            this.workerType = workerType;
            return this;
        }
        
        /**
         * Set employmentType
         * @param employmentType The type of employment for the worker. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder employmentType(String employmentType) {
            this.employmentType = employmentType;
            return this;
        }
        
        /**
         * Set exemptionType
         * @param exemptionType The Overtime classification of the worker. This data field cannot be PATCHED for ACTIVE workers. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder exemptionType(String exemptionType) {
            this.exemptionType = exemptionType;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate The workers date of birth. It cannot be greater than today&#39;s date. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder birthDate(OffsetDateTime birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set sex
         * @param sex  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder sex(String sex) {
            this.sex = sex;
            return this;
        }
        
        /**
         * Set ethnicityCode
         * @param ethnicityCode Disclaimer:This parameter is not visible in Flex for the client. This data field cannot be PATCHED for ACTIVE workers. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder ethnicityCode(String ethnicityCode) {
            this.ethnicityCode = ethnicityCode;
            return this;
        }
        
        /**
         * Set hireDate
         * @param hireDate The date which the worker was hired. It cannot be PATCHED for ACTIVE workers. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder hireDate(OffsetDateTime hireDate) {
            this.hireDate = hireDate;
            return this;
        }
        
        /**
         * Set clockId
         * @param clockId The clock ID of the worker that can be an identification for other systems. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder clockId(String clockId) {
            this.clockId = clockId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder name(NameResource1 name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set legalId
         * @param legalId  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder legalId(LegalIdResource1 legalId) {
            this.legalId = legalId;
            return this;
        }
        
        /**
         * Set laborAssignmentId
         * @param laborAssignmentId The workers home labor assignment. This data field cannot be POSTED or PATCHED. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder laborAssignmentId(String laborAssignmentId) {
            this.laborAssignmentId = laborAssignmentId;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId The workers location. This data field cannot be POSTED or PATCHED. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId The workers home job. This data field cannot be POSTED or PATCHED. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder job(JobTitleResource1 job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder organization(OrganizationResource1 organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set supervisor
         * @param supervisor  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder supervisor(SupervisorResource1 supervisor) {
            this.supervisor = supervisor;
            return this;
        }
        
        /**
         * Set currentStatus
         * @param currentStatus  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder currentStatus(Status1 currentStatus) {
            this.currentStatus = currentStatus;
            return this;
        }
        
        /**
         * Set communications
         * @param communications Worker Communications. This data field cannot be updated for worker endpoint. (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder communications(List<CommunicationResource1> communications) {
            this.communications = communications;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set workerCorrelationId
         * @param workerCorrelationId Id that you define which is used for error handling/responses.This data field is used while POSTING multiple IN_PROGRESS workers (optional)
         * @return UpdateUniqueWorkerRequestBuilder
         */
        public UpdateUniqueWorkerRequestBuilder workerCorrelationId(String workerCorrelationId) {
            this.workerCorrelationId = workerCorrelationId;
            return this;
        }
        
        /**
         * Build call for updateUniqueWorker
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerResource1 workerResource1 = buildBodyParams();
            return updateUniqueWorkerCall(workerId, workerResource1, _callback);
        }

        private WorkerResource1 buildBodyParams() {
            WorkerResource1 workerResource1 = new WorkerResource1();
            workerResource1.workerId(this.workerId);
            workerResource1.employeeId(this.employeeId);
            if (this.workerType != null)
            workerResource1.workerType(WorkerResource1.WorkerTypeEnum.fromValue(this.workerType));
            if (this.employmentType != null)
            workerResource1.employmentType(WorkerResource1.EmploymentTypeEnum.fromValue(this.employmentType));
            if (this.exemptionType != null)
            workerResource1.exemptionType(WorkerResource1.ExemptionTypeEnum.fromValue(this.exemptionType));
            workerResource1.birthDate(this.birthDate);
            if (this.sex != null)
            workerResource1.sex(WorkerResource1.SexEnum.fromValue(this.sex));
            workerResource1.ethnicityCode(this.ethnicityCode);
            workerResource1.hireDate(this.hireDate);
            workerResource1.clockId(this.clockId);
            workerResource1.name(this.name);
            workerResource1.legalId(this.legalId);
            workerResource1.laborAssignmentId(this.laborAssignmentId);
            workerResource1.locationId(this.locationId);
            workerResource1.jobId(this.jobId);
            workerResource1.job(this.job);
            workerResource1.organization(this.organization);
            workerResource1.supervisor(this.supervisor);
            workerResource1.currentStatus(this.currentStatus);
            workerResource1.communications(this.communications);
            workerResource1.links(this.links);
            workerResource1.workerCorrelationId(this.workerCorrelationId);
            return workerResource1;
        }

        /**
         * Execute updateUniqueWorker request
         * @return WorkerResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerResource1 execute() throws ApiException {
            WorkerResource1 workerResource1 = buildBodyParams();
            ApiResponse<WorkerResource1> localVarResp = updateUniqueWorkerWithHttpInfo(workerId, workerResource1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUniqueWorker request with HTTP info returned
         * @return ApiResponse&lt;WorkerResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerResource1> executeWithHttpInfo() throws ApiException {
            WorkerResource1 workerResource1 = buildBodyParams();
            return updateUniqueWorkerWithHttpInfo(workerId, workerResource1);
        }

        /**
         * Execute updateUniqueWorker request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerResource1> _callback) throws ApiException {
            WorkerResource1 workerResource1 = buildBodyParams();
            return updateUniqueWorkerAsync(workerId, workerResource1, _callback);
        }
    }

    /**
     * Worker
     * Update a unique worker (employee and contractor) that your application has been granted access to modify.
     * @param workerId ID associated with desired worker. (required)
     * @param workerResource1  (required)
     * @return UpdateUniqueWorkerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUniqueWorkerRequestBuilder updateUniqueWorker(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new UpdateUniqueWorkerRequestBuilder(workerId);
    }
}
