/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CheckResource;
import com.konfigthis.client.model.CheckResource1;
import com.konfigthis.client.model.CheckResource2;
import com.konfigthis.client.model.Link;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PayComponentResource;
import com.konfigthis.client.model.PayComponentResource1;
import com.konfigthis.client.model.PayComponentResource2;
import com.konfigthis.client.model.PayPeriodResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayrollApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCompanyChecksCall(String companyId, CheckResource checkResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/checks"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.checks.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.paychex.payroll.checks.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCompanyChecksValidateBeforeCall(String companyId, CheckResource checkResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addCompanyChecks(Async)");
        }

        // verify the required parameter 'checkResource' is set
        if (checkResource == null) {
            throw new ApiException("Missing the required parameter 'checkResource' when calling addCompanyChecks(Async)");
        }

        return addCompanyChecksCall(companyId, checkResource, _callback);

    }


    private ApiResponse<CheckResource> addCompanyChecksWithHttpInfo(String companyId, CheckResource checkResource) throws ApiException {
        okhttp3.Call localVarCall = addCompanyChecksValidateBeforeCall(companyId, checkResource, null);
        Type localVarReturnType = new TypeToken<CheckResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCompanyChecksAsync(String companyId, CheckResource checkResource, final ApiCallback<CheckResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCompanyChecksValidateBeforeCall(companyId, checkResource, _callback);
        Type localVarReturnType = new TypeToken<CheckResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCompanyChecksRequestBuilder {
        private final String companyId;
        private String workerId;
        private String paycheckId;
        private String payPeriodId;
        private String checkCorrelationId;
        private Boolean blockAutoDistribution;
        private List<PayComponentResource> earnings;
        private List<PayComponentResource> deductions;
        private String checkDate;
        private List<PayComponentResource> informational;
        private List<PayComponentResource> taxes;
        private List<Link> links;

        private AddCompanyChecksRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set workerId
         * @param workerId The id assigned to the worker. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder workerId(String workerId) {
            this.workerId = workerId;
            return this;
        }
        
        /**
         * Set paycheckId
         * @param paycheckId The id of a single check that a workers has. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder paycheckId(String paycheckId) {
            this.paycheckId = paycheckId;
            return this;
        }
        
        /**
         * Set payPeriodId
         * @param payPeriodId The id for the unprocessed payperiod.  (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder payPeriodId(String payPeriodId) {
            this.payPeriodId = payPeriodId;
            return this;
        }
        
        /**
         * Set checkCorrelationId
         * @param checkCorrelationId Id that you define which is used for error handling/responses. This is not required when sending a single check. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder checkCorrelationId(String checkCorrelationId) {
            this.checkCorrelationId = checkCorrelationId;
            return this;
        }
        
        /**
         * Set blockAutoDistribution
         * @param blockAutoDistribution This is used optionally for blocking the auto distribution of the earnings on the workers if they are setup for auto distribution. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder blockAutoDistribution(Boolean blockAutoDistribution) {
            this.blockAutoDistribution = blockAutoDistribution;
            return this;
        }
        
        /**
         * Set earnings
         * @param earnings The earnings to apply to the check.Each earning needs to define as one of the following:1 .payHours: Will use the default hourly rate defined on the worker to apply the hours against. 2. payHours and payRate: Will allow you to define the monetary rate that the hours will be applied against. 3. payHours and payRateId: Will allow you to define which workers predefined pay rate the hours will be applied against. 4. payUnits: Will use the default hourly rate defined on the worker to apply the units against. 5. payUnits and payRate: Will allow you to define the monetary rate that the units will be applied against. 6. payUnits and payRateId: Will allow you to define which workers predefined pay rate the units will be applied against. 7. payAmount: Will allow you to define straight monetary amount. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder earnings(List<PayComponentResource> earnings) {
            this.earnings = earnings;
            return this;
        }
        
        /**
         * Set deductions
         * @param deductions Deduction pay components on the check. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder deductions(List<PayComponentResource> deductions) {
            this.deductions = deductions;
            return this;
        }
        
        /**
         * Set checkDate
         * @param checkDate The check date  (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder checkDate(String checkDate) {
            this.checkDate = checkDate;
            return this;
        }
        
        /**
         * Set informational
         * @param informational Informational pay components on the check. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder informational(List<PayComponentResource> informational) {
            this.informational = informational;
            return this;
        }
        
        /**
         * Set taxes
         * @param taxes Tax pay components on the check. (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder taxes(List<PayComponentResource> taxes) {
            this.taxes = taxes;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AddCompanyChecksRequestBuilder
         */
        public AddCompanyChecksRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for addCompanyChecks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckResource checkResource = buildBodyParams();
            return addCompanyChecksCall(companyId, checkResource, _callback);
        }

        private CheckResource buildBodyParams() {
            CheckResource checkResource = new CheckResource();
            checkResource.workerId(this.workerId);
            checkResource.paycheckId(this.paycheckId);
            checkResource.payPeriodId(this.payPeriodId);
            checkResource.checkCorrelationId(this.checkCorrelationId);
            checkResource.blockAutoDistribution(this.blockAutoDistribution);
            checkResource.earnings(this.earnings);
            checkResource.deductions(this.deductions);
            checkResource.checkDate(this.checkDate);
            checkResource.informational(this.informational);
            checkResource.taxes(this.taxes);
            checkResource.links(this.links);
            return checkResource;
        }

        /**
         * Execute addCompanyChecks request
         * @return CheckResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource execute() throws ApiException {
            CheckResource checkResource = buildBodyParams();
            ApiResponse<CheckResource> localVarResp = addCompanyChecksWithHttpInfo(companyId, checkResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCompanyChecks request with HTTP info returned
         * @return ApiResponse&lt;CheckResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource> executeWithHttpInfo() throws ApiException {
            CheckResource checkResource = buildBodyParams();
            return addCompanyChecksWithHttpInfo(companyId, checkResource);
        }

        /**
         * Execute addCompanyChecks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource> _callback) throws ApiException {
            CheckResource checkResource = buildBodyParams();
            return addCompanyChecksAsync(companyId, checkResource, _callback);
        }
    }

    /**
     * Company Checks
     * Add a check for one or more worker within a company for an available pay period.
     * @param companyId ID associated with desired company. (required)
     * @param checkResource  (required)
     * @return AddCompanyChecksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddCompanyChecksRequestBuilder addCompanyChecks(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new AddCompanyChecksRequestBuilder(companyId);
    }
    private okhttp3.Call addPayComponentToCheckCall(String checkId, PayComponentResource2 payComponentResource2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payComponentResource2;

        // create path and map variables
        String localVarPath = "/checks/{checkId}/checkcomponents"
            .replace("{" + "checkId" + "}", localVarApiClient.escapeString(checkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.check.checkcomponent.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.check.checkcomponent.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPayComponentToCheckValidateBeforeCall(String checkId, PayComponentResource2 payComponentResource2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkId' is set
        if (checkId == null) {
            throw new ApiException("Missing the required parameter 'checkId' when calling addPayComponentToCheck(Async)");
        }

        // verify the required parameter 'payComponentResource2' is set
        if (payComponentResource2 == null) {
            throw new ApiException("Missing the required parameter 'payComponentResource2' when calling addPayComponentToCheck(Async)");
        }

        return addPayComponentToCheckCall(checkId, payComponentResource2, _callback);

    }


    private ApiResponse<CheckResource2> addPayComponentToCheckWithHttpInfo(String checkId, PayComponentResource2 payComponentResource2) throws ApiException {
        okhttp3.Call localVarCall = addPayComponentToCheckValidateBeforeCall(checkId, payComponentResource2, null);
        Type localVarReturnType = new TypeToken<CheckResource2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPayComponentToCheckAsync(String checkId, PayComponentResource2 payComponentResource2, final ApiCallback<CheckResource2> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPayComponentToCheckValidateBeforeCall(checkId, payComponentResource2, _callback);
        Type localVarReturnType = new TypeToken<CheckResource2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPayComponentToCheckRequestBuilder {
        private final String checkId;
        private String description;
        private String componentId;
        private String checkComponentId;
        private String name;
        private String classificationType;
        private String effectOnPay;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private List<String> appliesToWorkerTypes;
        private String jobId;
        private String laborAssignmentId;
        private String payRateId;
        private String payRate;
        private String payHours;
        private String payUnits;
        private String payAmount;
        private Boolean memoed;
        private OffsetDateTime lineDate;

        private AddPayComponentToCheckRequestBuilder(String checkId) {
            this.checkId = checkId;
        }

        /**
         * Set description
         * @param description Description (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set componentId
         * @param componentId The identifier of the pay component to add to the check. An overtime pay component can&#39;t be placed on a worker that is OT exempt. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder componentId(String componentId) {
            this.componentId = componentId;
            return this;
        }
        
        /**
         * Set checkComponentId
         * @param checkComponentId The unique identifier associated for the pay component on this check. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder checkComponentId(String checkComponentId) {
            this.checkComponentId = checkComponentId;
            return this;
        }
        
        /**
         * Set name
         * @param name The name given to the pay component (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set classificationType
         * @param classificationType The category that this component falls into. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder classificationType(String classificationType) {
            this.classificationType = classificationType;
            return this;
        }
        
        /**
         * Set effectOnPay
         * @param effectOnPay The effect that the pay component will have on the check amount. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder effectOnPay(String effectOnPay) {
            this.effectOnPay = effectOnPay;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date that the pay component is able to be applied on a check. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The date that the pay component is not available to be applied on a check moving forward. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set appliesToWorkerTypes
         * @param appliesToWorkerTypes Applies To WorkerTypes. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder appliesToWorkerTypes(List<String> appliesToWorkerTypes) {
            this.appliesToWorkerTypes = appliesToWorkerTypes;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId This is used optionally for overriding a job when it needs to be different then the workers default. This option is only available when the client has job costing. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set laborAssignmentId
         * @param laborAssignmentId This is used optionally for overriding a labor assignment when it needs to be different then the workers assignment distribution. This option is only available when the client has labor assignment. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder laborAssignmentId(String laborAssignmentId) {
            this.laborAssignmentId = laborAssignmentId;
            return this;
        }
        
        /**
         * Set payRateId
         * @param payRateId The rate identifier for the workers compensation (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder payRateId(String payRateId) {
            this.payRateId = payRateId;
            return this;
        }
        
        /**
         * Set payRate
         * @param payRate The rate amount that will be applied for this component. Used in conjunction with Hours or Units. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder payRate(String payRate) {
            this.payRate = payRate;
            return this;
        }
        
        /**
         * Set payHours
         * @param payHours The number of hours that will be applied for this component. Used in conjunction with rate. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder payHours(String payHours) {
            this.payHours = payHours;
            return this;
        }
        
        /**
         * Set payUnits
         * @param payUnits The number of units that will be applied for this component. Used in conjunction with rate. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder payUnits(String payUnits) {
            this.payUnits = payUnits;
            return this;
        }
        
        /**
         * Set payAmount
         * @param payAmount The flat amount to be applied for this component. Not used with Rate, Hours, or Units. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder payAmount(String payAmount) {
            this.payAmount = payAmount;
            return this;
        }
        
        /**
         * Set memoed
         * @param memoed This is used optionally for memoing the payHours or payUnits so that they are informational when using a payAmount. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder memoed(Boolean memoed) {
            this.memoed = memoed;
            return this;
        }
        
        /**
         * Set lineDate
         * @param lineDate This is used optionally for specifying a date that the pay component was generated on. (optional)
         * @return AddPayComponentToCheckRequestBuilder
         */
        public AddPayComponentToCheckRequestBuilder lineDate(OffsetDateTime lineDate) {
            this.lineDate = lineDate;
            return this;
        }
        
        /**
         * Build call for addPayComponentToCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            return addPayComponentToCheckCall(checkId, payComponentResource2, _callback);
        }

        private PayComponentResource2 buildBodyParams() {
            PayComponentResource2 payComponentResource2 = new PayComponentResource2();
            payComponentResource2.description(this.description);
            payComponentResource2.componentId(this.componentId);
            payComponentResource2.checkComponentId(this.checkComponentId);
            payComponentResource2.name(this.name);
            payComponentResource2.classificationType(this.classificationType);
            if (this.effectOnPay != null)
            payComponentResource2.effectOnPay(PayComponentResource2.EffectOnPayEnum.fromValue(this.effectOnPay));
            payComponentResource2.startDate(this.startDate);
            payComponentResource2.endDate(this.endDate);
            if (this.appliesToWorkerTypes != null)
            payComponentResource2.appliesToWorkerTypes(PayComponentResource2.AppliesToWorkerTypesEnum.fromValue(this.appliesToWorkerTypes));
            payComponentResource2.jobId(this.jobId);
            payComponentResource2.laborAssignmentId(this.laborAssignmentId);
            payComponentResource2.payRateId(this.payRateId);
            payComponentResource2.payRate(this.payRate);
            payComponentResource2.payHours(this.payHours);
            payComponentResource2.payUnits(this.payUnits);
            payComponentResource2.payAmount(this.payAmount);
            payComponentResource2.memoed(this.memoed);
            payComponentResource2.lineDate(this.lineDate);
            return payComponentResource2;
        }

        /**
         * Execute addPayComponentToCheck request
         * @return CheckResource2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource2 execute() throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            ApiResponse<CheckResource2> localVarResp = addPayComponentToCheckWithHttpInfo(checkId, payComponentResource2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPayComponentToCheck request with HTTP info returned
         * @return ApiResponse&lt;CheckResource2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource2> executeWithHttpInfo() throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            return addPayComponentToCheckWithHttpInfo(checkId, payComponentResource2);
        }

        /**
         * Execute addPayComponentToCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource2> _callback) throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            return addPayComponentToCheckAsync(checkId, payComponentResource2, _callback);
        }
    }

    /**
     * Pay Component to a check.
     * Add a new pay component on an individual unprocessed check.
     * @param checkId ID associated with desired check. (required)
     * @param payComponentResource2  (required)
     * @return AddPayComponentToCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddPayComponentToCheckRequestBuilder addPayComponentToCheck(String checkId) throws IllegalArgumentException {
        if (checkId == null) throw new IllegalArgumentException("\"checkId\" is required but got null");
            

        return new AddPayComponentToCheckRequestBuilder(checkId);
    }
    private okhttp3.Call addWorkerCheckCall(String workerId, CheckResource1 checkResource1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkResource1;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/checks"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.check.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.check.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addWorkerCheckValidateBeforeCall(String workerId, CheckResource1 checkResource1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling addWorkerCheck(Async)");
        }

        // verify the required parameter 'checkResource1' is set
        if (checkResource1 == null) {
            throw new ApiException("Missing the required parameter 'checkResource1' when calling addWorkerCheck(Async)");
        }

        return addWorkerCheckCall(workerId, checkResource1, _callback);

    }


    private ApiResponse<CheckResource1> addWorkerCheckWithHttpInfo(String workerId, CheckResource1 checkResource1) throws ApiException {
        okhttp3.Call localVarCall = addWorkerCheckValidateBeforeCall(workerId, checkResource1, null);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addWorkerCheckAsync(String workerId, CheckResource1 checkResource1, final ApiCallback<CheckResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = addWorkerCheckValidateBeforeCall(workerId, checkResource1, _callback);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddWorkerCheckRequestBuilder {
        private final String workerId;
        private String workerId;
        private String paycheckId;
        private String payPeriodId;
        private String checkCorrelationId;
        private Boolean blockAutoDistribution;
        private List<PayComponentResource1> earnings;
        private List<PayComponentResource1> deductions;
        private List<PayComponentResource1> informational;
        private List<PayComponentResource1> taxes;

        private AddWorkerCheckRequestBuilder(String workerId) {
            this.workerId = workerId;
        }

        /**
         * Set workerId
         * @param workerId The id assigned to the worker (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder workerId(String workerId) {
            this.workerId = workerId;
            return this;
        }
        
        /**
         * Set paycheckId
         * @param paycheckId The id of a single check that a workers has. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder paycheckId(String paycheckId) {
            this.paycheckId = paycheckId;
            return this;
        }
        
        /**
         * Set payPeriodId
         * @param payPeriodId The id for the unprocessed payperiod. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder payPeriodId(String payPeriodId) {
            this.payPeriodId = payPeriodId;
            return this;
        }
        
        /**
         * Set checkCorrelationId
         * @param checkCorrelationId Id that you define which is used for error handling/responses. This is not required when sending a single check. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder checkCorrelationId(String checkCorrelationId) {
            this.checkCorrelationId = checkCorrelationId;
            return this;
        }
        
        /**
         * Set blockAutoDistribution
         * @param blockAutoDistribution This is used optionally for blocking the auto distribution of the earnings on the workers if they are setup for auto distribution. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder blockAutoDistribution(Boolean blockAutoDistribution) {
            this.blockAutoDistribution = blockAutoDistribution;
            return this;
        }
        
        /**
         * Set earnings
         * @param earnings The earnings to apply to the check.Each earning needs to define as one of the following:1 .payHours: Will use the default hourly rate defined on the worker to apply the hours against. 2. payHours and payRate: Will allow you to define the monetary rate that the hours will be applied against. 3. payHours and payRateId: Will allow you to define which workers predefined pay rate the hours will be applied against. 4. payUnits: Will use the default hourly rate defined on the worker to apply the units against. 5. payUnits and payRate: Will allow you to define the monetary rate that the units will be applied against. 6. payUnits and payRateId: Will allow you to define which workers predefined pay rate the units will be applied against. 7. payAmount: Will allow you to define straight monetary amount. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder earnings(List<PayComponentResource1> earnings) {
            this.earnings = earnings;
            return this;
        }
        
        /**
         * Set deductions
         * @param deductions Deduction pay components on the check. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder deductions(List<PayComponentResource1> deductions) {
            this.deductions = deductions;
            return this;
        }
        
        /**
         * Set informational
         * @param informational Informational pay components on the check. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder informational(List<PayComponentResource1> informational) {
            this.informational = informational;
            return this;
        }
        
        /**
         * Set taxes
         * @param taxes Tax pay components on the check. (optional)
         * @return AddWorkerCheckRequestBuilder
         */
        public AddWorkerCheckRequestBuilder taxes(List<PayComponentResource1> taxes) {
            this.taxes = taxes;
            return this;
        }
        
        /**
         * Build call for addWorkerCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckResource1 checkResource1 = buildBodyParams();
            return addWorkerCheckCall(workerId, checkResource1, _callback);
        }

        private CheckResource1 buildBodyParams() {
            CheckResource1 checkResource1 = new CheckResource1();
            checkResource1.workerId(this.workerId);
            checkResource1.paycheckId(this.paycheckId);
            checkResource1.payPeriodId(this.payPeriodId);
            checkResource1.checkCorrelationId(this.checkCorrelationId);
            if (this.blockAutoDistribution != null)
            checkResource1.blockAutoDistribution(CheckResource1.BlockAutoDistributionEnum.fromValue(this.blockAutoDistribution));
            checkResource1.earnings(this.earnings);
            checkResource1.deductions(this.deductions);
            checkResource1.informational(this.informational);
            checkResource1.taxes(this.taxes);
            return checkResource1;
        }

        /**
         * Execute addWorkerCheck request
         * @return CheckResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource1 execute() throws ApiException {
            CheckResource1 checkResource1 = buildBodyParams();
            ApiResponse<CheckResource1> localVarResp = addWorkerCheckWithHttpInfo(workerId, checkResource1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addWorkerCheck request with HTTP info returned
         * @return ApiResponse&lt;CheckResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource1> executeWithHttpInfo() throws ApiException {
            CheckResource1 checkResource1 = buildBodyParams();
            return addWorkerCheckWithHttpInfo(workerId, checkResource1);
        }

        /**
         * Execute addWorkerCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource1> _callback) throws ApiException {
            CheckResource1 checkResource1 = buildBodyParams();
            return addWorkerCheckAsync(workerId, checkResource1, _callback);
        }
    }

    /**
     * Worker Check
     * Add a check to a worker for an unprocessed pay period.
     * @param workerId ID associated with desired worker. (required)
     * @param checkResource1  (required)
     * @return AddWorkerCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddWorkerCheckRequestBuilder addWorkerCheck(String workerId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        return new AddWorkerCheckRequestBuilder(workerId);
    }
    private okhttp3.Call deleteChecksByPayPeriodAndUserCall(String payperiodid, Boolean deletebyuserid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payperiodid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payperiodid", payperiodid));
        }

        if (deletebyuserid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletebyuserid", deletebyuserid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChecksByPayPeriodAndUserValidateBeforeCall(String payperiodid, Boolean deletebyuserid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payperiodid' is set
        if (payperiodid == null) {
            throw new ApiException("Missing the required parameter 'payperiodid' when calling deleteChecksByPayPeriodAndUser(Async)");
        }

        // verify the required parameter 'deletebyuserid' is set
        if (deletebyuserid == null) {
            throw new ApiException("Missing the required parameter 'deletebyuserid' when calling deleteChecksByPayPeriodAndUser(Async)");
        }

        return deleteChecksByPayPeriodAndUserCall(payperiodid, deletebyuserid, _callback);

    }


    private ApiResponse<Void> deleteChecksByPayPeriodAndUserWithHttpInfo(String payperiodid, Boolean deletebyuserid) throws ApiException {
        okhttp3.Call localVarCall = deleteChecksByPayPeriodAndUserValidateBeforeCall(payperiodid, deletebyuserid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteChecksByPayPeriodAndUserAsync(String payperiodid, Boolean deletebyuserid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChecksByPayPeriodAndUserValidateBeforeCall(payperiodid, deletebyuserid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteChecksByPayPeriodAndUserRequestBuilder {
        private final String payperiodid;
        private final Boolean deletebyuserid;

        private DeleteChecksByPayPeriodAndUserRequestBuilder(String payperiodid, Boolean deletebyuserid) {
            this.payperiodid = payperiodid;
            this.deletebyuserid = deletebyuserid;
        }

        /**
         * Build call for deleteChecksByPayPeriodAndUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChecksByPayPeriodAndUserCall(payperiodid, deletebyuserid, _callback);
        }


        /**
         * Execute deleteChecksByPayPeriodAndUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteChecksByPayPeriodAndUserWithHttpInfo(payperiodid, deletebyuserid);
        }

        /**
         * Execute deleteChecksByPayPeriodAndUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteChecksByPayPeriodAndUserWithHttpInfo(payperiodid, deletebyuserid);
        }

        /**
         * Execute deleteChecksByPayPeriodAndUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteChecksByPayPeriodAndUserAsync(payperiodid, deletebyuserid, _callback);
        }
    }

    /**
     * Checks by Pay Period and User
     * Delete checks by pay period Id and user Id.
     * @param payperiodid ID associated with desired pay period. (required)
     * @param deletebyuserid Value for deletebyuserid parameter should be \&quot;true\&quot;  (required)
     * @return DeleteChecksByPayPeriodAndUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChecksByPayPeriodAndUserRequestBuilder deleteChecksByPayPeriodAndUser(String payperiodid, Boolean deletebyuserid) throws IllegalArgumentException {
        if (payperiodid == null) throw new IllegalArgumentException("\"payperiodid\" is required but got null");
            

        if (deletebyuserid == null) throw new IllegalArgumentException("\"deletebyuserid\" is required but got null");
        return new DeleteChecksByPayPeriodAndUserRequestBuilder(payperiodid, deletebyuserid);
    }
    private okhttp3.Call getCompanyChecksByPayPeriodCall(String companyId, String payperiodid, Integer offset, Integer limit, Boolean filterbyuserid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/checks"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payperiodid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payperiodid", payperiodid));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filterbyuserid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterbyuserid", filterbyuserid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.checks.v1+json",
            "application/vnd.paychex.payroll.processedchecks.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyChecksByPayPeriodValidateBeforeCall(String companyId, String payperiodid, Integer offset, Integer limit, Boolean filterbyuserid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyChecksByPayPeriod(Async)");
        }

        // verify the required parameter 'payperiodid' is set
        if (payperiodid == null) {
            throw new ApiException("Missing the required parameter 'payperiodid' when calling getCompanyChecksByPayPeriod(Async)");
        }

        return getCompanyChecksByPayPeriodCall(companyId, payperiodid, offset, limit, filterbyuserid, _callback);

    }


    private ApiResponse<CheckResource> getCompanyChecksByPayPeriodWithHttpInfo(String companyId, String payperiodid, Integer offset, Integer limit, Boolean filterbyuserid) throws ApiException {
        okhttp3.Call localVarCall = getCompanyChecksByPayPeriodValidateBeforeCall(companyId, payperiodid, offset, limit, filterbyuserid, null);
        Type localVarReturnType = new TypeToken<CheckResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyChecksByPayPeriodAsync(String companyId, String payperiodid, Integer offset, Integer limit, Boolean filterbyuserid, final ApiCallback<CheckResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyChecksByPayPeriodValidateBeforeCall(companyId, payperiodid, offset, limit, filterbyuserid, _callback);
        Type localVarReturnType = new TypeToken<CheckResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyChecksByPayPeriodRequestBuilder {
        private final String companyId;
        private final String payperiodid;
        private Integer offset;
        private Integer limit;
        private Boolean filterbyuserid;

        private GetCompanyChecksByPayPeriodRequestBuilder(String companyId, String payperiodid) {
            this.companyId = companyId;
            this.payperiodid = payperiodid;
        }

        /**
         * Set offset
         * @param offset The zero based offset of the next page of data to be presented. (optional, default to 0)
         * @return GetCompanyChecksByPayPeriodRequestBuilder
         */
        public GetCompanyChecksByPayPeriodRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of elements to be returned in a page transition. (optional, default to 0)
         * @return GetCompanyChecksByPayPeriodRequestBuilder
         */
        public GetCompanyChecksByPayPeriodRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set filterbyuserid
         * @param filterbyuserid Filter by User Id. (optional)
         * @return GetCompanyChecksByPayPeriodRequestBuilder
         */
        public GetCompanyChecksByPayPeriodRequestBuilder filterbyuserid(Boolean filterbyuserid) {
            this.filterbyuserid = filterbyuserid;
            return this;
        }
        
        /**
         * Build call for getCompanyChecksByPayPeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyChecksByPayPeriodCall(companyId, payperiodid, offset, limit, filterbyuserid, _callback);
        }


        /**
         * Execute getCompanyChecksByPayPeriod request
         * @return CheckResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource execute() throws ApiException {
            ApiResponse<CheckResource> localVarResp = getCompanyChecksByPayPeriodWithHttpInfo(companyId, payperiodid, offset, limit, filterbyuserid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyChecksByPayPeriod request with HTTP info returned
         * @return ApiResponse&lt;CheckResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource> executeWithHttpInfo() throws ApiException {
            return getCompanyChecksByPayPeriodWithHttpInfo(companyId, payperiodid, offset, limit, filterbyuserid);
        }

        /**
         * Execute getCompanyChecksByPayPeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource> _callback) throws ApiException {
            return getCompanyChecksByPayPeriodAsync(companyId, payperiodid, offset, limit, filterbyuserid, _callback);
        }
    }

    /**
     * Company Checks
     * Get check(s) that are for a specific company within a processed or unprocessed pay period.
     * @param companyId ID associated with desired company. (required)
     * @param payperiodid The id assigned to the pay period that the check will be within. (required)
     * @return GetCompanyChecksByPayPeriodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyChecksByPayPeriodRequestBuilder getCompanyChecksByPayPeriod(String companyId, String payperiodid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payperiodid == null) throw new IllegalArgumentException("\"payperiodid\" is required but got null");
            

        return new GetCompanyChecksByPayPeriodRequestBuilder(companyId, payperiodid);
    }
    private okhttp3.Call getCompanyPayComponentCall(String companyId, String paycomponentId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/paycomponents/{paycomponentId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "paycomponentId" + "}", localVarApiClient.escapeString(paycomponentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponent.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyPayComponentValidateBeforeCall(String companyId, String paycomponentId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyPayComponent(Async)");
        }

        // verify the required parameter 'paycomponentId' is set
        if (paycomponentId == null) {
            throw new ApiException("Missing the required parameter 'paycomponentId' when calling getCompanyPayComponent(Async)");
        }

        return getCompanyPayComponentCall(companyId, paycomponentId, asof, _callback);

    }


    private ApiResponse<PayComponentResource> getCompanyPayComponentWithHttpInfo(String companyId, String paycomponentId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getCompanyPayComponentValidateBeforeCall(companyId, paycomponentId, asof, null);
        Type localVarReturnType = new TypeToken<PayComponentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyPayComponentAsync(String companyId, String paycomponentId, String asof, final ApiCallback<PayComponentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyPayComponentValidateBeforeCall(companyId, paycomponentId, asof, _callback);
        Type localVarReturnType = new TypeToken<PayComponentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyPayComponentRequestBuilder {
        private final String companyId;
        private final String paycomponentId;
        private String asof;

        private GetCompanyPayComponentRequestBuilder(String companyId, String paycomponentId) {
            this.companyId = companyId;
            this.paycomponentId = paycomponentId;
        }

        /**
         * Set asof
         * @param asof Returns PayComponent as of the date used in the request. (optional)
         * @return GetCompanyPayComponentRequestBuilder
         */
        public GetCompanyPayComponentRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getCompanyPayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyPayComponentCall(companyId, paycomponentId, asof, _callback);
        }


        /**
         * Execute getCompanyPayComponent request
         * @return PayComponentResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayComponentResource execute() throws ApiException {
            ApiResponse<PayComponentResource> localVarResp = getCompanyPayComponentWithHttpInfo(companyId, paycomponentId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyPayComponent request with HTTP info returned
         * @return ApiResponse&lt;PayComponentResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayComponentResource> executeWithHttpInfo() throws ApiException {
            return getCompanyPayComponentWithHttpInfo(companyId, paycomponentId, asof);
        }

        /**
         * Execute getCompanyPayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayComponentResource> _callback) throws ApiException {
            return getCompanyPayComponentAsync(companyId, paycomponentId, asof, _callback);
        }
    }

    /**
     * Company Pay Component
     * Pay component associated with the company.
     * @param companyId The id assigned to the company that is being requested for. (required)
     * @param paycomponentId The unique identifier used to identify a pay component. (required)
     * @return GetCompanyPayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyPayComponentRequestBuilder getCompanyPayComponent(String companyId, String paycomponentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (paycomponentId == null) throw new IllegalArgumentException("\"paycomponentId\" is required but got null");
            

        return new GetCompanyPayComponentRequestBuilder(companyId, paycomponentId);
    }
    private okhttp3.Call getCompanyPayComponentsCall(String companyId, String effectonpay, String asof, String classificationtype, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/paycomponents"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectonpay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectonpay", effectonpay));
        }

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        if (classificationtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationtype", classificationtype));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.paycomponents.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyPayComponentsValidateBeforeCall(String companyId, String effectonpay, String asof, String classificationtype, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyPayComponents(Async)");
        }

        return getCompanyPayComponentsCall(companyId, effectonpay, asof, classificationtype, name, _callback);

    }


    private ApiResponse<PayComponentResource> getCompanyPayComponentsWithHttpInfo(String companyId, String effectonpay, String asof, String classificationtype, String name) throws ApiException {
        okhttp3.Call localVarCall = getCompanyPayComponentsValidateBeforeCall(companyId, effectonpay, asof, classificationtype, name, null);
        Type localVarReturnType = new TypeToken<PayComponentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyPayComponentsAsync(String companyId, String effectonpay, String asof, String classificationtype, String name, final ApiCallback<PayComponentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyPayComponentsValidateBeforeCall(companyId, effectonpay, asof, classificationtype, name, _callback);
        Type localVarReturnType = new TypeToken<PayComponentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyPayComponentsRequestBuilder {
        private final String companyId;
        private String effectonpay;
        private String asof;
        private String classificationtype;
        private String name;

        private GetCompanyPayComponentsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set effectonpay
         * @param effectonpay The type of effect on pay that you are requested for. (optional)
         * @return GetCompanyPayComponentsRequestBuilder
         */
        public GetCompanyPayComponentsRequestBuilder effectonpay(String effectonpay) {
            this.effectonpay = effectonpay;
            return this;
        }
        
        /**
         * Set asof
         * @param asof Returns all PayComponent&#39;s as of the date used in the request. (optional)
         * @return GetCompanyPayComponentsRequestBuilder
         */
        public GetCompanyPayComponentsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Set classificationtype
         * @param classificationtype The category that this component falls into. (such as  EARNINGS  or   SICK_PAY ) (optional)
         * @return GetCompanyPayComponentsRequestBuilder
         */
        public GetCompanyPayComponentsRequestBuilder classificationtype(String classificationtype) {
            this.classificationtype = classificationtype;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of a pay component that a company has. (optional)
         * @return GetCompanyPayComponentsRequestBuilder
         */
        public GetCompanyPayComponentsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for getCompanyPayComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyPayComponentsCall(companyId, effectonpay, asof, classificationtype, name, _callback);
        }


        /**
         * Execute getCompanyPayComponents request
         * @return PayComponentResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayComponentResource execute() throws ApiException {
            ApiResponse<PayComponentResource> localVarResp = getCompanyPayComponentsWithHttpInfo(companyId, effectonpay, asof, classificationtype, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyPayComponents request with HTTP info returned
         * @return ApiResponse&lt;PayComponentResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayComponentResource> executeWithHttpInfo() throws ApiException {
            return getCompanyPayComponentsWithHttpInfo(companyId, effectonpay, asof, classificationtype, name);
        }

        /**
         * Execute getCompanyPayComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayComponentResource> _callback) throws ApiException {
            return getCompanyPayComponentsAsync(companyId, effectonpay, asof, classificationtype, name, _callback);
        }
    }

    /**
     * Company Pay Components
     * Array of pay components that are configured for a company. Pay components are earnings and deductions which are used for payroll.
     * @param companyId The id assigned to the company that is being requested for. (required)
     * @return GetCompanyPayComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyPayComponentsRequestBuilder getCompanyPayComponents(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyPayComponentsRequestBuilder(companyId);
    }
    private okhttp3.Call getCompanyPayPeriodsCall(String companyId, List<String> status, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/payperiods"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.periods.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyPayPeriodsValidateBeforeCall(String companyId, List<String> status, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyPayPeriods(Async)");
        }

        return getCompanyPayPeriodsCall(companyId, status, from, to, _callback);

    }


    private ApiResponse<PayPeriodResource> getCompanyPayPeriodsWithHttpInfo(String companyId, List<String> status, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = getCompanyPayPeriodsValidateBeforeCall(companyId, status, from, to, null);
        Type localVarReturnType = new TypeToken<PayPeriodResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyPayPeriodsAsync(String companyId, List<String> status, String from, String to, final ApiCallback<PayPeriodResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyPayPeriodsValidateBeforeCall(companyId, status, from, to, _callback);
        Type localVarReturnType = new TypeToken<PayPeriodResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyPayPeriodsRequestBuilder {
        private final String companyId;
        private List<String> status;
        private String from;
        private String to;

        private GetCompanyPayPeriodsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set status
         * @param status Get PayPeriods that are in List of specific status. (optional)
         * @return GetCompanyPayPeriodsRequestBuilder
         */
        public GetCompanyPayPeriodsRequestBuilder status(List<String> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set from
         * @param from The beginning of the search date range using the Payperiod start date. (optional)
         * @return GetCompanyPayPeriodsRequestBuilder
         */
        public GetCompanyPayPeriodsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The ending of the search date range using the Payperiod end date. (optional)
         * @return GetCompanyPayPeriodsRequestBuilder
         */
        public GetCompanyPayPeriodsRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for getCompanyPayPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyPayPeriodsCall(companyId, status, from, to, _callback);
        }


        /**
         * Execute getCompanyPayPeriods request
         * @return PayPeriodResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayPeriodResource execute() throws ApiException {
            ApiResponse<PayPeriodResource> localVarResp = getCompanyPayPeriodsWithHttpInfo(companyId, status, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyPayPeriods request with HTTP info returned
         * @return ApiResponse&lt;PayPeriodResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayPeriodResource> executeWithHttpInfo() throws ApiException {
            return getCompanyPayPeriodsWithHttpInfo(companyId, status, from, to);
        }

        /**
         * Execute getCompanyPayPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayPeriodResource> _callback) throws ApiException {
            return getCompanyPayPeriodsAsync(companyId, status, from, to, _callback);
        }
    }

    /**
     * Company Pay Periods
     * Array of pay periods associated with the company.
     * @param companyId The id assigned to the company that is being requested for. (required)
     * @return GetCompanyPayPeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyPayPeriodsRequestBuilder getCompanyPayPeriods(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyPayPeriodsRequestBuilder(companyId);
    }
    private okhttp3.Call getPayPeriodCall(String companyId, String payperiodId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/payperiods/{payperiodId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payperiodId" + "}", localVarApiClient.escapeString(payperiodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.period.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayPeriodValidateBeforeCall(String companyId, String payperiodId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getPayPeriod(Async)");
        }

        // verify the required parameter 'payperiodId' is set
        if (payperiodId == null) {
            throw new ApiException("Missing the required parameter 'payperiodId' when calling getPayPeriod(Async)");
        }

        return getPayPeriodCall(companyId, payperiodId, _callback);

    }


    private ApiResponse<PayPeriodResource> getPayPeriodWithHttpInfo(String companyId, String payperiodId) throws ApiException {
        okhttp3.Call localVarCall = getPayPeriodValidateBeforeCall(companyId, payperiodId, null);
        Type localVarReturnType = new TypeToken<PayPeriodResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayPeriodAsync(String companyId, String payperiodId, final ApiCallback<PayPeriodResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayPeriodValidateBeforeCall(companyId, payperiodId, _callback);
        Type localVarReturnType = new TypeToken<PayPeriodResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayPeriodRequestBuilder {
        private final String companyId;
        private final String payperiodId;

        private GetPayPeriodRequestBuilder(String companyId, String payperiodId) {
            this.companyId = companyId;
            this.payperiodId = payperiodId;
        }

        /**
         * Build call for getPayPeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pay Period successfully returned for given payPeriodId. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayPeriodCall(companyId, payperiodId, _callback);
        }


        /**
         * Execute getPayPeriod request
         * @return PayPeriodResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pay Period successfully returned for given payPeriodId. </td><td>  -  </td></tr>
         </table>
         */
        public PayPeriodResource execute() throws ApiException {
            ApiResponse<PayPeriodResource> localVarResp = getPayPeriodWithHttpInfo(companyId, payperiodId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayPeriod request with HTTP info returned
         * @return ApiResponse&lt;PayPeriodResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pay Period successfully returned for given payPeriodId. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayPeriodResource> executeWithHttpInfo() throws ApiException {
            return getPayPeriodWithHttpInfo(companyId, payperiodId);
        }

        /**
         * Execute getPayPeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pay Period successfully returned for given payPeriodId. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayPeriodResource> _callback) throws ApiException {
            return getPayPeriodAsync(companyId, payperiodId, _callback);
        }
    }

    /**
     * Company Pay Period
     * A single pay period.
     * @param companyId The id assigned to the company that is being requested for. (required)
     * @param payperiodId The id assigned to the PayPeriod you are looking for. (required)
     * @return GetPayPeriodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pay Period successfully returned for given payPeriodId. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayPeriodRequestBuilder getPayPeriod(String companyId, String payperiodId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payperiodId == null) throw new IllegalArgumentException("\"payperiodId\" is required but got null");
            

        return new GetPayPeriodRequestBuilder(companyId, payperiodId);
    }
    private okhttp3.Call getWorkerCheckCall(String workerId, String paycheckId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/checks/{externalCheckId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "paycheckId" + "}", localVarApiClient.escapeString(paycheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.processedcheck.v1+json",
            "application/vnd.paychex.payroll.check.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerCheckValidateBeforeCall(String workerId, String paycheckId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getWorkerCheck(Async)");
        }

        // verify the required parameter 'paycheckId' is set
        if (paycheckId == null) {
            throw new ApiException("Missing the required parameter 'paycheckId' when calling getWorkerCheck(Async)");
        }

        return getWorkerCheckCall(workerId, paycheckId, _callback);

    }


    private ApiResponse<CheckResource1> getWorkerCheckWithHttpInfo(String workerId, String paycheckId) throws ApiException {
        okhttp3.Call localVarCall = getWorkerCheckValidateBeforeCall(workerId, paycheckId, null);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkerCheckAsync(String workerId, String paycheckId, final ApiCallback<CheckResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerCheckValidateBeforeCall(workerId, paycheckId, _callback);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkerCheckRequestBuilder {
        private final String workerId;
        private final String paycheckId;

        private GetWorkerCheckRequestBuilder(String workerId, String paycheckId) {
            this.workerId = workerId;
            this.paycheckId = paycheckId;
        }

        /**
         * Build call for getWorkerCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkerCheckCall(workerId, paycheckId, _callback);
        }


        /**
         * Execute getWorkerCheck request
         * @return CheckResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource1 execute() throws ApiException {
            ApiResponse<CheckResource1> localVarResp = getWorkerCheckWithHttpInfo(workerId, paycheckId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkerCheck request with HTTP info returned
         * @return ApiResponse&lt;CheckResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource1> executeWithHttpInfo() throws ApiException {
            return getWorkerCheckWithHttpInfo(workerId, paycheckId);
        }

        /**
         * Execute getWorkerCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource1> _callback) throws ApiException {
            return getWorkerCheckAsync(workerId, paycheckId, _callback);
        }
    }

    /**
     * Worker Check
     * Retrieve a specific unprocessed or processed check that a worker has.
     * @param workerId ID associated with desired worker. (required)
     * @param paycheckId The id of a single check that a workers has. (required)
     * @return GetWorkerCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkerCheckRequestBuilder getWorkerCheck(String workerId, String paycheckId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (paycheckId == null) throw new IllegalArgumentException("\"paycheckId\" is required but got null");
            

        return new GetWorkerCheckRequestBuilder(workerId, paycheckId);
    }
    private okhttp3.Call getWorkerChecksByPayPeriodCall(String workerId, String payperiodid, Boolean filterbyuserid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/checks"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payperiodid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payperiodid", payperiodid));
        }

        if (filterbyuserid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterbyuserid", filterbyuserid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.processedchecks.v1+json",
            "application/vnd.paychex.payroll.checks.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerChecksByPayPeriodValidateBeforeCall(String workerId, String payperiodid, Boolean filterbyuserid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling getWorkerChecksByPayPeriod(Async)");
        }

        // verify the required parameter 'payperiodid' is set
        if (payperiodid == null) {
            throw new ApiException("Missing the required parameter 'payperiodid' when calling getWorkerChecksByPayPeriod(Async)");
        }

        return getWorkerChecksByPayPeriodCall(workerId, payperiodid, filterbyuserid, _callback);

    }


    private ApiResponse<CheckResource1> getWorkerChecksByPayPeriodWithHttpInfo(String workerId, String payperiodid, Boolean filterbyuserid) throws ApiException {
        okhttp3.Call localVarCall = getWorkerChecksByPayPeriodValidateBeforeCall(workerId, payperiodid, filterbyuserid, null);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkerChecksByPayPeriodAsync(String workerId, String payperiodid, Boolean filterbyuserid, final ApiCallback<CheckResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerChecksByPayPeriodValidateBeforeCall(workerId, payperiodid, filterbyuserid, _callback);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkerChecksByPayPeriodRequestBuilder {
        private final String workerId;
        private final String payperiodid;
        private Boolean filterbyuserid;

        private GetWorkerChecksByPayPeriodRequestBuilder(String workerId, String payperiodid) {
            this.workerId = workerId;
            this.payperiodid = payperiodid;
        }

        /**
         * Set filterbyuserid
         * @param filterbyuserid Filter by User Id. (optional)
         * @return GetWorkerChecksByPayPeriodRequestBuilder
         */
        public GetWorkerChecksByPayPeriodRequestBuilder filterbyuserid(Boolean filterbyuserid) {
            this.filterbyuserid = filterbyuserid;
            return this;
        }
        
        /**
         * Build call for getWorkerChecksByPayPeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkerChecksByPayPeriodCall(workerId, payperiodid, filterbyuserid, _callback);
        }


        /**
         * Execute getWorkerChecksByPayPeriod request
         * @return CheckResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource1 execute() throws ApiException {
            ApiResponse<CheckResource1> localVarResp = getWorkerChecksByPayPeriodWithHttpInfo(workerId, payperiodid, filterbyuserid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkerChecksByPayPeriod request with HTTP info returned
         * @return ApiResponse&lt;CheckResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource1> executeWithHttpInfo() throws ApiException {
            return getWorkerChecksByPayPeriodWithHttpInfo(workerId, payperiodid, filterbyuserid);
        }

        /**
         * Execute getWorkerChecksByPayPeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource1> _callback) throws ApiException {
            return getWorkerChecksByPayPeriodAsync(workerId, payperiodid, filterbyuserid, _callback);
        }
    }

    /**
     * Worker Checks
     * Get check(s) that are for a specific worker   within a processed or unprocessed pay period.
     * @param workerId ID associated with desired worker. (required)
     * @param payperiodid The id assigned to the pay period that the  check will be within. (required)
     * @return GetWorkerChecksByPayPeriodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkerChecksByPayPeriodRequestBuilder getWorkerChecksByPayPeriod(String workerId, String payperiodid) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (payperiodid == null) throw new IllegalArgumentException("\"payperiodid\" is required but got null");
            

        return new GetWorkerChecksByPayPeriodRequestBuilder(workerId, payperiodid);
    }
    private okhttp3.Call removePayComponentCall(String checkId, String checkComponentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks/{checkId}/checkcomponents/{checkComponentId}"
            .replace("{" + "checkId" + "}", localVarApiClient.escapeString(checkId.toString()))
            .replace("{" + "checkComponentId" + "}", localVarApiClient.escapeString(checkComponentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePayComponentValidateBeforeCall(String checkId, String checkComponentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkId' is set
        if (checkId == null) {
            throw new ApiException("Missing the required parameter 'checkId' when calling removePayComponent(Async)");
        }

        // verify the required parameter 'checkComponentId' is set
        if (checkComponentId == null) {
            throw new ApiException("Missing the required parameter 'checkComponentId' when calling removePayComponent(Async)");
        }

        return removePayComponentCall(checkId, checkComponentId, _callback);

    }


    private ApiResponse<Void> removePayComponentWithHttpInfo(String checkId, String checkComponentId) throws ApiException {
        okhttp3.Call localVarCall = removePayComponentValidateBeforeCall(checkId, checkComponentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePayComponentAsync(String checkId, String checkComponentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePayComponentValidateBeforeCall(checkId, checkComponentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePayComponentRequestBuilder {
        private final String checkId;
        private final String checkComponentId;

        private RemovePayComponentRequestBuilder(String checkId, String checkComponentId) {
            this.checkId = checkId;
            this.checkComponentId = checkComponentId;
        }

        /**
         * Build call for removePayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePayComponentCall(checkId, checkComponentId, _callback);
        }


        /**
         * Execute removePayComponent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePayComponentWithHttpInfo(checkId, checkComponentId);
        }

        /**
         * Execute removePayComponent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePayComponentWithHttpInfo(checkId, checkComponentId);
        }

        /**
         * Execute removePayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePayComponentAsync(checkId, checkComponentId, _callback);
        }
    }

    /**
     * Pay Component of a check
     * Remove a single pay component on an individual unprocessed check.
     * @param checkId ID associated with desired check. (required)
     * @param checkComponentId ID associated with an Earning of this check (required)
     * @return RemovePayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemovePayComponentRequestBuilder removePayComponent(String checkId, String checkComponentId) throws IllegalArgumentException {
        if (checkId == null) throw new IllegalArgumentException("\"checkId\" is required but got null");
            

        if (checkComponentId == null) throw new IllegalArgumentException("\"checkComponentId\" is required but got null");
            

        return new RemovePayComponentRequestBuilder(checkId, checkComponentId);
    }
    private okhttp3.Call removeWorkerCheckCall(String workerId, String paycheckId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{workerId}/checks/{externalCheckId}"
            .replace("{" + "workerId" + "}", localVarApiClient.escapeString(workerId.toString()))
            .replace("{" + "paycheckId" + "}", localVarApiClient.escapeString(paycheckId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.paychex.payroll.check.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWorkerCheckValidateBeforeCall(String workerId, String paycheckId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workerId' is set
        if (workerId == null) {
            throw new ApiException("Missing the required parameter 'workerId' when calling removeWorkerCheck(Async)");
        }

        // verify the required parameter 'paycheckId' is set
        if (paycheckId == null) {
            throw new ApiException("Missing the required parameter 'paycheckId' when calling removeWorkerCheck(Async)");
        }

        return removeWorkerCheckCall(workerId, paycheckId, _callback);

    }


    private ApiResponse<CheckResource1> removeWorkerCheckWithHttpInfo(String workerId, String paycheckId) throws ApiException {
        okhttp3.Call localVarCall = removeWorkerCheckValidateBeforeCall(workerId, paycheckId, null);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeWorkerCheckAsync(String workerId, String paycheckId, final ApiCallback<CheckResource1> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWorkerCheckValidateBeforeCall(workerId, paycheckId, _callback);
        Type localVarReturnType = new TypeToken<CheckResource1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveWorkerCheckRequestBuilder {
        private final String workerId;
        private final String paycheckId;

        private RemoveWorkerCheckRequestBuilder(String workerId, String paycheckId) {
            this.workerId = workerId;
            this.paycheckId = paycheckId;
        }

        /**
         * Build call for removeWorkerCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWorkerCheckCall(workerId, paycheckId, _callback);
        }


        /**
         * Execute removeWorkerCheck request
         * @return CheckResource1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CheckResource1 execute() throws ApiException {
            ApiResponse<CheckResource1> localVarResp = removeWorkerCheckWithHttpInfo(workerId, paycheckId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeWorkerCheck request with HTTP info returned
         * @return ApiResponse&lt;CheckResource1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckResource1> executeWithHttpInfo() throws ApiException {
            return removeWorkerCheckWithHttpInfo(workerId, paycheckId);
        }

        /**
         * Execute removeWorkerCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckResource1> _callback) throws ApiException {
            return removeWorkerCheckAsync(workerId, paycheckId, _callback);
        }
    }

    /**
     * Worker Check
     * Remove a specific unprocessed check that a worker has.
     * @param workerId ID associated with desired worker. (required)
     * @param paycheckId The id of a single check that a workers has. (required)
     * @return RemoveWorkerCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWorkerCheckRequestBuilder removeWorkerCheck(String workerId, String paycheckId) throws IllegalArgumentException {
        if (workerId == null) throw new IllegalArgumentException("\"workerId\" is required but got null");
            

        if (paycheckId == null) throw new IllegalArgumentException("\"paycheckId\" is required but got null");
            

        return new RemoveWorkerCheckRequestBuilder(workerId, paycheckId);
    }
    private okhttp3.Call updatePayComponentCall(String checkId, String checkComponentId, PayComponentResource2 payComponentResource2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payComponentResource2;

        // create path and map variables
        String localVarPath = "/checks/{checkId}/checkcomponents/{checkComponentId}"
            .replace("{" + "checkId" + "}", localVarApiClient.escapeString(checkId.toString()))
            .replace("{" + "checkComponentId" + "}", localVarApiClient.escapeString(checkComponentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.check.checkcomponent.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.payroll.check.checkcomponent.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayComponentValidateBeforeCall(String checkId, String checkComponentId, PayComponentResource2 payComponentResource2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkId' is set
        if (checkId == null) {
            throw new ApiException("Missing the required parameter 'checkId' when calling updatePayComponent(Async)");
        }

        // verify the required parameter 'checkComponentId' is set
        if (checkComponentId == null) {
            throw new ApiException("Missing the required parameter 'checkComponentId' when calling updatePayComponent(Async)");
        }

        // verify the required parameter 'payComponentResource2' is set
        if (payComponentResource2 == null) {
            throw new ApiException("Missing the required parameter 'payComponentResource2' when calling updatePayComponent(Async)");
        }

        return updatePayComponentCall(checkId, checkComponentId, payComponentResource2, _callback);

    }


    private ApiResponse<PayComponentResource2> updatePayComponentWithHttpInfo(String checkId, String checkComponentId, PayComponentResource2 payComponentResource2) throws ApiException {
        okhttp3.Call localVarCall = updatePayComponentValidateBeforeCall(checkId, checkComponentId, payComponentResource2, null);
        Type localVarReturnType = new TypeToken<PayComponentResource2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayComponentAsync(String checkId, String checkComponentId, PayComponentResource2 payComponentResource2, final ApiCallback<PayComponentResource2> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayComponentValidateBeforeCall(checkId, checkComponentId, payComponentResource2, _callback);
        Type localVarReturnType = new TypeToken<PayComponentResource2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayComponentRequestBuilder {
        private final String checkId;
        private final String checkComponentId;
        private String description;
        private String componentId;
        private String checkComponentId;
        private String name;
        private String classificationType;
        private String effectOnPay;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private List<String> appliesToWorkerTypes;
        private String jobId;
        private String laborAssignmentId;
        private String payRateId;
        private String payRate;
        private String payHours;
        private String payUnits;
        private String payAmount;
        private Boolean memoed;
        private OffsetDateTime lineDate;

        private UpdatePayComponentRequestBuilder(String checkId, String checkComponentId) {
            this.checkId = checkId;
            this.checkComponentId = checkComponentId;
        }

        /**
         * Set description
         * @param description Description (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set componentId
         * @param componentId The identifier of the pay component to add to the check. An overtime pay component can&#39;t be placed on a worker that is OT exempt. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder componentId(String componentId) {
            this.componentId = componentId;
            return this;
        }
        
        /**
         * Set checkComponentId
         * @param checkComponentId The unique identifier associated for the pay component on this check. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder checkComponentId(String checkComponentId) {
            this.checkComponentId = checkComponentId;
            return this;
        }
        
        /**
         * Set name
         * @param name The name given to the pay component (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set classificationType
         * @param classificationType The category that this component falls into. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder classificationType(String classificationType) {
            this.classificationType = classificationType;
            return this;
        }
        
        /**
         * Set effectOnPay
         * @param effectOnPay The effect that the pay component will have on the check amount. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder effectOnPay(String effectOnPay) {
            this.effectOnPay = effectOnPay;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date that the pay component is able to be applied on a check. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The date that the pay component is not available to be applied on a check moving forward. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set appliesToWorkerTypes
         * @param appliesToWorkerTypes Applies To WorkerTypes. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder appliesToWorkerTypes(List<String> appliesToWorkerTypes) {
            this.appliesToWorkerTypes = appliesToWorkerTypes;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId This is used optionally for overriding a job when it needs to be different then the workers default. This option is only available when the client has job costing. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set laborAssignmentId
         * @param laborAssignmentId This is used optionally for overriding a labor assignment when it needs to be different then the workers assignment distribution. This option is only available when the client has labor assignment. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder laborAssignmentId(String laborAssignmentId) {
            this.laborAssignmentId = laborAssignmentId;
            return this;
        }
        
        /**
         * Set payRateId
         * @param payRateId The rate identifier for the workers compensation (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder payRateId(String payRateId) {
            this.payRateId = payRateId;
            return this;
        }
        
        /**
         * Set payRate
         * @param payRate The rate amount that will be applied for this component. Used in conjunction with Hours or Units. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder payRate(String payRate) {
            this.payRate = payRate;
            return this;
        }
        
        /**
         * Set payHours
         * @param payHours The number of hours that will be applied for this component. Used in conjunction with rate. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder payHours(String payHours) {
            this.payHours = payHours;
            return this;
        }
        
        /**
         * Set payUnits
         * @param payUnits The number of units that will be applied for this component. Used in conjunction with rate. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder payUnits(String payUnits) {
            this.payUnits = payUnits;
            return this;
        }
        
        /**
         * Set payAmount
         * @param payAmount The flat amount to be applied for this component. Not used with Rate, Hours, or Units. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder payAmount(String payAmount) {
            this.payAmount = payAmount;
            return this;
        }
        
        /**
         * Set memoed
         * @param memoed This is used optionally for memoing the payHours or payUnits so that they are informational when using a payAmount. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder memoed(Boolean memoed) {
            this.memoed = memoed;
            return this;
        }
        
        /**
         * Set lineDate
         * @param lineDate This is used optionally for specifying a date that the pay component was generated on. (optional)
         * @return UpdatePayComponentRequestBuilder
         */
        public UpdatePayComponentRequestBuilder lineDate(OffsetDateTime lineDate) {
            this.lineDate = lineDate;
            return this;
        }
        
        /**
         * Build call for updatePayComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            return updatePayComponentCall(checkId, checkComponentId, payComponentResource2, _callback);
        }

        private PayComponentResource2 buildBodyParams() {
            PayComponentResource2 payComponentResource2 = new PayComponentResource2();
            payComponentResource2.description(this.description);
            payComponentResource2.componentId(this.componentId);
            payComponentResource2.checkComponentId(this.checkComponentId);
            payComponentResource2.name(this.name);
            payComponentResource2.classificationType(this.classificationType);
            if (this.effectOnPay != null)
            payComponentResource2.effectOnPay(PayComponentResource2.EffectOnPayEnum.fromValue(this.effectOnPay));
            payComponentResource2.startDate(this.startDate);
            payComponentResource2.endDate(this.endDate);
            if (this.appliesToWorkerTypes != null)
            payComponentResource2.appliesToWorkerTypes(PayComponentResource2.AppliesToWorkerTypesEnum.fromValue(this.appliesToWorkerTypes));
            payComponentResource2.jobId(this.jobId);
            payComponentResource2.laborAssignmentId(this.laborAssignmentId);
            payComponentResource2.payRateId(this.payRateId);
            payComponentResource2.payRate(this.payRate);
            payComponentResource2.payHours(this.payHours);
            payComponentResource2.payUnits(this.payUnits);
            payComponentResource2.payAmount(this.payAmount);
            payComponentResource2.memoed(this.memoed);
            payComponentResource2.lineDate(this.lineDate);
            return payComponentResource2;
        }

        /**
         * Execute updatePayComponent request
         * @return PayComponentResource2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PayComponentResource2 execute() throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            ApiResponse<PayComponentResource2> localVarResp = updatePayComponentWithHttpInfo(checkId, checkComponentId, payComponentResource2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePayComponent request with HTTP info returned
         * @return ApiResponse&lt;PayComponentResource2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayComponentResource2> executeWithHttpInfo() throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            return updatePayComponentWithHttpInfo(checkId, checkComponentId, payComponentResource2);
        }

        /**
         * Execute updatePayComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayComponentResource2> _callback) throws ApiException {
            PayComponentResource2 payComponentResource2 = buildBodyParams();
            return updatePayComponentAsync(checkId, checkComponentId, payComponentResource2, _callback);
        }
    }

    /**
     * Pay Component of a Check
     *  Update a single pay component on an individual unprocessed check.
     * @param checkId ID associated with desired check. (required)
     * @param checkComponentId ID associated with an Earning of this check (required)
     * @param payComponentResource2  (required)
     * @return UpdatePayComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayComponentRequestBuilder updatePayComponent(String checkId, String checkComponentId) throws IllegalArgumentException {
        if (checkId == null) throw new IllegalArgumentException("\"checkId\" is required but got null");
            

        if (checkComponentId == null) throw new IllegalArgumentException("\"checkComponentId\" is required but got null");
            

        return new UpdatePayComponentRequestBuilder(checkId, checkComponentId);
    }
}
