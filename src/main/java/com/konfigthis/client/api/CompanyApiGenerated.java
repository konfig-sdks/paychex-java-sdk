/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CalculationBase;
import com.konfigthis.client.model.CommunicationResource;
import com.konfigthis.client.model.CompanyResource;
import com.konfigthis.client.model.ContactTypeResource;
import com.konfigthis.client.model.CustomFieldsCategoryResource;
import com.konfigthis.client.model.CustomFieldsDropdownResource;
import com.konfigthis.client.model.CustomFieldsResource;
import com.konfigthis.client.model.FrequencyCombinationUnitResource;
import com.konfigthis.client.model.JobResource;
import com.konfigthis.client.model.JobSegmentsConfigResource;
import com.konfigthis.client.model.JobSegmentsResource;
import com.konfigthis.client.model.JobTitleResource;
import com.konfigthis.client.model.LaborAssignmentResource;
import com.konfigthis.client.model.LegalIdResource;
import com.konfigthis.client.model.Link;
import com.konfigthis.client.model.LocationResource;
import com.konfigthis.client.model.NameResource;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrganizationResource;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.SupervisorResource;
import com.konfigthis.client.model.WorkerResource;
import com.konfigthis.client.model.WorkerStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompanyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addInProgressWorkersCall(String companyId, WorkerResource workerResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/workers"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.workers.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.paychex.workers.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInProgressWorkersValidateBeforeCall(String companyId, WorkerResource workerResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addInProgressWorkers(Async)");
        }

        // verify the required parameter 'workerResource' is set
        if (workerResource == null) {
            throw new ApiException("Missing the required parameter 'workerResource' when calling addInProgressWorkers(Async)");
        }

        return addInProgressWorkersCall(companyId, workerResource, _callback);

    }


    private ApiResponse<WorkerResource> addInProgressWorkersWithHttpInfo(String companyId, WorkerResource workerResource) throws ApiException {
        okhttp3.Call localVarCall = addInProgressWorkersValidateBeforeCall(companyId, workerResource, null);
        Type localVarReturnType = new TypeToken<WorkerResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addInProgressWorkersAsync(String companyId, WorkerResource workerResource, final ApiCallback<WorkerResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInProgressWorkersValidateBeforeCall(companyId, workerResource, _callback);
        Type localVarReturnType = new TypeToken<WorkerResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddInProgressWorkersRequestBuilder {
        private final String companyId;
        private String workerId;
        private String employeeId;
        private String workerType;
        private String employmentType;
        private String exemptionType;
        private OffsetDateTime birthDate;
        private String sex;
        private String ethnicityCode;
        private OffsetDateTime hireDate;
        private String clockId;
        private NameResource name;
        private LegalIdResource legalId;
        private String laborAssignmentId;
        private String jobId;
        private String locationId;
        private JobTitleResource job;
        private OrganizationResource organization;
        private SupervisorResource supervisor;
        private Status currentStatus;
        private List<CommunicationResource> communications;
        private String workerCorrelationId;

        private AddInProgressWorkersRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set workerId
         * @param workerId The unique identifier associated with this worker representation. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder workerId(String workerId) {
            this.workerId = workerId;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId The workers employee identification information. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set workerType
         * @param workerType The type of worker. This data field cannot be PATCHED. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder workerType(String workerType) {
            this.workerType = workerType;
            return this;
        }
        
        /**
         * Set employmentType
         * @param employmentType The type of employment for the worker. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder employmentType(String employmentType) {
            this.employmentType = employmentType;
            return this;
        }
        
        /**
         * Set exemptionType
         * @param exemptionType The Overtime classification of the worker.This data field cannot be PATCHED for ACTIVE workers. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder exemptionType(String exemptionType) {
            this.exemptionType = exemptionType;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate The workers date of birth. It cannot be greater than today&#39;s date. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder birthDate(OffsetDateTime birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set sex
         * @param sex  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder sex(String sex) {
            this.sex = sex;
            return this;
        }
        
        /**
         * Set ethnicityCode
         * @param ethnicityCode Disclaimer:This parameter is not visible in Flex for the client. This data field cannot be PATCHED for ACTIVE workers. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder ethnicityCode(String ethnicityCode) {
            this.ethnicityCode = ethnicityCode;
            return this;
        }
        
        /**
         * Set hireDate
         * @param hireDate The date which the worker was hired. It cannot be PATCHED for ACTIVE workers. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder hireDate(OffsetDateTime hireDate) {
            this.hireDate = hireDate;
            return this;
        }
        
        /**
         * Set clockId
         * @param clockId The clock ID of the worker that can be an identification for other systems. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder clockId(String clockId) {
            this.clockId = clockId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder name(NameResource name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set legalId
         * @param legalId  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder legalId(LegalIdResource legalId) {
            this.legalId = legalId;
            return this;
        }
        
        /**
         * Set laborAssignmentId
         * @param laborAssignmentId The workers home labor assignment. This data field cannot be POSTED or PATCHED (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder laborAssignmentId(String laborAssignmentId) {
            this.laborAssignmentId = laborAssignmentId;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId The workers home job. This data field cannot be POSTED or PATCHED. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId The workers location. This data field cannot be POSTED or PATCHED. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder job(JobTitleResource job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder organization(OrganizationResource organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set supervisor
         * @param supervisor  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder supervisor(SupervisorResource supervisor) {
            this.supervisor = supervisor;
            return this;
        }
        
        /**
         * Set currentStatus
         * @param currentStatus  (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder currentStatus(Status currentStatus) {
            this.currentStatus = currentStatus;
            return this;
        }
        
        /**
         * Set communications
         * @param communications Worker Communications. This data field cannot be updated for worker endpoint. (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder communications(List<CommunicationResource> communications) {
            this.communications = communications;
            return this;
        }
        
        /**
         * Set workerCorrelationId
         * @param workerCorrelationId Id that you define which is used for error handling/responses.This data field is used while POSTING multiple IN_PROGRESS workers (optional)
         * @return AddInProgressWorkersRequestBuilder
         */
        public AddInProgressWorkersRequestBuilder workerCorrelationId(String workerCorrelationId) {
            this.workerCorrelationId = workerCorrelationId;
            return this;
        }
        
        /**
         * Build call for addInProgressWorkers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkerResource workerResource = buildBodyParams();
            return addInProgressWorkersCall(companyId, workerResource, _callback);
        }

        private WorkerResource buildBodyParams() {
            WorkerResource workerResource = new WorkerResource();
            workerResource.workerId(this.workerId);
            workerResource.employeeId(this.employeeId);
            if (this.workerType != null)
            workerResource.workerType(WorkerResource.WorkerTypeEnum.fromValue(this.workerType));
            if (this.employmentType != null)
            workerResource.employmentType(WorkerResource.EmploymentTypeEnum.fromValue(this.employmentType));
            if (this.exemptionType != null)
            workerResource.exemptionType(WorkerResource.ExemptionTypeEnum.fromValue(this.exemptionType));
            workerResource.birthDate(this.birthDate);
            if (this.sex != null)
            workerResource.sex(WorkerResource.SexEnum.fromValue(this.sex));
            if (this.ethnicityCode != null)
            workerResource.ethnicityCode(WorkerResource.EthnicityCodeEnum.fromValue(this.ethnicityCode));
            workerResource.hireDate(this.hireDate);
            workerResource.clockId(this.clockId);
            workerResource.name(this.name);
            workerResource.legalId(this.legalId);
            workerResource.laborAssignmentId(this.laborAssignmentId);
            workerResource.jobId(this.jobId);
            workerResource.locationId(this.locationId);
            workerResource.job(this.job);
            workerResource.organization(this.organization);
            workerResource.supervisor(this.supervisor);
            workerResource.currentStatus(this.currentStatus);
            workerResource.communications(this.communications);
            workerResource.workerCorrelationId(this.workerCorrelationId);
            return workerResource;
        }

        /**
         * Execute addInProgressWorkers request
         * @return WorkerResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerResource execute() throws ApiException {
            WorkerResource workerResource = buildBodyParams();
            ApiResponse<WorkerResource> localVarResp = addInProgressWorkersWithHttpInfo(companyId, workerResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addInProgressWorkers request with HTTP info returned
         * @return ApiResponse&lt;WorkerResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerResource> executeWithHttpInfo() throws ApiException {
            WorkerResource workerResource = buildBodyParams();
            return addInProgressWorkersWithHttpInfo(companyId, workerResource);
        }

        /**
         * Execute addInProgressWorkers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerResource> _callback) throws ApiException {
            WorkerResource workerResource = buildBodyParams();
            return addInProgressWorkersAsync(companyId, workerResource, _callback);
        }
    }

    /**
     * In Progress Workers
     * Add one or more workers to a specific company that your application has been granted access to. These workers will be added with an IN_PROGRESS status assigned to them.  In_Progress workers will pre-populated within Paychex Flex and will require someone to complete them to be fully available with the Flex platform.  Paychex Flex UI will hold a majority of validation, rules, and enforced required fields based on the clients configuration.  Required fields are givenName, familyName, &amp; workerType (when adding multiple workers at a time you will need to also include a \&quot;workerCorrelationId\&quot; data element on each worker, that will be used as an identifier in our responses). Optionally you can include a workers communications object within the worker.  Once generated the IN_PROGRESS worker can have their communications, Compensation and Federal Taxes POSTed and PATCHed using the generated workerId.
     * @param companyId The id assigned to the company that workers are being requested for. (required)
     * @param workerResource  (required)
     * @return AddInProgressWorkersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddInProgressWorkersRequestBuilder addInProgressWorkers(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new AddInProgressWorkersRequestBuilder(companyId);
    }
    private okhttp3.Call addJobCall(String companyId, JobResource jobResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobs"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.jobs.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.paychex.company.jobs.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addJobValidateBeforeCall(String companyId, JobResource jobResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addJob(Async)");
        }

        // verify the required parameter 'jobResource' is set
        if (jobResource == null) {
            throw new ApiException("Missing the required parameter 'jobResource' when calling addJob(Async)");
        }

        return addJobCall(companyId, jobResource, _callback);

    }


    private ApiResponse<JobResource> addJobWithHttpInfo(String companyId, JobResource jobResource) throws ApiException {
        okhttp3.Call localVarCall = addJobValidateBeforeCall(companyId, jobResource, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addJobAsync(String companyId, JobResource jobResource, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addJobValidateBeforeCall(companyId, jobResource, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddJobRequestBuilder {
        private final String companyId;
        private String jobId;
        private String jobCorrelationId;
        private String jobName;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private List<Link> links;
        private JobSegmentsResource jobNumber;

        private AddJobRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set jobId
         * @param jobId The unique identifier associated with this job. (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set jobCorrelationId
         * @param jobCorrelationId Id that you define which is used for error handling/responses. (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder jobCorrelationId(String jobCorrelationId) {
            this.jobCorrelationId = jobCorrelationId;
            return this;
        }
        
        /**
         * Set jobName
         * @param jobName The name of the job. (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder jobName(String jobName) {
            this.jobName = jobName;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date associated with this job. (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date associated with this job. (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set jobNumber
         * @param jobNumber  (optional)
         * @return AddJobRequestBuilder
         */
        public AddJobRequestBuilder jobNumber(JobSegmentsResource jobNumber) {
            this.jobNumber = jobNumber;
            return this;
        }
        
        /**
         * Build call for addJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobResource jobResource = buildBodyParams();
            return addJobCall(companyId, jobResource, _callback);
        }

        private JobResource buildBodyParams() {
            JobResource jobResource = new JobResource();
            jobResource.jobId(this.jobId);
            jobResource.jobCorrelationId(this.jobCorrelationId);
            jobResource.jobName(this.jobName);
            jobResource.startDate(this.startDate);
            jobResource.endDate(this.endDate);
            jobResource.links(this.links);
            jobResource.jobNumber(this.jobNumber);
            return jobResource;
        }

        /**
         * Execute addJob request
         * @return JobResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobResource execute() throws ApiException {
            JobResource jobResource = buildBodyParams();
            ApiResponse<JobResource> localVarResp = addJobWithHttpInfo(companyId, jobResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addJob request with HTTP info returned
         * @return ApiResponse&lt;JobResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobResource> executeWithHttpInfo() throws ApiException {
            JobResource jobResource = buildBodyParams();
            return addJobWithHttpInfo(companyId, jobResource);
        }

        /**
         * Execute addJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobResource> _callback) throws ApiException {
            JobResource jobResource = buildBodyParams();
            return addJobAsync(companyId, jobResource, _callback);
        }
    }

    /**
     * Company Job
     * Add a company level job. If a client has their job numbering structured in 2-3 separate &#39;segments&#39;, you may need to first do a GET on the jobsegements endpoint, so you can see how many segments and the character length of each segment, as well as the name of those segments, which you will need to have before you POST.
     * @param companyId The ID of the company. (required)
     * @param jobResource  (required)
     * @return AddJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AddJobRequestBuilder addJob(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new AddJobRequestBuilder(companyId);
    }
    private okhttp3.Call createCustomFieldAtCompanyLevelCall(String companyId, CustomFieldsResource customFieldsResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfields"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfields.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.company.customfields.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldAtCompanyLevelValidateBeforeCall(String companyId, CustomFieldsResource customFieldsResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createCustomFieldAtCompanyLevel(Async)");
        }

        // verify the required parameter 'customFieldsResource' is set
        if (customFieldsResource == null) {
            throw new ApiException("Missing the required parameter 'customFieldsResource' when calling createCustomFieldAtCompanyLevel(Async)");
        }

        return createCustomFieldAtCompanyLevelCall(companyId, customFieldsResource, _callback);

    }


    private ApiResponse<CustomFieldsResource> createCustomFieldAtCompanyLevelWithHttpInfo(String companyId, CustomFieldsResource customFieldsResource) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldAtCompanyLevelValidateBeforeCall(companyId, customFieldsResource, null);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomFieldAtCompanyLevelAsync(String companyId, CustomFieldsResource customFieldsResource, final ApiCallback<CustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldAtCompanyLevelValidateBeforeCall(companyId, customFieldsResource, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomFieldAtCompanyLevelRequestBuilder {
        private final String companyId;
        private String customFieldId;
        private String customFieldName;
        private String categoryId;
        private Boolean required;
        private Boolean checkStub;
        private Boolean employeeEditable;
        private String type;
        private Boolean booleanValue;
        private List<Link> links;
        private OffsetDateTime dateValue;
        private String textValue;
        private Double maxTextLength;
        private Double numericValue;
        private List<CustomFieldsDropdownResource> dropdown;

        private CreateCustomFieldAtCompanyLevelRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set customFieldId
         * @param customFieldId The unique identifier that is autogenerated when a custom field is created (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder customFieldId(String customFieldId) {
            this.customFieldId = customFieldId;
            return this;
        }
        
        /**
         * Set customFieldName
         * @param customFieldName The name of the custom field (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder customFieldName(String customFieldName) {
            this.customFieldName = customFieldName;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId The unique identifier that is autogenerated when creating a category (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set required
         * @param required Where to indicate if the custom field is required on the worker where true &#x3D; required and false &#x3D; not required (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set checkStub
         * @param checkStub Where to indicate if the custom field is required on the worker&#39;s pay stub, where true &#x3D; required and false &#x3D; not required (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder checkStub(Boolean checkStub) {
            this.checkStub = checkStub;
            return this;
        }
        
        /**
         * Set employeeEditable
         * @param employeeEditable Where to indicate if the custom field is able to be edited by the employee, where true &#x3D; required and false &#x3D; not required (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder employeeEditable(Boolean employeeEditable) {
            this.employeeEditable = employeeEditable;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of field the custom field is. (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set booleanValue
         * @param booleanValue The value for BOOLEAN type (true / false) (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder booleanValue(Boolean booleanValue) {
            this.booleanValue = booleanValue;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set dateValue
         * @param dateValue The value for DATE type , example : 2012-02-01T05:00:00Z (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder dateValue(OffsetDateTime dateValue) {
            this.dateValue = dateValue;
            return this;
        }
        
        /**
         * Set textValue
         * @param textValue The value for TEXT type (any text, alphanumeric, special characters allowed) (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder textValue(String textValue) {
            this.textValue = textValue;
            return this;
        }
        
        /**
         * Set maxTextLength
         * @param maxTextLength The maximum allowed value for textValue (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder maxTextLength(Double maxTextLength) {
            this.maxTextLength = maxTextLength;
            return this;
        }
        
        /**
         * Set numericValue
         * @param numericValue Numeric data type can have three formats namely - whole number, second decimal place and fourth decimal place, example: 12 , 12.34 or 12.3456 (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder numericValue(Double numericValue) {
            this.numericValue = numericValue;
            return this;
        }
        
        /**
         * Set dropdown
         * @param dropdown  (optional)
         * @return CreateCustomFieldAtCompanyLevelRequestBuilder
         */
        public CreateCustomFieldAtCompanyLevelRequestBuilder dropdown(List<CustomFieldsDropdownResource> dropdown) {
            this.dropdown = dropdown;
            return this;
        }
        
        /**
         * Build call for createCustomFieldAtCompanyLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            return createCustomFieldAtCompanyLevelCall(companyId, customFieldsResource, _callback);
        }

        private CustomFieldsResource buildBodyParams() {
            CustomFieldsResource customFieldsResource = new CustomFieldsResource();
            customFieldsResource.customFieldId(this.customFieldId);
            customFieldsResource.customFieldName(this.customFieldName);
            customFieldsResource.categoryId(this.categoryId);
            customFieldsResource.required(this.required);
            customFieldsResource.checkStub(this.checkStub);
            customFieldsResource.employeeEditable(this.employeeEditable);
            if (this.type != null)
            customFieldsResource.type(CustomFieldsResource.TypeEnum.fromValue(this.type));
            customFieldsResource.booleanValue(this.booleanValue);
            customFieldsResource.links(this.links);
            customFieldsResource.dateValue(this.dateValue);
            customFieldsResource.textValue(this.textValue);
            customFieldsResource.maxTextLength(this.maxTextLength);
            customFieldsResource.numericValue(this.numericValue);
            customFieldsResource.dropdown(this.dropdown);
            return customFieldsResource;
        }

        /**
         * Execute createCustomFieldAtCompanyLevel request
         * @return CustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsResource execute() throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            ApiResponse<CustomFieldsResource> localVarResp = createCustomFieldAtCompanyLevelWithHttpInfo(companyId, customFieldsResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomFieldAtCompanyLevel request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsResource> executeWithHttpInfo() throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            return createCustomFieldAtCompanyLevelWithHttpInfo(companyId, customFieldsResource);
        }

        /**
         * Execute createCustomFieldAtCompanyLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsResource> _callback) throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            return createCustomFieldAtCompanyLevelAsync(companyId, customFieldsResource, _callback);
        }
    }

    /**
     * Custom Field
     * Create CustomFields at the company level which a company could be assigned.
     * @param companyId ID associated with desired company. (required)
     * @param customFieldsResource  (required)
     * @return CreateCustomFieldAtCompanyLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFieldAtCompanyLevelRequestBuilder createCustomFieldAtCompanyLevel(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateCustomFieldAtCompanyLevelRequestBuilder(companyId);
    }
    private okhttp3.Call createCustomFieldCategoryCall(String companyId, CustomFieldsCategoryResource customFieldsCategoryResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsCategoryResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfieldscategories"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfieldscategories.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.company.customfieldscategories.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldCategoryValidateBeforeCall(String companyId, CustomFieldsCategoryResource customFieldsCategoryResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createCustomFieldCategory(Async)");
        }

        // verify the required parameter 'customFieldsCategoryResource' is set
        if (customFieldsCategoryResource == null) {
            throw new ApiException("Missing the required parameter 'customFieldsCategoryResource' when calling createCustomFieldCategory(Async)");
        }

        return createCustomFieldCategoryCall(companyId, customFieldsCategoryResource, _callback);

    }


    private ApiResponse<CustomFieldsCategoryResource> createCustomFieldCategoryWithHttpInfo(String companyId, CustomFieldsCategoryResource customFieldsCategoryResource) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldCategoryValidateBeforeCall(companyId, customFieldsCategoryResource, null);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomFieldCategoryAsync(String companyId, CustomFieldsCategoryResource customFieldsCategoryResource, final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldCategoryValidateBeforeCall(companyId, customFieldsCategoryResource, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomFieldCategoryRequestBuilder {
        private final String companyId;
        private String categoryId;
        private String categoryName;
        private List<Link> links;

        private CreateCustomFieldCategoryRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set categoryId
         * @param categoryId The unique identifier that is autogenerated when creating a category (optional)
         * @return CreateCustomFieldCategoryRequestBuilder
         */
        public CreateCustomFieldCategoryRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set categoryName
         * @param categoryName The name of the Category (optional)
         * @return CreateCustomFieldCategoryRequestBuilder
         */
        public CreateCustomFieldCategoryRequestBuilder categoryName(String categoryName) {
            this.categoryName = categoryName;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return CreateCustomFieldCategoryRequestBuilder
         */
        public CreateCustomFieldCategoryRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for createCustomFieldCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            return createCustomFieldCategoryCall(companyId, customFieldsCategoryResource, _callback);
        }

        private CustomFieldsCategoryResource buildBodyParams() {
            CustomFieldsCategoryResource customFieldsCategoryResource = new CustomFieldsCategoryResource();
            customFieldsCategoryResource.categoryId(this.categoryId);
            customFieldsCategoryResource.categoryName(this.categoryName);
            customFieldsCategoryResource.links(this.links);
            return customFieldsCategoryResource;
        }

        /**
         * Execute createCustomFieldCategory request
         * @return CustomFieldsCategoryResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsCategoryResource execute() throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            ApiResponse<CustomFieldsCategoryResource> localVarResp = createCustomFieldCategoryWithHttpInfo(companyId, customFieldsCategoryResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomFieldCategory request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsCategoryResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsCategoryResource> executeWithHttpInfo() throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            return createCustomFieldCategoryWithHttpInfo(companyId, customFieldsCategoryResource);
        }

        /**
         * Execute createCustomFieldCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            return createCustomFieldCategoryAsync(companyId, customFieldsCategoryResource, _callback);
        }
    }

    /**
     * Custom Fields Category
     * Create CustomFieldsCategory at the company level which a company could be assigned.
     * @param companyId ID associated with desired company. (required)
     * @param customFieldsCategoryResource  (required)
     * @return CreateCustomFieldCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFieldCategoryRequestBuilder createCustomFieldCategory(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateCustomFieldCategoryRequestBuilder(companyId);
    }
    private okhttp3.Call deleteCustomFieldCall(String companyId, String customfieldid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfields/{customfieldid}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "customfieldid" + "}", localVarApiClient.escapeString(customfieldid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldValidateBeforeCall(String companyId, String customfieldid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteCustomField(Async)");
        }

        // verify the required parameter 'customfieldid' is set
        if (customfieldid == null) {
            throw new ApiException("Missing the required parameter 'customfieldid' when calling deleteCustomField(Async)");
        }

        return deleteCustomFieldCall(companyId, customfieldid, _callback);

    }


    private ApiResponse<Void> deleteCustomFieldWithHttpInfo(String companyId, String customfieldid) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(companyId, customfieldid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomFieldAsync(String companyId, String customfieldid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(companyId, customfieldid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomFieldRequestBuilder {
        private final String companyId;
        private final String customfieldid;

        private DeleteCustomFieldRequestBuilder(String companyId, String customfieldid) {
            this.companyId = companyId;
            this.customfieldid = customfieldid;
        }

        /**
         * Build call for deleteCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomFieldCall(companyId, customfieldid, _callback);
        }


        /**
         * Execute deleteCustomField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomFieldWithHttpInfo(companyId, customfieldid);
        }

        /**
         * Execute deleteCustomField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomFieldWithHttpInfo(companyId, customfieldid);
        }

        /**
         * Execute deleteCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomFieldAsync(companyId, customfieldid, _callback);
        }
    }

    /**
     * Custom Field
     * Delete CustomField at the company level.
     * @param companyId ID associated with desired company. (required)
     * @param customfieldid ID associated with desired custom field. (required)
     * @return DeleteCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomFieldRequestBuilder deleteCustomField(String companyId, String customfieldid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (customfieldid == null) throw new IllegalArgumentException("\"customfieldid\" is required but got null");
            

        return new DeleteCustomFieldRequestBuilder(companyId, customfieldid);
    }
    private okhttp3.Call deleteCustomFieldsCategoryCall(String companyId, String categoryid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfieldscategories/{categoryid}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "categoryid" + "}", localVarApiClient.escapeString(categoryid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldsCategoryValidateBeforeCall(String companyId, String categoryid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteCustomFieldsCategory(Async)");
        }

        // verify the required parameter 'categoryid' is set
        if (categoryid == null) {
            throw new ApiException("Missing the required parameter 'categoryid' when calling deleteCustomFieldsCategory(Async)");
        }

        return deleteCustomFieldsCategoryCall(companyId, categoryid, _callback);

    }


    private ApiResponse<Void> deleteCustomFieldsCategoryWithHttpInfo(String companyId, String categoryid) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldsCategoryValidateBeforeCall(companyId, categoryid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomFieldsCategoryAsync(String companyId, String categoryid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldsCategoryValidateBeforeCall(companyId, categoryid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomFieldsCategoryRequestBuilder {
        private final String companyId;
        private final String categoryid;

        private DeleteCustomFieldsCategoryRequestBuilder(String companyId, String categoryid) {
            this.companyId = companyId;
            this.categoryid = categoryid;
        }

        /**
         * Build call for deleteCustomFieldsCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomFieldsCategoryCall(companyId, categoryid, _callback);
        }


        /**
         * Execute deleteCustomFieldsCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomFieldsCategoryWithHttpInfo(companyId, categoryid);
        }

        /**
         * Execute deleteCustomFieldsCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomFieldsCategoryWithHttpInfo(companyId, categoryid);
        }

        /**
         * Execute deleteCustomFieldsCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomFieldsCategoryAsync(companyId, categoryid, _callback);
        }
    }

    /**
     * Custom Fields Category
     * Delete CustomFieldsCategory at the company level.
     * @param companyId ID associated with desired company. (required)
     * @param categoryid ID associated with desired category. (required)
     * @return DeleteCustomFieldsCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomFieldsCategoryRequestBuilder deleteCustomFieldsCategory(String companyId, String categoryid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (categoryid == null) throw new IllegalArgumentException("\"categoryid\" is required but got null");
            

        return new DeleteCustomFieldsCategoryRequestBuilder(companyId, categoryid);
    }
    private okhttp3.Call getCalculationBasesCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/calculationbases"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.calculationbases.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculationBasesValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCalculationBases(Async)");
        }

        return getCalculationBasesCall(companyId, _callback);

    }


    private ApiResponse<CalculationBase> getCalculationBasesWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getCalculationBasesValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<CalculationBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCalculationBasesAsync(String companyId, final ApiCallback<CalculationBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculationBasesValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<CalculationBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCalculationBasesRequestBuilder {
        private final String companyId;

        private GetCalculationBasesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getCalculationBases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCalculationBasesCall(companyId, _callback);
        }


        /**
         * Execute getCalculationBases request
         * @return CalculationBase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CalculationBase execute() throws ApiException {
            ApiResponse<CalculationBase> localVarResp = getCalculationBasesWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCalculationBases request with HTTP info returned
         * @return ApiResponse&lt;CalculationBase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculationBase> executeWithHttpInfo() throws ApiException {
            return getCalculationBasesWithHttpInfo(companyId);
        }

        /**
         * Execute getCalculationBases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculationBase> _callback) throws ApiException {
            return getCalculationBasesAsync(companyId, _callback);
        }
    }

    /**
     * Company Calculation Bases
     * Array of calculation bases that are used with a worker pay components that are not FLAT_DOLLAR_AMOUNT allow you to determine what to apply the calculation against when determining the amount during the pay run.
     * @param companyId The ID of the company. (required)
     * @return GetCalculationBasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCalculationBasesRequestBuilder getCalculationBases(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCalculationBasesRequestBuilder(companyId);
    }
    private okhttp3.Call getContactTypesCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/contacttypes"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.contacttypes.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactTypesValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getContactTypes(Async)");
        }

        return getContactTypesCall(companyId, _callback);

    }


    private ApiResponse<ContactTypeResource> getContactTypesWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getContactTypesValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<ContactTypeResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContactTypesAsync(String companyId, final ApiCallback<ContactTypeResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactTypesValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<ContactTypeResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContactTypesRequestBuilder {
        private final String companyId;

        private GetContactTypesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getContactTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContactTypesCall(companyId, _callback);
        }


        /**
         * Execute getContactTypes request
         * @return ContactTypeResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ContactTypeResource execute() throws ApiException {
            ApiResponse<ContactTypeResource> localVarResp = getContactTypesWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContactTypes request with HTTP info returned
         * @return ApiResponse&lt;ContactTypeResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactTypeResource> executeWithHttpInfo() throws ApiException {
            return getContactTypesWithHttpInfo(companyId);
        }

        /**
         * Execute getContactTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactTypeResource> _callback) throws ApiException {
            return getContactTypesAsync(companyId, _callback);
        }
    }

    /**
     * Company Contact Types
     * Information about contact types that your application has been granted access to.
     * @param companyId ID associated with desired company. (required)
     * @return GetContactTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetContactTypesRequestBuilder getContactTypes(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetContactTypesRequestBuilder(companyId);
    }
    private okhttp3.Call getCustomFieldCall(String companyId, String customFieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfields/{customFieldId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "customFieldId" + "}", localVarApiClient.escapeString(customFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfield.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldValidateBeforeCall(String companyId, String customFieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCustomField(Async)");
        }

        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling getCustomField(Async)");
        }

        return getCustomFieldCall(companyId, customFieldId, _callback);

    }


    private ApiResponse<CustomFieldsResource> getCustomFieldWithHttpInfo(String companyId, String customFieldId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(companyId, customFieldId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldAsync(String companyId, String customFieldId, final ApiCallback<CustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(companyId, customFieldId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldRequestBuilder {
        private final String companyId;
        private final String customFieldId;

        private GetCustomFieldRequestBuilder(String companyId, String customFieldId) {
            this.companyId = companyId;
            this.customFieldId = customFieldId;
        }

        /**
         * Build call for getCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldCall(companyId, customFieldId, _callback);
        }


        /**
         * Execute getCustomField request
         * @return CustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsResource execute() throws ApiException {
            ApiResponse<CustomFieldsResource> localVarResp = getCustomFieldWithHttpInfo(companyId, customFieldId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomField request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsResource> executeWithHttpInfo() throws ApiException {
            return getCustomFieldWithHttpInfo(companyId, customFieldId);
        }

        /**
         * Execute getCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsResource> _callback) throws ApiException {
            return getCustomFieldAsync(companyId, customFieldId, _callback);
        }
    }

    /**
     * Custom Field
     * Information about a single CustomField.
     * @param companyId ID associated with desired company. (required)
     * @param customFieldId ID associated with desired custom field. (required)
     * @return GetCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldRequestBuilder getCustomField(String companyId, String customFieldId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
            

        return new GetCustomFieldRequestBuilder(companyId, customFieldId);
    }
    private okhttp3.Call getCustomFieldCategoriesCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfieldscategories"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfieldscategories.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldCategoriesValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCustomFieldCategories(Async)");
        }

        return getCustomFieldCategoriesCall(companyId, _callback);

    }


    private ApiResponse<CustomFieldsCategoryResource> getCustomFieldCategoriesWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldCategoriesValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldCategoriesAsync(String companyId, final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldCategoriesValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldCategoriesRequestBuilder {
        private final String companyId;

        private GetCustomFieldCategoriesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getCustomFieldCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldCategoriesCall(companyId, _callback);
        }


        /**
         * Execute getCustomFieldCategories request
         * @return CustomFieldsCategoryResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsCategoryResource execute() throws ApiException {
            ApiResponse<CustomFieldsCategoryResource> localVarResp = getCustomFieldCategoriesWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFieldCategories request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsCategoryResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsCategoryResource> executeWithHttpInfo() throws ApiException {
            return getCustomFieldCategoriesWithHttpInfo(companyId);
        }

        /**
         * Execute getCustomFieldCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {
            return getCustomFieldCategoriesAsync(companyId, _callback);
        }
    }

    /**
     * Custom Fields Categories
     * Array of CustomFieldsCategories Configured at the company level 
     * @param companyId ID associated with desired company. (required)
     * @return GetCustomFieldCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldCategoriesRequestBuilder getCustomFieldCategories(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCustomFieldCategoriesRequestBuilder(companyId);
    }
    private okhttp3.Call getCustomFieldsCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfields"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfields.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(companyId, _callback);

    }


    private ApiResponse<CustomFieldsResource> getCustomFieldsWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(String companyId, final ApiCallback<CustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private final String companyId;

        private GetCustomFieldsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(companyId, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return CustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsResource execute() throws ApiException {
            ApiResponse<CustomFieldsResource> localVarResp = getCustomFieldsWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsResource> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(companyId);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsResource> _callback) throws ApiException {
            return getCustomFieldsAsync(companyId, _callback);
        }
    }

    /**
     * Custom Fields
     * Array of customFields Configured at the company level 
     * @param companyId ID associated with desired company. (required)
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCustomFieldsRequestBuilder(companyId);
    }
    private okhttp3.Call getCustomFieldsCategoryCall(String companyId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfieldscategories/{categoryId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfieldscategory.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsCategoryValidateBeforeCall(String companyId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCustomFieldsCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCustomFieldsCategory(Async)");
        }

        return getCustomFieldsCategoryCall(companyId, categoryId, _callback);

    }


    private ApiResponse<CustomFieldsCategoryResource> getCustomFieldsCategoryWithHttpInfo(String companyId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsCategoryValidateBeforeCall(companyId, categoryId, null);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsCategoryAsync(String companyId, String categoryId, final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsCategoryValidateBeforeCall(companyId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsCategoryRequestBuilder {
        private final String companyId;
        private final String categoryId;

        private GetCustomFieldsCategoryRequestBuilder(String companyId, String categoryId) {
            this.companyId = companyId;
            this.categoryId = categoryId;
        }

        /**
         * Build call for getCustomFieldsCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCategoryCall(companyId, categoryId, _callback);
        }


        /**
         * Execute getCustomFieldsCategory request
         * @return CustomFieldsCategoryResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsCategoryResource execute() throws ApiException {
            ApiResponse<CustomFieldsCategoryResource> localVarResp = getCustomFieldsCategoryWithHttpInfo(companyId, categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFieldsCategory request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsCategoryResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsCategoryResource> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsCategoryWithHttpInfo(companyId, categoryId);
        }

        /**
         * Execute getCustomFieldsCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {
            return getCustomFieldsCategoryAsync(companyId, categoryId, _callback);
        }
    }

    /**
     * Custom Fields Category
     * Information about a single CustomFieldsCategory.
     * @param companyId ID associated with desired company. (required)
     * @param categoryId ID associated with desired category. (required)
     * @return GetCustomFieldsCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsCategoryRequestBuilder getCustomFieldsCategory(String companyId, String categoryId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetCustomFieldsCategoryRequestBuilder(companyId, categoryId);
    }
    private okhttp3.Call getInformationCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getInformation(Async)");
        }

        return getInformationCall(companyId, _callback);

    }


    private ApiResponse<CompanyResource> getInformationWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<CompanyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String companyId, final ApiCallback<CompanyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<CompanyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final String companyId;

        private GetInformationRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(companyId, _callback);
        }


        /**
         * Execute getInformation request
         * @return CompanyResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public CompanyResource execute() throws ApiException {
            ApiResponse<CompanyResource> localVarResp = getInformationWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;CompanyResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyResource> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(companyId);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyResource> _callback) throws ApiException {
            return getInformationAsync(companyId, _callback);
        }
    }

    /**
     * A Company
     * Information about a single company that your application has access to.
     * @param companyId The ID of the company. (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetInformationRequestBuilder(companyId);
    }
    private okhttp3.Call getJobInformationCall(String companyId, String jobId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobs/{jobId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.job.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobInformationValidateBeforeCall(String companyId, String jobId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getJobInformation(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJobInformation(Async)");
        }

        return getJobInformationCall(companyId, jobId, asof, _callback);

    }


    private ApiResponse<JobResource> getJobInformationWithHttpInfo(String companyId, String jobId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getJobInformationValidateBeforeCall(companyId, jobId, asof, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobInformationAsync(String companyId, String jobId, String asof, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobInformationValidateBeforeCall(companyId, jobId, asof, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobInformationRequestBuilder {
        private final String companyId;
        private final String jobId;
        private String asof;

        private GetJobInformationRequestBuilder(String companyId, String jobId) {
            this.companyId = companyId;
            this.jobId = jobId;
        }

        /**
         * Set asof
         * @param asof Returns job as of the date used in the request. (optional)
         * @return GetJobInformationRequestBuilder
         */
        public GetJobInformationRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getJobInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobInformationCall(companyId, jobId, asof, _callback);
        }


        /**
         * Execute getJobInformation request
         * @return JobResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobResource execute() throws ApiException {
            ApiResponse<JobResource> localVarResp = getJobInformationWithHttpInfo(companyId, jobId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobInformation request with HTTP info returned
         * @return ApiResponse&lt;JobResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobResource> executeWithHttpInfo() throws ApiException {
            return getJobInformationWithHttpInfo(companyId, jobId, asof);
        }

        /**
         * Execute getJobInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobResource> _callback) throws ApiException {
            return getJobInformationAsync(companyId, jobId, asof, _callback);
        }
    }

    /**
     * Company Job
     * Information about a single Job.
     * @param companyId The ID of the company. (required)
     * @param jobId The ID of the job. (required)
     * @return GetJobInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetJobInformationRequestBuilder getJobInformation(String companyId, String jobId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetJobInformationRequestBuilder(companyId, jobId);
    }
    private okhttp3.Call getJobSegmentStructureSetupCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobsegments"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.jobsegments.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobSegmentStructureSetupValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getJobSegmentStructureSetup(Async)");
        }

        return getJobSegmentStructureSetupCall(companyId, _callback);

    }


    private ApiResponse<JobSegmentsConfigResource> getJobSegmentStructureSetupWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getJobSegmentStructureSetupValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<JobSegmentsConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobSegmentStructureSetupAsync(String companyId, final ApiCallback<JobSegmentsConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobSegmentStructureSetupValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<JobSegmentsConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobSegmentStructureSetupRequestBuilder {
        private final String companyId;

        private GetJobSegmentStructureSetupRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getJobSegmentStructureSetup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobSegmentStructureSetupCall(companyId, _callback);
        }


        /**
         * Execute getJobSegmentStructureSetup request
         * @return JobSegmentsConfigResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobSegmentsConfigResource execute() throws ApiException {
            ApiResponse<JobSegmentsConfigResource> localVarResp = getJobSegmentStructureSetupWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobSegmentStructureSetup request with HTTP info returned
         * @return ApiResponse&lt;JobSegmentsConfigResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobSegmentsConfigResource> executeWithHttpInfo() throws ApiException {
            return getJobSegmentStructureSetupWithHttpInfo(companyId);
        }

        /**
         * Execute getJobSegmentStructureSetup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobSegmentsConfigResource> _callback) throws ApiException {
            return getJobSegmentStructureSetupAsync(companyId, _callback);
        }
    }

    /**
     * Company Job Segments
     * Retrieve job segment structure setup for this client. This endpoint is only available if the client has their job numbering set up in &#39;2-3 separate &#39;segments&#39;.  The response will give you back the exact character lengths and the segment names so you are able to POST.
     * @param companyId The ID of the company. (required)
     * @return GetJobSegmentStructureSetupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetJobSegmentStructureSetupRequestBuilder getJobSegmentStructureSetup(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetJobSegmentStructureSetupRequestBuilder(companyId);
    }
    private okhttp3.Call getJobTitleCall(String companyId, String workerJobTitleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobtitles/{jobTitleId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "workerJobTitleId" + "}", localVarApiClient.escapeString(workerJobTitleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.jobtitle.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobTitleValidateBeforeCall(String companyId, String workerJobTitleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getJobTitle(Async)");
        }

        // verify the required parameter 'workerJobTitleId' is set
        if (workerJobTitleId == null) {
            throw new ApiException("Missing the required parameter 'workerJobTitleId' when calling getJobTitle(Async)");
        }

        return getJobTitleCall(companyId, workerJobTitleId, _callback);

    }


    private ApiResponse<JobTitleResource> getJobTitleWithHttpInfo(String companyId, String workerJobTitleId) throws ApiException {
        okhttp3.Call localVarCall = getJobTitleValidateBeforeCall(companyId, workerJobTitleId, null);
        Type localVarReturnType = new TypeToken<JobTitleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobTitleAsync(String companyId, String workerJobTitleId, final ApiCallback<JobTitleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobTitleValidateBeforeCall(companyId, workerJobTitleId, _callback);
        Type localVarReturnType = new TypeToken<JobTitleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobTitleRequestBuilder {
        private final String companyId;
        private final String workerJobTitleId;

        private GetJobTitleRequestBuilder(String companyId, String workerJobTitleId) {
            this.companyId = companyId;
            this.workerJobTitleId = workerJobTitleId;
        }

        /**
         * Build call for getJobTitle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobTitleCall(companyId, workerJobTitleId, _callback);
        }


        /**
         * Execute getJobTitle request
         * @return JobTitleResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobTitleResource execute() throws ApiException {
            ApiResponse<JobTitleResource> localVarResp = getJobTitleWithHttpInfo(companyId, workerJobTitleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobTitle request with HTTP info returned
         * @return ApiResponse&lt;JobTitleResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobTitleResource> executeWithHttpInfo() throws ApiException {
            return getJobTitleWithHttpInfo(companyId, workerJobTitleId);
        }

        /**
         * Execute getJobTitle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobTitleResource> _callback) throws ApiException {
            return getJobTitleAsync(companyId, workerJobTitleId, _callback);
        }
    }

    /**
     * Job Title
     * Information about a single Job Title.
     * @param companyId The ID of the company. (required)
     * @param workerJobTitleId The ID of the worker job title. (required)
     * @return GetJobTitleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetJobTitleRequestBuilder getJobTitle(String companyId, String workerJobTitleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (workerJobTitleId == null) throw new IllegalArgumentException("\"workerJobTitleId\" is required but got null");
            

        return new GetJobTitleRequestBuilder(companyId, workerJobTitleId);
    }
    private okhttp3.Call getJobsCall(String companyId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobs"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.jobs.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String companyId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getJobs(Async)");
        }

        return getJobsCall(companyId, asof, _callback);

    }


    private ApiResponse<JobResource> getJobsWithHttpInfo(String companyId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(companyId, asof, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobsAsync(String companyId, String asof, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(companyId, asof, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobsRequestBuilder {
        private final String companyId;
        private String asof;

        private GetJobsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set asof
         * @param asof Returns all jobs as of the date used in the request. (optional)
         * @return GetJobsRequestBuilder
         */
        public GetJobsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobsCall(companyId, asof, _callback);
        }


        /**
         * Execute getJobs request
         * @return JobResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobResource execute() throws ApiException {
            ApiResponse<JobResource> localVarResp = getJobsWithHttpInfo(companyId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobs request with HTTP info returned
         * @return ApiResponse&lt;JobResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobResource> executeWithHttpInfo() throws ApiException {
            return getJobsWithHttpInfo(companyId, asof);
        }

        /**
         * Execute getJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobResource> _callback) throws ApiException {
            return getJobsAsync(companyId, asof, _callback);
        }
    }

    /**
     * Company Jobs
     * Array of jobs set at the company level.
     * @param companyId The ID of the company. (required)
     * @return GetJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetJobsRequestBuilder getJobs(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetJobsRequestBuilder(companyId);
    }
    private okhttp3.Call getLaborAssignmentCall(String companyId, String laborAssignmentId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/laborassignments/{laborAssignmentId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "laborAssignmentId" + "}", localVarApiClient.escapeString(laborAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.laborassignment.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLaborAssignmentValidateBeforeCall(String companyId, String laborAssignmentId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getLaborAssignment(Async)");
        }

        // verify the required parameter 'laborAssignmentId' is set
        if (laborAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'laborAssignmentId' when calling getLaborAssignment(Async)");
        }

        return getLaborAssignmentCall(companyId, laborAssignmentId, asof, _callback);

    }


    private ApiResponse<LaborAssignmentResource> getLaborAssignmentWithHttpInfo(String companyId, String laborAssignmentId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getLaborAssignmentValidateBeforeCall(companyId, laborAssignmentId, asof, null);
        Type localVarReturnType = new TypeToken<LaborAssignmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLaborAssignmentAsync(String companyId, String laborAssignmentId, String asof, final ApiCallback<LaborAssignmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLaborAssignmentValidateBeforeCall(companyId, laborAssignmentId, asof, _callback);
        Type localVarReturnType = new TypeToken<LaborAssignmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLaborAssignmentRequestBuilder {
        private final String companyId;
        private final String laborAssignmentId;
        private String asof;

        private GetLaborAssignmentRequestBuilder(String companyId, String laborAssignmentId) {
            this.companyId = companyId;
            this.laborAssignmentId = laborAssignmentId;
        }

        /**
         * Set asof
         * @param asof Returns labour assignment as of the date used in the request. (optional)
         * @return GetLaborAssignmentRequestBuilder
         */
        public GetLaborAssignmentRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getLaborAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLaborAssignmentCall(companyId, laborAssignmentId, asof, _callback);
        }


        /**
         * Execute getLaborAssignment request
         * @return LaborAssignmentResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public LaborAssignmentResource execute() throws ApiException {
            ApiResponse<LaborAssignmentResource> localVarResp = getLaborAssignmentWithHttpInfo(companyId, laborAssignmentId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLaborAssignment request with HTTP info returned
         * @return ApiResponse&lt;LaborAssignmentResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LaborAssignmentResource> executeWithHttpInfo() throws ApiException {
            return getLaborAssignmentWithHttpInfo(companyId, laborAssignmentId, asof);
        }

        /**
         * Execute getLaborAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LaborAssignmentResource> _callback) throws ApiException {
            return getLaborAssignmentAsync(companyId, laborAssignmentId, asof, _callback);
        }
    }

    /**
     * Company Labour Assignment
     * Information about a single Labor Assignment.
     * @param companyId The ID of the company. (required)
     * @param laborAssignmentId The ID of the labor assignment. (required)
     * @return GetLaborAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetLaborAssignmentRequestBuilder getLaborAssignment(String companyId, String laborAssignmentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (laborAssignmentId == null) throw new IllegalArgumentException("\"laborAssignmentId\" is required but got null");
            

        return new GetLaborAssignmentRequestBuilder(companyId, laborAssignmentId);
    }
    private okhttp3.Call getLocationCall(String companyId, String locationId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/locations/{locationId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "locationId" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.location.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationValidateBeforeCall(String companyId, String locationId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getLocation(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getLocation(Async)");
        }

        return getLocationCall(companyId, locationId, asof, _callback);

    }


    private ApiResponse<LocationResource> getLocationWithHttpInfo(String companyId, String locationId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getLocationValidateBeforeCall(companyId, locationId, asof, null);
        Type localVarReturnType = new TypeToken<LocationResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationAsync(String companyId, String locationId, String asof, final ApiCallback<LocationResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationValidateBeforeCall(companyId, locationId, asof, _callback);
        Type localVarReturnType = new TypeToken<LocationResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationRequestBuilder {
        private final String companyId;
        private final String locationId;
        private String asof;

        private GetLocationRequestBuilder(String companyId, String locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set asof
         * @param asof Returns location as of the date used in the request. (optional)
         * @return GetLocationRequestBuilder
         */
        public GetLocationRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationCall(companyId, locationId, asof, _callback);
        }


        /**
         * Execute getLocation request
         * @return LocationResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public LocationResource execute() throws ApiException {
            ApiResponse<LocationResource> localVarResp = getLocationWithHttpInfo(companyId, locationId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocation request with HTTP info returned
         * @return ApiResponse&lt;LocationResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationResource> executeWithHttpInfo() throws ApiException {
            return getLocationWithHttpInfo(companyId, locationId, asof);
        }

        /**
         * Execute getLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationResource> _callback) throws ApiException {
            return getLocationAsync(companyId, locationId, asof, _callback);
        }
    }

    /**
     * Company Location
     * Information about a single Location.
     * @param companyId ID associated with desired company. (required)
     * @param locationId The ID of the location. (required)
     * @return GetLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationRequestBuilder getLocation(String companyId, String locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
            

        return new GetLocationRequestBuilder(companyId, locationId);
    }
    private okhttp3.Call getLocationsCall(String companyId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/locations"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.locations.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationsValidateBeforeCall(String companyId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getLocations(Async)");
        }

        return getLocationsCall(companyId, asof, _callback);

    }


    private ApiResponse<LocationResource> getLocationsWithHttpInfo(String companyId, String asof) throws ApiException {
        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(companyId, asof, null);
        Type localVarReturnType = new TypeToken<LocationResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationsAsync(String companyId, String asof, final ApiCallback<LocationResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(companyId, asof, _callback);
        Type localVarReturnType = new TypeToken<LocationResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationsRequestBuilder {
        private final String companyId;
        private String asof;

        private GetLocationsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set asof
         * @param asof Returns all locations as of the date used in the request. (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for getLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationsCall(companyId, asof, _callback);
        }


        /**
         * Execute getLocations request
         * @return LocationResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public LocationResource execute() throws ApiException {
            ApiResponse<LocationResource> localVarResp = getLocationsWithHttpInfo(companyId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocations request with HTTP info returned
         * @return ApiResponse&lt;LocationResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationResource> executeWithHttpInfo() throws ApiException {
            return getLocationsWithHttpInfo(companyId, asof);
        }

        /**
         * Execute getLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationResource> _callback) throws ApiException {
            return getLocationsAsync(companyId, asof, _callback);
        }
    }

    /**
     * Company Locations
     * Array of locations set at the company level.
     * @param companyId The ID of the company. (required)
     * @return GetLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationsRequestBuilder getLocations(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetLocationsRequestBuilder(companyId);
    }
    private okhttp3.Call getOrganizationCall(String companyId, String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/organizations/{orgId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.organization.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationValidateBeforeCall(String companyId, String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getOrganization(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganization(Async)");
        }

        return getOrganizationCall(companyId, organizationId, _callback);

    }


    private ApiResponse<OrganizationResource> getOrganizationWithHttpInfo(String companyId, String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(companyId, organizationId, null);
        Type localVarReturnType = new TypeToken<OrganizationResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationAsync(String companyId, String organizationId, final ApiCallback<OrganizationResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(companyId, organizationId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrganizationRequestBuilder {
        private final String companyId;
        private final String organizationId;

        private GetOrganizationRequestBuilder(String companyId, String organizationId) {
            this.companyId = companyId;
            this.organizationId = organizationId;
        }

        /**
         * Build call for getOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationCall(companyId, organizationId, _callback);
        }


        /**
         * Execute getOrganization request
         * @return OrganizationResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationResource execute() throws ApiException {
            ApiResponse<OrganizationResource> localVarResp = getOrganizationWithHttpInfo(companyId, organizationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrganization request with HTTP info returned
         * @return ApiResponse&lt;OrganizationResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationResource> executeWithHttpInfo() throws ApiException {
            return getOrganizationWithHttpInfo(companyId, organizationId);
        }

        /**
         * Execute getOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationResource> _callback) throws ApiException {
            return getOrganizationAsync(companyId, organizationId, _callback);
        }
    }

    /**
     * Company Organization
     * Information about a single Organization.
     * @param companyId The ID of the company. (required)
     * @param organizationId The ID of the organization. (required)
     * @return GetOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationRequestBuilder getOrganization(String companyId, String organizationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (organizationId == null) throw new IllegalArgumentException("\"organizationId\" is required but got null");
            

        return new GetOrganizationRequestBuilder(companyId, organizationId);
    }
    private okhttp3.Call getOrganizationsCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/organizations"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.organizations.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationsValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getOrganizations(Async)");
        }

        return getOrganizationsCall(companyId, _callback);

    }


    private ApiResponse<OrganizationResource> getOrganizationsWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<OrganizationResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationsAsync(String companyId, final ApiCallback<OrganizationResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrganizationsRequestBuilder {
        private final String companyId;

        private GetOrganizationsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for getOrganizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationsCall(companyId, _callback);
        }


        /**
         * Execute getOrganizations request
         * @return OrganizationResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationResource execute() throws ApiException {
            ApiResponse<OrganizationResource> localVarResp = getOrganizationsWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrganizations request with HTTP info returned
         * @return ApiResponse&lt;OrganizationResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationResource> executeWithHttpInfo() throws ApiException {
            return getOrganizationsWithHttpInfo(companyId);
        }

        /**
         * Execute getOrganizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationResource> _callback) throws ApiException {
            return getOrganizationsAsync(companyId, _callback);
        }
    }

    /**
     * Company Organizations
     * Array of organizations set at the company level.
     * @param companyId The ID of the company. (required)
     * @return GetOrganizationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationsRequestBuilder getOrganizations(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetOrganizationsRequestBuilder(companyId);
    }
    private okhttp3.Call getPayFrequenciesCall(String companyId, String payfrequency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/payfrequencies"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payfrequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payfrequency", payfrequency));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.payroll.payfrequencies.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayFrequenciesValidateBeforeCall(String companyId, String payfrequency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getPayFrequencies(Async)");
        }

        return getPayFrequenciesCall(companyId, payfrequency, _callback);

    }


    private ApiResponse<FrequencyCombinationUnitResource> getPayFrequenciesWithHttpInfo(String companyId, String payfrequency) throws ApiException {
        okhttp3.Call localVarCall = getPayFrequenciesValidateBeforeCall(companyId, payfrequency, null);
        Type localVarReturnType = new TypeToken<FrequencyCombinationUnitResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayFrequenciesAsync(String companyId, String payfrequency, final ApiCallback<FrequencyCombinationUnitResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayFrequenciesValidateBeforeCall(companyId, payfrequency, _callback);
        Type localVarReturnType = new TypeToken<FrequencyCombinationUnitResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayFrequenciesRequestBuilder {
        private final String companyId;
        private String payfrequency;

        private GetPayFrequenciesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set payfrequency
         * @param payfrequency The frequency that you would like to search for. (optional)
         * @return GetPayFrequenciesRequestBuilder
         */
        public GetPayFrequenciesRequestBuilder payfrequency(String payfrequency) {
            this.payfrequency = payfrequency;
            return this;
        }
        
        /**
         * Build call for getPayFrequencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayFrequenciesCall(companyId, payfrequency, _callback);
        }


        /**
         * Execute getPayFrequencies request
         * @return FrequencyCombinationUnitResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public FrequencyCombinationUnitResource execute() throws ApiException {
            ApiResponse<FrequencyCombinationUnitResource> localVarResp = getPayFrequenciesWithHttpInfo(companyId, payfrequency);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayFrequencies request with HTTP info returned
         * @return ApiResponse&lt;FrequencyCombinationUnitResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FrequencyCombinationUnitResource> executeWithHttpInfo() throws ApiException {
            return getPayFrequenciesWithHttpInfo(companyId, payfrequency);
        }

        /**
         * Execute getPayFrequencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FrequencyCombinationUnitResource> _callback) throws ApiException {
            return getPayFrequenciesAsync(companyId, payfrequency, _callback);
        }
    }

    /**
     * Company Pay Frequencies
     * Array of pay frequencies that workers maybe paid on. This is a generic array that is currently not specific to the companies pay frequency. This is to be used with the workers pay components to determine what the frequency, occurrence, and intervals are allowed.
     * @param companyId The ID of the company. (required)
     * @return GetPayFrequenciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetPayFrequenciesRequestBuilder getPayFrequencies(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetPayFrequenciesRequestBuilder(companyId);
    }
    private okhttp3.Call getStatusCall(String companyId, String workerStatusId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/workerstatuses/{statusId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "workerStatusId" + "}", localVarApiClient.escapeString(workerStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.workerstatus.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String companyId, String workerStatusId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getStatus(Async)");
        }

        // verify the required parameter 'workerStatusId' is set
        if (workerStatusId == null) {
            throw new ApiException("Missing the required parameter 'workerStatusId' when calling getStatus(Async)");
        }

        return getStatusCall(companyId, workerStatusId, _callback);

    }


    private ApiResponse<WorkerStatus> getStatusWithHttpInfo(String companyId, String workerStatusId) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(companyId, workerStatusId, null);
        Type localVarReturnType = new TypeToken<WorkerStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusAsync(String companyId, String workerStatusId, final ApiCallback<WorkerStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(companyId, workerStatusId, _callback);
        Type localVarReturnType = new TypeToken<WorkerStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusRequestBuilder {
        private final String companyId;
        private final String workerStatusId;

        private GetStatusRequestBuilder(String companyId, String workerStatusId) {
            this.companyId = companyId;
            this.workerStatusId = workerStatusId;
        }

        /**
         * Build call for getStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusCall(companyId, workerStatusId, _callback);
        }


        /**
         * Execute getStatus request
         * @return WorkerStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerStatus execute() throws ApiException {
            ApiResponse<WorkerStatus> localVarResp = getStatusWithHttpInfo(companyId, workerStatusId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatus request with HTTP info returned
         * @return ApiResponse&lt;WorkerStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerStatus> executeWithHttpInfo() throws ApiException {
            return getStatusWithHttpInfo(companyId, workerStatusId);
        }

        /**
         * Execute getStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerStatus> _callback) throws ApiException {
            return getStatusAsync(companyId, workerStatusId, _callback);
        }
    }

    /**
     * Company Worker Status
     * Information about a single status.
     * @param companyId The ID of the company. (required)
     * @param workerStatusId The ID of the worker status. (required)
     * @return GetStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusRequestBuilder getStatus(String companyId, String workerStatusId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (workerStatusId == null) throw new IllegalArgumentException("\"workerStatusId\" is required but got null");
            

        return new GetStatusRequestBuilder(companyId, workerStatusId);
    }
    private okhttp3.Call getWorkersCall(String companyId, String givenname, String familyname, String legallastfour, String employeeid, String from, String to, String locationid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/workers"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (givenname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("givenname", givenname));
        }

        if (familyname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("familyname", familyname));
        }

        if (legallastfour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("legallastfour", legallastfour));
        }

        if (employeeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeid", employeeid));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.workers.v1+json",
            "application/vnd.paychex.workers_communications.v1+json",
            "application/vnd.paychex.workers.nonpii_communications.v1+json",
            "application/vnd.paychex.workers.nonpii.v1+json",
            "application/vnd.paychex.workers.roster.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkersValidateBeforeCall(String companyId, String givenname, String familyname, String legallastfour, String employeeid, String from, String to, String locationid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getWorkers(Async)");
        }

        return getWorkersCall(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid, _callback);

    }


    private ApiResponse<WorkerResource> getWorkersWithHttpInfo(String companyId, String givenname, String familyname, String legallastfour, String employeeid, String from, String to, String locationid) throws ApiException {
        okhttp3.Call localVarCall = getWorkersValidateBeforeCall(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid, null);
        Type localVarReturnType = new TypeToken<WorkerResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkersAsync(String companyId, String givenname, String familyname, String legallastfour, String employeeid, String from, String to, String locationid, final ApiCallback<WorkerResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkersValidateBeforeCall(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid, _callback);
        Type localVarReturnType = new TypeToken<WorkerResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkersRequestBuilder {
        private final String companyId;
        private String givenname;
        private String familyname;
        private String legallastfour;
        private String employeeid;
        private String from;
        private String to;
        private String locationid;

        private GetWorkersRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set givenname
         * @param givenname The given or first name of the workers to search for. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder givenname(String givenname) {
            this.givenname = givenname;
            return this;
        }
        
        /**
         * Set familyname
         * @param familyname The family or last name of the workers to search for. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder familyname(String familyname) {
            this.familyname = familyname;
            return this;
        }
        
        /**
         * Set legallastfour
         * @param legallastfour The last 4 digits of the workers federal level taxpayer id number of the worker to search for. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder legallastfour(String legallastfour) {
            this.legallastfour = legallastfour;
            return this;
        }
        
        /**
         * Set employeeid
         * @param employeeid The assigned workers employee ID. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder employeeid(String employeeid) {
            this.employeeid = employeeid;
            return this;
        }
        
        /**
         * Set from
         * @param from The beginning of the search date range using for when the worker was created. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The ending of the search date range using for then the worker was created. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set locationid
         * @param locationid The location Id. (optional)
         * @return GetWorkersRequestBuilder
         */
        public GetWorkersRequestBuilder locationid(String locationid) {
            this.locationid = locationid;
            return this;
        }
        
        /**
         * Build call for getWorkers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkersCall(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid, _callback);
        }


        /**
         * Execute getWorkers request
         * @return WorkerResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerResource execute() throws ApiException {
            ApiResponse<WorkerResource> localVarResp = getWorkersWithHttpInfo(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkers request with HTTP info returned
         * @return ApiResponse&lt;WorkerResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerResource> executeWithHttpInfo() throws ApiException {
            return getWorkersWithHttpInfo(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid);
        }

        /**
         * Execute getWorkers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerResource> _callback) throws ApiException {
            return getWorkersAsync(companyId, givenname, familyname, legallastfour, employeeid, from, to, locationid, _callback);
        }
    }

    /**
     * Company Workers
     * Array of workers (employee and contractor) for all of the companies who are associated with a specific company that your application has been granted access to. The combination of query parameters to be used with this endpoint are as follows:  1. givenname, familyname, legallastfour  2. from, to (start date, end date)  3. employeeid  4. locationid  5. offset, limit (paging).  Note: Paging and filtering attributes cannot be applied together. 
     * @param companyId The id assigned to the company that workers are being requested for. (required)
     * @return GetWorkersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkersRequestBuilder getWorkers(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetWorkersRequestBuilder(companyId);
    }
    private okhttp3.Call listCall(String displayid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (displayid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayid", displayid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.companies.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String displayid, final ApiCallback _callback) throws ApiException {
        return listCall(displayid, _callback);

    }


    private ApiResponse<CompanyResource> listWithHttpInfo(String displayid) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(displayid, null);
        Type localVarReturnType = new TypeToken<CompanyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String displayid, final ApiCallback<CompanyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(displayid, _callback);
        Type localVarReturnType = new TypeToken<CompanyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String displayid;

        private ListRequestBuilder() {
        }

        /**
         * Set displayid
         * @param displayid The client account number used for identification purposes. (no dash or spaces allowed, only the last 8 characters  of the ID) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder displayid(String displayid) {
            this.displayid = displayid;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(displayid, _callback);
        }


        /**
         * Execute list request
         * @return CompanyResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CompanyResource execute() throws ApiException {
            ApiResponse<CompanyResource> localVarResp = listWithHttpInfo(displayid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CompanyResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyResource> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(displayid);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyResource> _callback) throws ApiException {
            return listAsync(displayid, _callback);
        }
    }

    /**
     * Companies
     * Array of companies that your application has been granted with some level of access. Your Application (API Key) can be granted access to one or more companies (clients) accounts that are associated with one or more product lines within Paychex.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listJobTitlesCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobtitles"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.jobtitles.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listJobTitlesValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listJobTitles(Async)");
        }

        return listJobTitlesCall(companyId, _callback);

    }


    private ApiResponse<JobTitleResource> listJobTitlesWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = listJobTitlesValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<JobTitleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listJobTitlesAsync(String companyId, final ApiCallback<JobTitleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = listJobTitlesValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<JobTitleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListJobTitlesRequestBuilder {
        private final String companyId;

        private ListJobTitlesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for listJobTitles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listJobTitlesCall(companyId, _callback);
        }


        /**
         * Execute listJobTitles request
         * @return JobTitleResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobTitleResource execute() throws ApiException {
            ApiResponse<JobTitleResource> localVarResp = listJobTitlesWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listJobTitles request with HTTP info returned
         * @return ApiResponse&lt;JobTitleResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobTitleResource> executeWithHttpInfo() throws ApiException {
            return listJobTitlesWithHttpInfo(companyId);
        }

        /**
         * Execute listJobTitles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobTitleResource> _callback) throws ApiException {
            return listJobTitlesAsync(companyId, _callback);
        }
    }

    /**
     * Company Job Titles
     * Array of job titles set at the company level which a worker could be assigned.
     * @param companyId The ID of the company. (required)
     * @return ListJobTitlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListJobTitlesRequestBuilder listJobTitles(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListJobTitlesRequestBuilder(companyId);
    }
    private okhttp3.Call listLaborAssignmentsCall(String companyId, String asof, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/laborassignments"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asof", asof));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.laborassignments.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLaborAssignmentsValidateBeforeCall(String companyId, String asof, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listLaborAssignments(Async)");
        }

        return listLaborAssignmentsCall(companyId, asof, _callback);

    }


    private ApiResponse<LaborAssignmentResource> listLaborAssignmentsWithHttpInfo(String companyId, String asof) throws ApiException {
        okhttp3.Call localVarCall = listLaborAssignmentsValidateBeforeCall(companyId, asof, null);
        Type localVarReturnType = new TypeToken<LaborAssignmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLaborAssignmentsAsync(String companyId, String asof, final ApiCallback<LaborAssignmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLaborAssignmentsValidateBeforeCall(companyId, asof, _callback);
        Type localVarReturnType = new TypeToken<LaborAssignmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLaborAssignmentsRequestBuilder {
        private final String companyId;
        private String asof;

        private ListLaborAssignmentsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set asof
         * @param asof Returns all labour assignments as of the date used in the request. (optional)
         * @return ListLaborAssignmentsRequestBuilder
         */
        public ListLaborAssignmentsRequestBuilder asof(String asof) {
            this.asof = asof;
            return this;
        }
        
        /**
         * Build call for listLaborAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLaborAssignmentsCall(companyId, asof, _callback);
        }


        /**
         * Execute listLaborAssignments request
         * @return LaborAssignmentResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public LaborAssignmentResource execute() throws ApiException {
            ApiResponse<LaborAssignmentResource> localVarResp = listLaborAssignmentsWithHttpInfo(companyId, asof);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLaborAssignments request with HTTP info returned
         * @return ApiResponse&lt;LaborAssignmentResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LaborAssignmentResource> executeWithHttpInfo() throws ApiException {
            return listLaborAssignmentsWithHttpInfo(companyId, asof);
        }

        /**
         * Execute listLaborAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LaborAssignmentResource> _callback) throws ApiException {
            return listLaborAssignmentsAsync(companyId, asof, _callback);
        }
    }

    /**
     * Company Labour Assignments
     * Array of labor assignments set at the company level.
     * @param companyId The ID of the company. (required)
     * @return ListLaborAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListLaborAssignmentsRequestBuilder listLaborAssignments(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListLaborAssignmentsRequestBuilder(companyId);
    }
    private okhttp3.Call listWorkerStatusesCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/workerstatuses"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.workerstatuses.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkerStatusesValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listWorkerStatuses(Async)");
        }

        return listWorkerStatusesCall(companyId, _callback);

    }


    private ApiResponse<WorkerStatus> listWorkerStatusesWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = listWorkerStatusesValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<WorkerStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkerStatusesAsync(String companyId, final ApiCallback<WorkerStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkerStatusesValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<WorkerStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkerStatusesRequestBuilder {
        private final String companyId;

        private ListWorkerStatusesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for listWorkerStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkerStatusesCall(companyId, _callback);
        }


        /**
         * Execute listWorkerStatuses request
         * @return WorkerStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public WorkerStatus execute() throws ApiException {
            ApiResponse<WorkerStatus> localVarResp = listWorkerStatusesWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkerStatuses request with HTTP info returned
         * @return ApiResponse&lt;WorkerStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerStatus> executeWithHttpInfo() throws ApiException {
            return listWorkerStatusesWithHttpInfo(companyId);
        }

        /**
         * Execute listWorkerStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerStatus> _callback) throws ApiException {
            return listWorkerStatusesAsync(companyId, _callback);
        }
    }

    /**
     * Company Worker Statuses
     * Array of statuses set at the company level which a worker could be assigned.
     * @param companyId The ID of the company. (required)
     * @return ListWorkerStatusesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkerStatusesRequestBuilder listWorkerStatuses(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListWorkerStatusesRequestBuilder(companyId);
    }
    private okhttp3.Call updateCustomFieldCall(String companyId, String customfieldid, CustomFieldsResource customFieldsResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfields/{customfieldid}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "customfieldid" + "}", localVarApiClient.escapeString(customfieldid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfields.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.paychex.company.customfields.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValidateBeforeCall(String companyId, String customfieldid, CustomFieldsResource customFieldsResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'customfieldid' is set
        if (customfieldid == null) {
            throw new ApiException("Missing the required parameter 'customfieldid' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'customFieldsResource' is set
        if (customFieldsResource == null) {
            throw new ApiException("Missing the required parameter 'customFieldsResource' when calling updateCustomField(Async)");
        }

        return updateCustomFieldCall(companyId, customfieldid, customFieldsResource, _callback);

    }


    private ApiResponse<CustomFieldsResource> updateCustomFieldWithHttpInfo(String companyId, String customfieldid, CustomFieldsResource customFieldsResource) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(companyId, customfieldid, customFieldsResource, null);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldAsync(String companyId, String customfieldid, CustomFieldsResource customFieldsResource, final ApiCallback<CustomFieldsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(companyId, customfieldid, customFieldsResource, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldRequestBuilder {
        private final String companyId;
        private final String customfieldid;
        private String customFieldId;
        private String customFieldName;
        private String categoryId;
        private Boolean required;
        private Boolean checkStub;
        private Boolean employeeEditable;
        private String type;
        private Boolean booleanValue;
        private List<Link> links;
        private OffsetDateTime dateValue;
        private String textValue;
        private Double maxTextLength;
        private Double numericValue;
        private List<CustomFieldsDropdownResource> dropdown;

        private UpdateCustomFieldRequestBuilder(String companyId, String customfieldid) {
            this.companyId = companyId;
            this.customfieldid = customfieldid;
        }

        /**
         * Set customFieldId
         * @param customFieldId The unique identifier that is autogenerated when a custom field is created (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder customFieldId(String customFieldId) {
            this.customFieldId = customFieldId;
            return this;
        }
        
        /**
         * Set customFieldName
         * @param customFieldName The name of the custom field (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder customFieldName(String customFieldName) {
            this.customFieldName = customFieldName;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId The unique identifier that is autogenerated when creating a category (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set required
         * @param required Where to indicate if the custom field is required on the worker where true &#x3D; required and false &#x3D; not required (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set checkStub
         * @param checkStub Where to indicate if the custom field is required on the worker&#39;s pay stub, where true &#x3D; required and false &#x3D; not required (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder checkStub(Boolean checkStub) {
            this.checkStub = checkStub;
            return this;
        }
        
        /**
         * Set employeeEditable
         * @param employeeEditable Where to indicate if the custom field is able to be edited by the employee, where true &#x3D; required and false &#x3D; not required (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder employeeEditable(Boolean employeeEditable) {
            this.employeeEditable = employeeEditable;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of field the custom field is. (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set booleanValue
         * @param booleanValue The value for BOOLEAN type (true / false) (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder booleanValue(Boolean booleanValue) {
            this.booleanValue = booleanValue;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set dateValue
         * @param dateValue The value for DATE type , example : 2012-02-01T05:00:00Z (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder dateValue(OffsetDateTime dateValue) {
            this.dateValue = dateValue;
            return this;
        }
        
        /**
         * Set textValue
         * @param textValue The value for TEXT type (any text, alphanumeric, special characters allowed) (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder textValue(String textValue) {
            this.textValue = textValue;
            return this;
        }
        
        /**
         * Set maxTextLength
         * @param maxTextLength The maximum allowed value for textValue (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder maxTextLength(Double maxTextLength) {
            this.maxTextLength = maxTextLength;
            return this;
        }
        
        /**
         * Set numericValue
         * @param numericValue Numeric data type can have three formats namely - whole number, second decimal place and fourth decimal place, example: 12 , 12.34 or 12.3456 (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder numericValue(Double numericValue) {
            this.numericValue = numericValue;
            return this;
        }
        
        /**
         * Set dropdown
         * @param dropdown  (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder dropdown(List<CustomFieldsDropdownResource> dropdown) {
            this.dropdown = dropdown;
            return this;
        }
        
        /**
         * Build call for updateCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            return updateCustomFieldCall(companyId, customfieldid, customFieldsResource, _callback);
        }

        private CustomFieldsResource buildBodyParams() {
            CustomFieldsResource customFieldsResource = new CustomFieldsResource();
            customFieldsResource.customFieldId(this.customFieldId);
            customFieldsResource.customFieldName(this.customFieldName);
            customFieldsResource.categoryId(this.categoryId);
            customFieldsResource.required(this.required);
            customFieldsResource.checkStub(this.checkStub);
            customFieldsResource.employeeEditable(this.employeeEditable);
            if (this.type != null)
            customFieldsResource.type(CustomFieldsResource.TypeEnum.fromValue(this.type));
            customFieldsResource.booleanValue(this.booleanValue);
            customFieldsResource.links(this.links);
            customFieldsResource.dateValue(this.dateValue);
            customFieldsResource.textValue(this.textValue);
            customFieldsResource.maxTextLength(this.maxTextLength);
            customFieldsResource.numericValue(this.numericValue);
            customFieldsResource.dropdown(this.dropdown);
            return customFieldsResource;
        }

        /**
         * Execute updateCustomField request
         * @return CustomFieldsResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsResource execute() throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            ApiResponse<CustomFieldsResource> localVarResp = updateCustomFieldWithHttpInfo(companyId, customfieldid, customFieldsResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomField request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsResource> executeWithHttpInfo() throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            return updateCustomFieldWithHttpInfo(companyId, customfieldid, customFieldsResource);
        }

        /**
         * Execute updateCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsResource> _callback) throws ApiException {
            CustomFieldsResource customFieldsResource = buildBodyParams();
            return updateCustomFieldAsync(companyId, customfieldid, customFieldsResource, _callback);
        }
    }

    /**
     * Custom Field
     * Update CustomFields at the company level which a company could be assigned.
     * @param companyId ID associated with desired company. (required)
     * @param customfieldid ID associated with desired custom field. (required)
     * @param customFieldsResource  (required)
     * @return UpdateCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldRequestBuilder updateCustomField(String companyId, String customfieldid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (customfieldid == null) throw new IllegalArgumentException("\"customfieldid\" is required but got null");
            

        return new UpdateCustomFieldRequestBuilder(companyId, customfieldid);
    }
    private okhttp3.Call updateCustomFieldsCategoryCall(String companyId, String categoryid, CustomFieldsCategoryResource customFieldsCategoryResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsCategoryResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/customfieldscategories/{categoryid}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "categoryid" + "}", localVarApiClient.escapeString(categoryid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.customfieldscategories.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.company.customfieldscategory.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldsCategoryValidateBeforeCall(String companyId, String categoryid, CustomFieldsCategoryResource customFieldsCategoryResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateCustomFieldsCategory(Async)");
        }

        // verify the required parameter 'categoryid' is set
        if (categoryid == null) {
            throw new ApiException("Missing the required parameter 'categoryid' when calling updateCustomFieldsCategory(Async)");
        }

        // verify the required parameter 'customFieldsCategoryResource' is set
        if (customFieldsCategoryResource == null) {
            throw new ApiException("Missing the required parameter 'customFieldsCategoryResource' when calling updateCustomFieldsCategory(Async)");
        }

        return updateCustomFieldsCategoryCall(companyId, categoryid, customFieldsCategoryResource, _callback);

    }


    private ApiResponse<CustomFieldsCategoryResource> updateCustomFieldsCategoryWithHttpInfo(String companyId, String categoryid, CustomFieldsCategoryResource customFieldsCategoryResource) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldsCategoryValidateBeforeCall(companyId, categoryid, customFieldsCategoryResource, null);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldsCategoryAsync(String companyId, String categoryid, CustomFieldsCategoryResource customFieldsCategoryResource, final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldsCategoryValidateBeforeCall(companyId, categoryid, customFieldsCategoryResource, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsCategoryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldsCategoryRequestBuilder {
        private final String companyId;
        private final String categoryid;
        private String categoryId;
        private String categoryName;
        private List<Link> links;

        private UpdateCustomFieldsCategoryRequestBuilder(String companyId, String categoryid) {
            this.companyId = companyId;
            this.categoryid = categoryid;
        }

        /**
         * Set categoryId
         * @param categoryId The unique identifier that is autogenerated when creating a category (optional)
         * @return UpdateCustomFieldsCategoryRequestBuilder
         */
        public UpdateCustomFieldsCategoryRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set categoryName
         * @param categoryName The name of the Category (optional)
         * @return UpdateCustomFieldsCategoryRequestBuilder
         */
        public UpdateCustomFieldsCategoryRequestBuilder categoryName(String categoryName) {
            this.categoryName = categoryName;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateCustomFieldsCategoryRequestBuilder
         */
        public UpdateCustomFieldsCategoryRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updateCustomFieldsCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            return updateCustomFieldsCategoryCall(companyId, categoryid, customFieldsCategoryResource, _callback);
        }

        private CustomFieldsCategoryResource buildBodyParams() {
            CustomFieldsCategoryResource customFieldsCategoryResource = new CustomFieldsCategoryResource();
            customFieldsCategoryResource.categoryId(this.categoryId);
            customFieldsCategoryResource.categoryName(this.categoryName);
            customFieldsCategoryResource.links(this.links);
            return customFieldsCategoryResource;
        }

        /**
         * Execute updateCustomFieldsCategory request
         * @return CustomFieldsCategoryResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsCategoryResource execute() throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            ApiResponse<CustomFieldsCategoryResource> localVarResp = updateCustomFieldsCategoryWithHttpInfo(companyId, categoryid, customFieldsCategoryResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomFieldsCategory request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsCategoryResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsCategoryResource> executeWithHttpInfo() throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            return updateCustomFieldsCategoryWithHttpInfo(companyId, categoryid, customFieldsCategoryResource);
        }

        /**
         * Execute updateCustomFieldsCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsCategoryResource> _callback) throws ApiException {
            CustomFieldsCategoryResource customFieldsCategoryResource = buildBodyParams();
            return updateCustomFieldsCategoryAsync(companyId, categoryid, customFieldsCategoryResource, _callback);
        }
    }

    /**
     * Custom Fields Category
     * Update  CustomFieldsCategory at the company level.
     * @param companyId ID associated with desired company. (required)
     * @param categoryid ID associated with desired custom field. (required)
     * @param customFieldsCategoryResource  (required)
     * @return UpdateCustomFieldsCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldsCategoryRequestBuilder updateCustomFieldsCategory(String companyId, String categoryid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (categoryid == null) throw new IllegalArgumentException("\"categoryid\" is required but got null");
            

        return new UpdateCustomFieldsCategoryRequestBuilder(companyId, categoryid);
    }
    private okhttp3.Call updateJobCall(String companyId, String jobId, JobResource jobResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobResource;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/jobs/{jobId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.paychex.company.jobs.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.paychex.company.jobs.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobValidateBeforeCall(String companyId, String jobId, JobResource jobResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling updateJob(Async)");
        }

        // verify the required parameter 'jobResource' is set
        if (jobResource == null) {
            throw new ApiException("Missing the required parameter 'jobResource' when calling updateJob(Async)");
        }

        return updateJobCall(companyId, jobId, jobResource, _callback);

    }


    private ApiResponse<JobResource> updateJobWithHttpInfo(String companyId, String jobId, JobResource jobResource) throws ApiException {
        okhttp3.Call localVarCall = updateJobValidateBeforeCall(companyId, jobId, jobResource, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateJobAsync(String companyId, String jobId, JobResource jobResource, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobValidateBeforeCall(companyId, jobId, jobResource, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateJobRequestBuilder {
        private final String companyId;
        private final String jobId;
        private String jobId;
        private String jobCorrelationId;
        private String jobName;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private List<Link> links;
        private JobSegmentsResource jobNumber;

        private UpdateJobRequestBuilder(String companyId, String jobId) {
            this.companyId = companyId;
            this.jobId = jobId;
        }

        /**
         * Set jobId
         * @param jobId The unique identifier associated with this job. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set jobCorrelationId
         * @param jobCorrelationId Id that you define which is used for error handling/responses. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder jobCorrelationId(String jobCorrelationId) {
            this.jobCorrelationId = jobCorrelationId;
            return this;
        }
        
        /**
         * Set jobName
         * @param jobName The name of the job. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder jobName(String jobName) {
            this.jobName = jobName;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date associated with this job. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date associated with this job. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set links
         * @param links  (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder links(List<Link> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set jobNumber
         * @param jobNumber  (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder jobNumber(JobSegmentsResource jobNumber) {
            this.jobNumber = jobNumber;
            return this;
        }
        
        /**
         * Build call for updateJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobResource jobResource = buildBodyParams();
            return updateJobCall(companyId, jobId, jobResource, _callback);
        }

        private JobResource buildBodyParams() {
            JobResource jobResource = new JobResource();
            jobResource.jobId(this.jobId);
            jobResource.jobCorrelationId(this.jobCorrelationId);
            jobResource.jobName(this.jobName);
            jobResource.startDate(this.startDate);
            jobResource.endDate(this.endDate);
            jobResource.links(this.links);
            jobResource.jobNumber(this.jobNumber);
            return jobResource;
        }

        /**
         * Execute updateJob request
         * @return JobResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public JobResource execute() throws ApiException {
            JobResource jobResource = buildBodyParams();
            ApiResponse<JobResource> localVarResp = updateJobWithHttpInfo(companyId, jobId, jobResource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateJob request with HTTP info returned
         * @return ApiResponse&lt;JobResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobResource> executeWithHttpInfo() throws ApiException {
            JobResource jobResource = buildBodyParams();
            return updateJobWithHttpInfo(companyId, jobId, jobResource);
        }

        /**
         * Execute updateJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobResource> _callback) throws ApiException {
            JobResource jobResource = buildBodyParams();
            return updateJobAsync(companyId, jobId, jobResource, _callback);
        }
    }

    /**
     * Company Job
     * Update a single Job.
     * @param companyId The ID of the company. (required)
     * @param jobId The ID of the job. (required)
     * @param jobResource  (required)
     * @return UpdateJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobRequestBuilder updateJob(String companyId, String jobId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new UpdateJobRequestBuilder(companyId, jobId);
    }
}
