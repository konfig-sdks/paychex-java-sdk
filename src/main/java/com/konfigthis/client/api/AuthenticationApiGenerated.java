/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Authentication;
import com.konfigthis.client.model.AuthenticationCreateBearerTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBearerTokenCall(String grantType, String clientId, String clientSecret, AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationCreateBearerTokenRequest;

        // create path and map variables
        String localVarPath = "/auth/oauth/v2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBearerTokenValidateBeforeCall(String grantType, String clientId, String clientSecret, AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling createBearerToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling createBearerToken(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling createBearerToken(Async)");
        }

        return createBearerTokenCall(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest, _callback);

    }


    private ApiResponse<Authentication> createBearerTokenWithHttpInfo(String grantType, String clientId, String clientSecret, AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createBearerTokenValidateBeforeCall(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest, null);
        Type localVarReturnType = new TypeToken<Authentication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBearerTokenAsync(String grantType, String clientId, String clientSecret, AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest, final ApiCallback<Authentication> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBearerTokenValidateBeforeCall(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Authentication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBearerTokenRequestBuilder {
        private final String grantType;
        private final String clientId;
        private final String clientSecret;

        private CreateBearerTokenRequestBuilder(String grantType, String clientId, String clientSecret) {
            this.grantType = grantType;
            this.clientId = clientId;
            this.clientSecret = clientSecret;
        }

        /**
         * Build call for createBearerToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest = buildBodyParams();
            return createBearerTokenCall(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest, _callback);
        }

        private AuthenticationCreateBearerTokenRequest buildBodyParams() {
            AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest = new AuthenticationCreateBearerTokenRequest();
            authenticationCreateBearerTokenRequest.grantType(this.grantType);
            authenticationCreateBearerTokenRequest.clientId(this.clientId);
            authenticationCreateBearerTokenRequest.clientSecret(this.clientSecret);
            return authenticationCreateBearerTokenRequest;
        }

        /**
         * Execute createBearerToken request
         * @return Authentication
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Authentication execute() throws ApiException {
            AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest = buildBodyParams();
            ApiResponse<Authentication> localVarResp = createBearerTokenWithHttpInfo(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBearerToken request with HTTP info returned
         * @return ApiResponse&lt;Authentication&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Authentication> executeWithHttpInfo() throws ApiException {
            AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest = buildBodyParams();
            return createBearerTokenWithHttpInfo(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest);
        }

        /**
         * Execute createBearerToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Authentication> _callback) throws ApiException {
            AuthenticationCreateBearerTokenRequest authenticationCreateBearerTokenRequest = buildBodyParams();
            return createBearerTokenAsync(grantType, clientId, clientSecret, authenticationCreateBearerTokenRequest, _callback);
        }
    }

    /**
     * Create Bearer token
     * Request a Bearer token that will be used as an access token when making calls to resources.  The credentials need to be sent within the body of the request.
     * @param grantType Send \\\&quot;client_credentials\\\&quot;. (required)
     * @param clientId The applications API key. (required)
     * @param clientSecret The applications corresponding secret. (required)
     * @return CreateBearerTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateBearerTokenRequestBuilder createBearerToken(String grantType, String clientId, String clientSecret) throws IllegalArgumentException {
        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (clientSecret == null) throw new IllegalArgumentException("\"clientSecret\" is required but got null");
            

        return new CreateBearerTokenRequestBuilder(grantType, clientId, clientSecret);
    }
}
