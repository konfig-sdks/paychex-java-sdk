/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data elements of a Job Number to show the segments and number.For segmentation this can be up to 3 different segments.
 */
@ApiModel(description = "Data elements of a Job Number to show the segments and number.For segmentation this can be up to 3 different segments.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobSegmentsResource {
  public static final String SERIALIZED_NAME_SEGMENT1 = "segment1";
  @SerializedName(SERIALIZED_NAME_SEGMENT1)
  private String segment1;

  public static final String SERIALIZED_NAME_SEGMENT2 = "segment2";
  @SerializedName(SERIALIZED_NAME_SEGMENT2)
  private String segment2;

  public static final String SERIALIZED_NAME_SEGMENT3 = "segment3";
  @SerializedName(SERIALIZED_NAME_SEGMENT3)
  private String segment3;

  public JobSegmentsResource() {
  }

  public JobSegmentsResource segment1(String segment1) {
    
    
    
    
    this.segment1 = segment1;
    return this;
  }

   /**
   * This is segment 1 or the number associated to the job when segmentation is not used.
   * @return segment1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A1", value = "This is segment 1 or the number associated to the job when segmentation is not used.")

  public String getSegment1() {
    return segment1;
  }


  public void setSegment1(String segment1) {
    
    
    
    this.segment1 = segment1;
  }


  public JobSegmentsResource segment2(String segment2) {
    
    
    
    
    this.segment2 = segment2;
    return this;
  }

   /**
   * This is segment 2.
   * @return segment2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A2", value = "This is segment 2.")

  public String getSegment2() {
    return segment2;
  }


  public void setSegment2(String segment2) {
    
    
    
    this.segment2 = segment2;
  }


  public JobSegmentsResource segment3(String segment3) {
    
    
    
    
    this.segment3 = segment3;
    return this;
  }

   /**
   * This is segment 3.
   * @return segment3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A3", value = "This is segment 3.")

  public String getSegment3() {
    return segment3;
  }


  public void setSegment3(String segment3) {
    
    
    
    this.segment3 = segment3;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobSegmentsResource instance itself
   */
  public JobSegmentsResource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSegmentsResource jobSegmentsResource = (JobSegmentsResource) o;
    return Objects.equals(this.segment1, jobSegmentsResource.segment1) &&
        Objects.equals(this.segment2, jobSegmentsResource.segment2) &&
        Objects.equals(this.segment3, jobSegmentsResource.segment3)&&
        Objects.equals(this.additionalProperties, jobSegmentsResource.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segment1, segment2, segment3, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSegmentsResource {\n");
    sb.append("    segment1: ").append(toIndentedString(segment1)).append("\n");
    sb.append("    segment2: ").append(toIndentedString(segment2)).append("\n");
    sb.append("    segment3: ").append(toIndentedString(segment3)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("segment1");
    openapiFields.add("segment2");
    openapiFields.add("segment3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobSegmentsResource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobSegmentsResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSegmentsResource is not found in the empty JSON string", JobSegmentsResource.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("segment1") != null && !jsonObj.get("segment1").isJsonNull()) && !jsonObj.get("segment1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment1").toString()));
      }
      if ((jsonObj.get("segment2") != null && !jsonObj.get("segment2").isJsonNull()) && !jsonObj.get("segment2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment2").toString()));
      }
      if ((jsonObj.get("segment3") != null && !jsonObj.get("segment3").isJsonNull()) && !jsonObj.get("segment3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSegmentsResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSegmentsResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSegmentsResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSegmentsResource.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSegmentsResource>() {
           @Override
           public void write(JsonWriter out, JobSegmentsResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSegmentsResource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobSegmentsResource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobSegmentsResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobSegmentsResource
  * @throws IOException if the JSON string is invalid with respect to JobSegmentsResource
  */
  public static JobSegmentsResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSegmentsResource.class);
  }

 /**
  * Convert an instance of JobSegmentsResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

