/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.JobSegmentsResource;
import com.konfigthis.client.model.Link;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The state representation of Jobs within a company.
 */
@ApiModel(description = "The state representation of Jobs within a company.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobResource {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_CORRELATION_ID = "jobCorrelationId";
  @SerializedName(SERIALIZED_NAME_JOB_CORRELATION_ID)
  private String jobCorrelationId;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;

  public static final String SERIALIZED_NAME_JOB_NUMBER = "jobNumber";
  @SerializedName(SERIALIZED_NAME_JOB_NUMBER)
  private JobSegmentsResource jobNumber;

  public JobResource() {
  }

  
  public JobResource(
     String jobId
  ) {
    this();
    this.jobId = jobId;
  }

   /**
   * The unique identifier associated with this job.
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "970001557916902", value = "The unique identifier associated with this job.")

  public String getJobId() {
    return jobId;
  }




  public JobResource jobCorrelationId(String jobCorrelationId) {
    
    
    
    
    this.jobCorrelationId = jobCorrelationId;
    return this;
  }

   /**
   * Id that you define which is used for error handling/responses.
   * @return jobCorrelationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id that you define which is used for error handling/responses.")

  public String getJobCorrelationId() {
    return jobCorrelationId;
  }


  public void setJobCorrelationId(String jobCorrelationId) {
    
    
    
    this.jobCorrelationId = jobCorrelationId;
  }


  public JobResource jobName(String jobName) {
    
    
    
    
    this.jobName = jobName;
    return this;
  }

   /**
   * The name of the job.
   * @return jobName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My job A", value = "The name of the job.")

  public String getJobName() {
    return jobName;
  }


  public void setJobName(String jobName) {
    
    
    
    this.jobName = jobName;
  }


  public JobResource startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date associated with this job.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-12-20T00:00Z", value = "The start date associated with this job.")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public JobResource endDate(OffsetDateTime endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The end date associated with this job.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025-12-20T00:00Z", value = "The end date associated with this job.")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    
    this.endDate = endDate;
  }


  public JobResource links(List<Link> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public JobResource addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    
    
    
    this.links = links;
  }


  public JobResource jobNumber(JobSegmentsResource jobNumber) {
    
    
    
    
    this.jobNumber = jobNumber;
    return this;
  }

   /**
   * Get jobNumber
   * @return jobNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobSegmentsResource getJobNumber() {
    return jobNumber;
  }


  public void setJobNumber(JobSegmentsResource jobNumber) {
    
    
    
    this.jobNumber = jobNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobResource instance itself
   */
  public JobResource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobResource jobResource = (JobResource) o;
    return Objects.equals(this.jobId, jobResource.jobId) &&
        Objects.equals(this.jobCorrelationId, jobResource.jobCorrelationId) &&
        Objects.equals(this.jobName, jobResource.jobName) &&
        Objects.equals(this.startDate, jobResource.startDate) &&
        Objects.equals(this.endDate, jobResource.endDate) &&
        Objects.equals(this.links, jobResource.links) &&
        Objects.equals(this.jobNumber, jobResource.jobNumber)&&
        Objects.equals(this.additionalProperties, jobResource.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobCorrelationId, jobName, startDate, endDate, links, jobNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobResource {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobCorrelationId: ").append(toIndentedString(jobCorrelationId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    jobNumber: ").append(toIndentedString(jobNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("jobCorrelationId");
    openapiFields.add("jobName");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("links");
    openapiFields.add("jobNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobResource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobResource is not found in the empty JSON string", JobResource.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("jobCorrelationId") != null && !jsonObj.get("jobCorrelationId").isJsonNull()) && !jsonObj.get("jobCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobCorrelationId").toString()));
      }
      if ((jsonObj.get("jobName") != null && !jsonObj.get("jobName").isJsonNull()) && !jsonObj.get("jobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobName").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `jobNumber`
      if (jsonObj.get("jobNumber") != null && !jsonObj.get("jobNumber").isJsonNull()) {
        JobSegmentsResource.validateJsonObject(jsonObj.getAsJsonObject("jobNumber"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobResource.class));

       return (TypeAdapter<T>) new TypeAdapter<JobResource>() {
           @Override
           public void write(JsonWriter out, JobResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobResource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobResource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobResource
  * @throws IOException if the JSON string is invalid with respect to JobResource
  */
  public static JobResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobResource.class);
  }

 /**
  * Convert an instance of JobResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

