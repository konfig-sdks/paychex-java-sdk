/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Required Authentication object is going to be different based on each authType. &lt;br /&gt;* NO_AUTH doesn&#39;t have any other fields in authentication object &lt;br /&gt;* BASIC_AUTH needs 2 fields: username and password &lt;br /&gt;* APIKEY requires the field: apiKey &lt;br /&gt;* OAUTH2 requires 5 fields:  tokenUrl, clientId, clientSecret, grantType, contentType &lt;br /&gt;* OAUTH2_BASIC requires 5 fields:  tokenUrl, clientId, clientSecret, grantType, contentType
 */
@ApiModel(description = "Required Authentication object is going to be different based on each authType. <br />* NO_AUTH doesn't have any other fields in authentication object <br />* BASIC_AUTH needs 2 fields: username and password <br />* APIKEY requires the field: apiKey <br />* OAUTH2 requires 5 fields:  tokenUrl, clientId, clientSecret, grantType, contentType <br />* OAUTH2_BASIC requires 5 fields:  tokenUrl, clientId, clientSecret, grantType, contentType")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Authentication1 {
  /**
   * The authorization method used to authorize callers to your webhook url.
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
 public enum AuthTypeEnum {
    NO_AUTH("NO_AUTH"),
    
    BASIC_AUTH("BASIC_AUTH"),
    
    API_KEY("API_KEY"),
    
    OAUTH2("OAUTH2"),
    
    OAUTH2_BASIC("OAUTH2_BASIC");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_TOKEN_URL = "tokenUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_URL)
  private String tokenUrl;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grantType";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private String grantType;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public Authentication1() {
  }

  public Authentication1 authType(AuthTypeEnum authType) {
    
    
    
    
    this.authType = authType;
    return this;
  }

   /**
   * The authorization method used to authorize callers to your webhook url.
   * @return authType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The authorization method used to authorize callers to your webhook url.")

  public AuthTypeEnum getAuthType() {
    return authType;
  }


  public void setAuthType(AuthTypeEnum authType) {
    
    
    
    this.authType = authType;
  }


  public Authentication1 apiKey(String apiKey) {
    
    
    
    
    this.apiKey = apiKey;
    return this;
  }

   /**
   * The API key required for API_KEY authorization.
   * @return apiKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The API key required for API_KEY authorization.")

  public String getApiKey() {
    return apiKey;
  }


  public void setApiKey(String apiKey) {
    
    
    
    this.apiKey = apiKey;
  }


  public Authentication1 username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * The username required for BASIC_AUTH authorization.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username required for BASIC_AUTH authorization.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }


  public Authentication1 password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The password required for BASIC_AUTH authorization.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password required for BASIC_AUTH authorization.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public Authentication1 tokenUrl(String tokenUrl) {
    
    
    
    
    this.tokenUrl = tokenUrl;
    return this;
  }

   /**
   * The URL used to obtain an access token for OAUTH2 or OAUTH2_BASIC authorization.
   * @return tokenUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL used to obtain an access token for OAUTH2 or OAUTH2_BASIC authorization.")

  public String getTokenUrl() {
    return tokenUrl;
  }


  public void setTokenUrl(String tokenUrl) {
    
    
    
    this.tokenUrl = tokenUrl;
  }


  public Authentication1 clientId(String clientId) {
    
    
    
    
    this.clientId = clientId;
    return this;
  }

   /**
   * The client ID required by OAUTH2 and OAUTH2_BASIC authorization.
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client ID required by OAUTH2 and OAUTH2_BASIC authorization.")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    
    
    
    this.clientId = clientId;
  }


  public Authentication1 clientSecret(String clientSecret) {
    
    
    
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * The client secret required by OAUTH2 and OAUTH2_BASIC authorization.
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client secret required by OAUTH2 and OAUTH2_BASIC authorization.")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    
    
    
    this.clientSecret = clientSecret;
  }


  public Authentication1 grantType(String grantType) {
    
    
    
    
    this.grantType = grantType;
    return this;
  }

   /**
   * The grant type used to acquire an access token by OAUTH2 and OAUTH2_BASIC authorization.
   * @return grantType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The grant type used to acquire an access token by OAUTH2 and OAUTH2_BASIC authorization.")

  public String getGrantType() {
    return grantType;
  }


  public void setGrantType(String grantType) {
    
    
    
    this.grantType = grantType;
  }


  public Authentication1 contentType(String contentType) {
    
    
    
    
    this.contentType = contentType;
    return this;
  }

   /**
   * The content type to use in the token request for OAUTH2 and OAUTH2_BASIC authorization.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The content type to use in the token request for OAUTH2 and OAUTH2_BASIC authorization.")

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    
    
    
    this.contentType = contentType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Authentication1 instance itself
   */
  public Authentication1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authentication1 authentication1 = (Authentication1) o;
    return Objects.equals(this.authType, authentication1.authType) &&
        Objects.equals(this.apiKey, authentication1.apiKey) &&
        Objects.equals(this.username, authentication1.username) &&
        Objects.equals(this.password, authentication1.password) &&
        Objects.equals(this.tokenUrl, authentication1.tokenUrl) &&
        Objects.equals(this.clientId, authentication1.clientId) &&
        Objects.equals(this.clientSecret, authentication1.clientSecret) &&
        Objects.equals(this.grantType, authentication1.grantType) &&
        Objects.equals(this.contentType, authentication1.contentType)&&
        Objects.equals(this.additionalProperties, authentication1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authType, apiKey, username, password, tokenUrl, clientId, clientSecret, grantType, contentType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authentication1 {\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authType");
    openapiFields.add("apiKey");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("tokenUrl");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("grantType");
    openapiFields.add("contentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Authentication1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Authentication1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Authentication1 is not found in the empty JSON string", Authentication1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Authentication1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("authType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authType").toString()));
      }
      if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("tokenUrl") != null && !jsonObj.get("tokenUrl").isJsonNull()) && !jsonObj.get("tokenUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUrl").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("grantType") != null && !jsonObj.get("grantType").isJsonNull()) && !jsonObj.get("grantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grantType").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Authentication1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Authentication1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Authentication1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Authentication1.class));

       return (TypeAdapter<T>) new TypeAdapter<Authentication1>() {
           @Override
           public void write(JsonWriter out, Authentication1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Authentication1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Authentication1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Authentication1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Authentication1
  * @throws IOException if the JSON string is invalid with respect to Authentication1
  */
  public static Authentication1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Authentication1.class);
  }

 /**
  * Convert an instance of Authentication1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

