/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Tax pay components on the check.
 */
@ApiModel(description = "Tax pay components on the check.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayComponentResource1 {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_COMPONENT_ID = "componentId";
  @SerializedName(SERIALIZED_NAME_COMPONENT_ID)
  private String componentId;

  public static final String SERIALIZED_NAME_CHECK_COMPONENT_ID = "checkComponentId";
  @SerializedName(SERIALIZED_NAME_CHECK_COMPONENT_ID)
  private String checkComponentId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CLASSIFICATION_TYPE = "classificationType";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_TYPE)
  private String classificationType;

  /**
   * The effect that the pay component will have on the check amount.
   */
  @JsonAdapter(EffectOnPayEnum.Adapter.class)
 public enum EffectOnPayEnum {
    ADDITION("ADDITION"),
    
    ADDITION_WITH_IN_OUT("ADDITION_WITH_IN_OUT"),
    
    EMPLOYER_INFORMATIONAL("EMPLOYER_INFORMATIONAL"),
    
    REDUCTION("REDUCTION");

    private String value;

    EffectOnPayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectOnPayEnum fromValue(String value) {
      for (EffectOnPayEnum b : EffectOnPayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectOnPayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectOnPayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectOnPayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectOnPayEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EFFECT_ON_PAY = "effectOnPay";
  @SerializedName(SERIALIZED_NAME_EFFECT_ON_PAY)
  private EffectOnPayEnum effectOnPay;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_LABOR_ASSIGNMENT_ID = "laborAssignmentId";
  @SerializedName(SERIALIZED_NAME_LABOR_ASSIGNMENT_ID)
  private String laborAssignmentId;

  public static final String SERIALIZED_NAME_PAY_RATE_ID = "payRateId";
  @SerializedName(SERIALIZED_NAME_PAY_RATE_ID)
  private String payRateId;

  public static final String SERIALIZED_NAME_PAY_RATE = "payRate";
  @SerializedName(SERIALIZED_NAME_PAY_RATE)
  private String payRate;

  public static final String SERIALIZED_NAME_PAY_HOURS = "payHours";
  @SerializedName(SERIALIZED_NAME_PAY_HOURS)
  private String payHours;

  public static final String SERIALIZED_NAME_PAY_UNITS = "payUnits";
  @SerializedName(SERIALIZED_NAME_PAY_UNITS)
  private String payUnits;

  public static final String SERIALIZED_NAME_PAY_AMOUNT = "payAmount";
  @SerializedName(SERIALIZED_NAME_PAY_AMOUNT)
  private String payAmount;

  public static final String SERIALIZED_NAME_LINE_DATE = "lineDate";
  @SerializedName(SERIALIZED_NAME_LINE_DATE)
  private OffsetDateTime lineDate;

  public static final String SERIALIZED_NAME_MEMOED = "memoed";
  @SerializedName(SERIALIZED_NAME_MEMOED)
  private Boolean memoed;

  public PayComponentResource1() {
  }

  public PayComponentResource1 description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PayComponentResource1 componentId(String componentId) {
    
    
    
    
    this.componentId = componentId;
    return this;
  }

   /**
   * The identifier of the pay component to add to the check. An overtime pay component can&#39;t be placed on a worker that is OT exempt.
   * @return componentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The identifier of the pay component to add to the check. An overtime pay component can't be placed on a worker that is OT exempt.")

  public String getComponentId() {
    return componentId;
  }


  public void setComponentId(String componentId) {
    
    
    
    this.componentId = componentId;
  }


  public PayComponentResource1 checkComponentId(String checkComponentId) {
    
    
    
    
    this.checkComponentId = checkComponentId;
    return this;
  }

   /**
   * The unique identifier associated for the pay component on this check.
   * @return checkComponentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1020026552555441", value = "The unique identifier associated for the pay component on this check.")

  public String getCheckComponentId() {
    return checkComponentId;
  }


  public void setCheckComponentId(String checkComponentId) {
    
    
    
    this.checkComponentId = checkComponentId;
  }


  public PayComponentResource1 name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name given to the pay component
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hourly", value = "The name given to the pay component")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PayComponentResource1 classificationType(String classificationType) {
    
    
    
    
    this.classificationType = classificationType;
    return this;
  }

   /**
   * The category that this component falls into.
   * @return classificationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "REGULAR", value = "The category that this component falls into.")

  public String getClassificationType() {
    return classificationType;
  }


  public void setClassificationType(String classificationType) {
    
    
    
    this.classificationType = classificationType;
  }


  public PayComponentResource1 effectOnPay(EffectOnPayEnum effectOnPay) {
    
    
    
    
    this.effectOnPay = effectOnPay;
    return this;
  }

   /**
   * The effect that the pay component will have on the check amount.
   * @return effectOnPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADDITION", value = "The effect that the pay component will have on the check amount.")

  public EffectOnPayEnum getEffectOnPay() {
    return effectOnPay;
  }


  public void setEffectOnPay(EffectOnPayEnum effectOnPay) {
    
    
    
    this.effectOnPay = effectOnPay;
  }


  public PayComponentResource1 startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The date that the pay component is able to be applied on a check.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date that the pay component is able to be applied on a check.")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public PayComponentResource1 endDate(OffsetDateTime endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The date that the pay component is not available to be applied on a check moving forward.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date that the pay component is not available to be applied on a check moving forward.")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    
    this.endDate = endDate;
  }


  public PayComponentResource1 jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * This is used optionally for overriding a job when it needs to be different then the workers default. This option is only available when the client has job costing.
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is used optionally for overriding a job when it needs to be different then the workers default. This option is only available when the client has job costing.")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public PayComponentResource1 laborAssignmentId(String laborAssignmentId) {
    
    
    
    
    this.laborAssignmentId = laborAssignmentId;
    return this;
  }

   /**
   * This is used optionally for overriding a labor assignment when it needs to be different then the workers assignment distribution. This option is only available when the client has labor assignment.
   * @return laborAssignmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is used optionally for overriding a labor assignment when it needs to be different then the workers assignment distribution. This option is only available when the client has labor assignment.")

  public String getLaborAssignmentId() {
    return laborAssignmentId;
  }


  public void setLaborAssignmentId(String laborAssignmentId) {
    
    
    
    this.laborAssignmentId = laborAssignmentId;
  }


  public PayComponentResource1 payRateId(String payRateId) {
    
    
    
    
    this.payRateId = payRateId;
    return this;
  }

   /**
   * The rate identifier for the workers compensation
   * @return payRateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rate identifier for the workers compensation")

  public String getPayRateId() {
    return payRateId;
  }


  public void setPayRateId(String payRateId) {
    
    
    
    this.payRateId = payRateId;
  }


  public PayComponentResource1 payRate(String payRate) {
    
    
    
    
    this.payRate = payRate;
    return this;
  }

   /**
   * The rate amount that will be applied for this component. Used in conjunction with Hours or Units.
   * @return payRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40.2", value = "The rate amount that will be applied for this component. Used in conjunction with Hours or Units.")

  public String getPayRate() {
    return payRate;
  }


  public void setPayRate(String payRate) {
    
    
    
    this.payRate = payRate;
  }


  public PayComponentResource1 payHours(String payHours) {
    
    
    
    
    this.payHours = payHours;
    return this;
  }

   /**
   * The number of hours that will be applied for this component. Used in conjunction with rate
   * @return payHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of hours that will be applied for this component. Used in conjunction with rate")

  public String getPayHours() {
    return payHours;
  }


  public void setPayHours(String payHours) {
    
    
    
    this.payHours = payHours;
  }


  public PayComponentResource1 payUnits(String payUnits) {
    
    
    
    
    this.payUnits = payUnits;
    return this;
  }

   /**
   * The number of units that will be applied for this component. Used in conjunction with rate.
   * @return payUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "The number of units that will be applied for this component. Used in conjunction with rate.")

  public String getPayUnits() {
    return payUnits;
  }


  public void setPayUnits(String payUnits) {
    
    
    
    this.payUnits = payUnits;
  }


  public PayComponentResource1 payAmount(String payAmount) {
    
    
    
    
    this.payAmount = payAmount;
    return this;
  }

   /**
   * The flat amount to be applied for this component. Not used with Rate, Hours, or Units.
   * @return payAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The flat amount to be applied for this component. Not used with Rate, Hours, or Units.")

  public String getPayAmount() {
    return payAmount;
  }


  public void setPayAmount(String payAmount) {
    
    
    
    this.payAmount = payAmount;
  }


  public PayComponentResource1 lineDate(OffsetDateTime lineDate) {
    
    
    
    
    this.lineDate = lineDate;
    return this;
  }

   /**
   * This is used optionally for specifying a date that the earning was generated on.
   * @return lineDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is used optionally for specifying a date that the earning was generated on.")

  public OffsetDateTime getLineDate() {
    return lineDate;
  }


  public void setLineDate(OffsetDateTime lineDate) {
    
    
    
    this.lineDate = lineDate;
  }


  public PayComponentResource1 memoed(Boolean memoed) {
    
    
    
    
    this.memoed = memoed;
    return this;
  }

   /**
   * This is used optionally for memoing the payHours or payUnits so that they are informational when using a payAmount.
   * @return memoed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is used optionally for memoing the payHours or payUnits so that they are informational when using a payAmount.")

  public Boolean getMemoed() {
    return memoed;
  }


  public void setMemoed(Boolean memoed) {
    
    
    
    this.memoed = memoed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayComponentResource1 instance itself
   */
  public PayComponentResource1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayComponentResource1 payComponentResource1 = (PayComponentResource1) o;
    return Objects.equals(this.description, payComponentResource1.description) &&
        Objects.equals(this.componentId, payComponentResource1.componentId) &&
        Objects.equals(this.checkComponentId, payComponentResource1.checkComponentId) &&
        Objects.equals(this.name, payComponentResource1.name) &&
        Objects.equals(this.classificationType, payComponentResource1.classificationType) &&
        Objects.equals(this.effectOnPay, payComponentResource1.effectOnPay) &&
        Objects.equals(this.startDate, payComponentResource1.startDate) &&
        Objects.equals(this.endDate, payComponentResource1.endDate) &&
        Objects.equals(this.jobId, payComponentResource1.jobId) &&
        Objects.equals(this.laborAssignmentId, payComponentResource1.laborAssignmentId) &&
        Objects.equals(this.payRateId, payComponentResource1.payRateId) &&
        Objects.equals(this.payRate, payComponentResource1.payRate) &&
        Objects.equals(this.payHours, payComponentResource1.payHours) &&
        Objects.equals(this.payUnits, payComponentResource1.payUnits) &&
        Objects.equals(this.payAmount, payComponentResource1.payAmount) &&
        Objects.equals(this.lineDate, payComponentResource1.lineDate) &&
        Objects.equals(this.memoed, payComponentResource1.memoed)&&
        Objects.equals(this.additionalProperties, payComponentResource1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, componentId, checkComponentId, name, classificationType, effectOnPay, startDate, endDate, jobId, laborAssignmentId, payRateId, payRate, payHours, payUnits, payAmount, lineDate, memoed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayComponentResource1 {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    checkComponentId: ").append(toIndentedString(checkComponentId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    classificationType: ").append(toIndentedString(classificationType)).append("\n");
    sb.append("    effectOnPay: ").append(toIndentedString(effectOnPay)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    laborAssignmentId: ").append(toIndentedString(laborAssignmentId)).append("\n");
    sb.append("    payRateId: ").append(toIndentedString(payRateId)).append("\n");
    sb.append("    payRate: ").append(toIndentedString(payRate)).append("\n");
    sb.append("    payHours: ").append(toIndentedString(payHours)).append("\n");
    sb.append("    payUnits: ").append(toIndentedString(payUnits)).append("\n");
    sb.append("    payAmount: ").append(toIndentedString(payAmount)).append("\n");
    sb.append("    lineDate: ").append(toIndentedString(lineDate)).append("\n");
    sb.append("    memoed: ").append(toIndentedString(memoed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("componentId");
    openapiFields.add("checkComponentId");
    openapiFields.add("name");
    openapiFields.add("classificationType");
    openapiFields.add("effectOnPay");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("jobId");
    openapiFields.add("laborAssignmentId");
    openapiFields.add("payRateId");
    openapiFields.add("payRate");
    openapiFields.add("payHours");
    openapiFields.add("payUnits");
    openapiFields.add("payAmount");
    openapiFields.add("lineDate");
    openapiFields.add("memoed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayComponentResource1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayComponentResource1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayComponentResource1 is not found in the empty JSON string", PayComponentResource1.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("componentId") != null && !jsonObj.get("componentId").isJsonNull()) && !jsonObj.get("componentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentId").toString()));
      }
      if ((jsonObj.get("checkComponentId") != null && !jsonObj.get("checkComponentId").isJsonNull()) && !jsonObj.get("checkComponentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkComponentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkComponentId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("classificationType") != null && !jsonObj.get("classificationType").isJsonNull()) && !jsonObj.get("classificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classificationType").toString()));
      }
      if ((jsonObj.get("effectOnPay") != null && !jsonObj.get("effectOnPay").isJsonNull()) && !jsonObj.get("effectOnPay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectOnPay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectOnPay").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("laborAssignmentId") != null && !jsonObj.get("laborAssignmentId").isJsonNull()) && !jsonObj.get("laborAssignmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `laborAssignmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("laborAssignmentId").toString()));
      }
      if ((jsonObj.get("payRateId") != null && !jsonObj.get("payRateId").isJsonNull()) && !jsonObj.get("payRateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payRateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payRateId").toString()));
      }
      if ((jsonObj.get("payRate") != null && !jsonObj.get("payRate").isJsonNull()) && !jsonObj.get("payRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payRate").toString()));
      }
      if ((jsonObj.get("payHours") != null && !jsonObj.get("payHours").isJsonNull()) && !jsonObj.get("payHours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payHours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payHours").toString()));
      }
      if ((jsonObj.get("payUnits") != null && !jsonObj.get("payUnits").isJsonNull()) && !jsonObj.get("payUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payUnits").toString()));
      }
      if ((jsonObj.get("payAmount") != null && !jsonObj.get("payAmount").isJsonNull()) && !jsonObj.get("payAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payAmount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayComponentResource1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayComponentResource1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayComponentResource1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayComponentResource1.class));

       return (TypeAdapter<T>) new TypeAdapter<PayComponentResource1>() {
           @Override
           public void write(JsonWriter out, PayComponentResource1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayComponentResource1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayComponentResource1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayComponentResource1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayComponentResource1
  * @throws IOException if the JSON string is invalid with respect to PayComponentResource1
  */
  public static PayComponentResource1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayComponentResource1.class);
  }

 /**
  * Convert an instance of PayComponentResource1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

