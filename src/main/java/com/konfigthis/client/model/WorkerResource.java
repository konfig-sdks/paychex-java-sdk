/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CommunicationResource;
import com.konfigthis.client.model.JobTitleResource;
import com.konfigthis.client.model.LegalIdResource;
import com.konfigthis.client.model.NameResource;
import com.konfigthis.client.model.OrganizationResource;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.SupervisorResource;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkerResource
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkerResource {
  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  /**
   * The type of worker. This data field cannot be PATCHED.
   */
  @JsonAdapter(WorkerTypeEnum.Adapter.class)
 public enum WorkerTypeEnum {
    EMPLOYEE("EMPLOYEE"),
    
    CONTRACTOR("CONTRACTOR"),
    
    INDEPENDENT_CONTRACTOR("INDEPENDENT_CONTRACTOR");

    private String value;

    WorkerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkerTypeEnum fromValue(String value) {
      for (WorkerTypeEnum b : WorkerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkerTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WORKER_TYPE = "workerType";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE)
  private WorkerTypeEnum workerType;

  /**
   * The type of employment for the worker.
   */
  @JsonAdapter(EmploymentTypeEnum.Adapter.class)
 public enum EmploymentTypeEnum {
    FULL_TIME("FULL_TIME"),
    
    PART_TIME("PART_TIME");

    private String value;

    EmploymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentTypeEnum fromValue(String value) {
      for (EmploymentTypeEnum b : EmploymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE = "employmentType";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE)
  private EmploymentTypeEnum employmentType;

  /**
   * The Overtime classification of the worker.This data field cannot be PATCHED for ACTIVE workers.
   */
  @JsonAdapter(ExemptionTypeEnum.Adapter.class)
 public enum ExemptionTypeEnum {
    EXEMPT("EXEMPT"),
    
    NON_EXEMPT("NON_EXEMPT");

    private String value;

    ExemptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExemptionTypeEnum fromValue(String value) {
      for (ExemptionTypeEnum b : ExemptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExemptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExemptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExemptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExemptionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXEMPTION_TYPE = "exemptionType";
  @SerializedName(SERIALIZED_NAME_EXEMPTION_TYPE)
  private ExemptionTypeEnum exemptionType;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  /**
   * Gets or Sets sex
   */
  @JsonAdapter(SexEnum.Adapter.class)
 public enum SexEnum {
    MALE("MALE"),
    
    FEMALE("FEMALE"),
    
    NOT_SPECIFIED("NOT_SPECIFIED");

    private String value;

    SexEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexEnum fromValue(String value) {
      for (SexEnum b : SexEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEX = "sex";
  @SerializedName(SERIALIZED_NAME_SEX)
  private SexEnum sex;

  /**
   * Disclaimer:This parameter is not visible in Flex for the client. This data field cannot be PATCHED for ACTIVE workers.
   */
  @JsonAdapter(EthnicityCodeEnum.Adapter.class)
 public enum EthnicityCodeEnum {
    _BLANK_("(blank)"),
    
    HISPANIC_OR_LATINO("HISPANIC_OR_LATINO"),
    
    WHITE_NOT_OF_HISPANIC_ORIGIN("WHITE_NOT_OF_HISPANIC_ORIGIN"),
    
    BLACK_OR_AFRICAN_AMERICAN("BLACK_OR_AFRICAN_AMERICAN"),
    
    NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLAND("NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLAND"),
    
    ASIAN("ASIAN"),
    
    AMERICAN_INDIAN_OR_ALASKAN_NATIVE("AMERICAN_INDIAN_OR_ALASKAN_NATIVE"),
    
    TWO_OR_MORE_RACES("TWO_OR_MORE_RACES"),
    
    PREFER_NOT_TO_ANSWER("Prefer not to answer");

    private String value;

    EthnicityCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EthnicityCodeEnum fromValue(String value) {
      for (EthnicityCodeEnum b : EthnicityCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EthnicityCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EthnicityCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EthnicityCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EthnicityCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ETHNICITY_CODE = "ethnicityCode";
  @SerializedName(SERIALIZED_NAME_ETHNICITY_CODE)
  private EthnicityCodeEnum ethnicityCode;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hireDate";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private OffsetDateTime hireDate;

  public static final String SERIALIZED_NAME_CLOCK_ID = "clockId";
  @SerializedName(SERIALIZED_NAME_CLOCK_ID)
  private String clockId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameResource name;

  public static final String SERIALIZED_NAME_LEGAL_ID = "legalId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ID)
  private LegalIdResource legalId;

  public static final String SERIALIZED_NAME_LABOR_ASSIGNMENT_ID = "laborAssignmentId";
  @SerializedName(SERIALIZED_NAME_LABOR_ASSIGNMENT_ID)
  private String laborAssignmentId;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private JobTitleResource job;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private OrganizationResource organization;

  public static final String SERIALIZED_NAME_SUPERVISOR = "supervisor";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR)
  private SupervisorResource supervisor;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "currentStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private Status currentStatus;

  public static final String SERIALIZED_NAME_COMMUNICATIONS = "communications";
  @SerializedName(SERIALIZED_NAME_COMMUNICATIONS)
  private List<CommunicationResource> communications = null;

  public static final String SERIALIZED_NAME_WORKER_CORRELATION_ID = "workerCorrelationId";
  @SerializedName(SERIALIZED_NAME_WORKER_CORRELATION_ID)
  private String workerCorrelationId;

  public WorkerResource() {
  }

  public WorkerResource workerId(String workerId) {
    
    
    
    
    this.workerId = workerId;
    return this;
  }

   /**
   * The unique identifier associated with this worker representation.
   * @return workerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00Z5V9BTIHRQF2CF7BTH", value = "The unique identifier associated with this worker representation.")

  public String getWorkerId() {
    return workerId;
  }


  public void setWorkerId(String workerId) {
    
    
    
    this.workerId = workerId;
  }


  public WorkerResource employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * The workers employee identification information.
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3052", value = "The workers employee identification information.")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public WorkerResource workerType(WorkerTypeEnum workerType) {
    
    
    
    
    this.workerType = workerType;
    return this;
  }

   /**
   * The type of worker. This data field cannot be PATCHED.
   * @return workerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of worker. This data field cannot be PATCHED.")

  public WorkerTypeEnum getWorkerType() {
    return workerType;
  }


  public void setWorkerType(WorkerTypeEnum workerType) {
    
    
    
    this.workerType = workerType;
  }


  public WorkerResource employmentType(EmploymentTypeEnum employmentType) {
    
    
    
    
    this.employmentType = employmentType;
    return this;
  }

   /**
   * The type of employment for the worker.
   * @return employmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NON_EXEMPT", value = "The type of employment for the worker.")

  public EmploymentTypeEnum getEmploymentType() {
    return employmentType;
  }


  public void setEmploymentType(EmploymentTypeEnum employmentType) {
    
    
    
    this.employmentType = employmentType;
  }


  public WorkerResource exemptionType(ExemptionTypeEnum exemptionType) {
    
    
    
    
    this.exemptionType = exemptionType;
    return this;
  }

   /**
   * The Overtime classification of the worker.This data field cannot be PATCHED for ACTIVE workers.
   * @return exemptionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Overtime classification of the worker.This data field cannot be PATCHED for ACTIVE workers.")

  public ExemptionTypeEnum getExemptionType() {
    return exemptionType;
  }


  public void setExemptionType(ExemptionTypeEnum exemptionType) {
    
    
    
    this.exemptionType = exemptionType;
  }


  public WorkerResource birthDate(OffsetDateTime birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The workers date of birth. It cannot be greater than today&#39;s date.
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The workers date of birth. It cannot be greater than today's date.")

  public OffsetDateTime getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(OffsetDateTime birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public WorkerResource sex(SexEnum sex) {
    
    
    
    
    this.sex = sex;
    return this;
  }

   /**
   * Get sex
   * @return sex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MALE", value = "")

  public SexEnum getSex() {
    return sex;
  }


  public void setSex(SexEnum sex) {
    
    
    
    this.sex = sex;
  }


  public WorkerResource ethnicityCode(EthnicityCodeEnum ethnicityCode) {
    
    
    
    
    this.ethnicityCode = ethnicityCode;
    return this;
  }

   /**
   * Disclaimer:This parameter is not visible in Flex for the client. This data field cannot be PATCHED for ACTIVE workers.
   * @return ethnicityCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Disclaimer:This parameter is not visible in Flex for the client. This data field cannot be PATCHED for ACTIVE workers.")

  public EthnicityCodeEnum getEthnicityCode() {
    return ethnicityCode;
  }


  public void setEthnicityCode(EthnicityCodeEnum ethnicityCode) {
    
    
    
    this.ethnicityCode = ethnicityCode;
  }


  public WorkerResource hireDate(OffsetDateTime hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * The date which the worker was hired. It cannot be PATCHED for ACTIVE workers.
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2015-06-15T00:00Z", value = "The date which the worker was hired. It cannot be PATCHED for ACTIVE workers.")

  public OffsetDateTime getHireDate() {
    return hireDate;
  }


  public void setHireDate(OffsetDateTime hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public WorkerResource clockId(String clockId) {
    
    
    
    
    this.clockId = clockId;
    return this;
  }

   /**
   * The clock ID of the worker that can be an identification for other systems.
   * @return clockId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4321", value = "The clock ID of the worker that can be an identification for other systems.")

  public String getClockId() {
    return clockId;
  }


  public void setClockId(String clockId) {
    
    
    
    this.clockId = clockId;
  }


  public WorkerResource name(NameResource name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NameResource getName() {
    return name;
  }


  public void setName(NameResource name) {
    
    
    
    this.name = name;
  }


  public WorkerResource legalId(LegalIdResource legalId) {
    
    
    
    
    this.legalId = legalId;
    return this;
  }

   /**
   * Get legalId
   * @return legalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LegalIdResource getLegalId() {
    return legalId;
  }


  public void setLegalId(LegalIdResource legalId) {
    
    
    
    this.legalId = legalId;
  }


  public WorkerResource laborAssignmentId(String laborAssignmentId) {
    
    
    
    
    this.laborAssignmentId = laborAssignmentId;
    return this;
  }

   /**
   * The workers home labor assignment. This data field cannot be POSTED or PATCHED
   * @return laborAssignmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "970001557863345", value = "The workers home labor assignment. This data field cannot be POSTED or PATCHED")

  public String getLaborAssignmentId() {
    return laborAssignmentId;
  }


  public void setLaborAssignmentId(String laborAssignmentId) {
    
    
    
    this.laborAssignmentId = laborAssignmentId;
  }


  public WorkerResource jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * The workers home job. This data field cannot be POSTED or PATCHED.
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "970001557916904", value = "The workers home job. This data field cannot be POSTED or PATCHED.")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public WorkerResource locationId(String locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * The workers location. This data field cannot be POSTED or PATCHED.
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "970001701620675", value = "The workers location. This data field cannot be POSTED or PATCHED.")

  public String getLocationId() {
    return locationId;
  }


  public void setLocationId(String locationId) {
    
    
    
    this.locationId = locationId;
  }


  public WorkerResource job(JobTitleResource job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobTitleResource getJob() {
    return job;
  }


  public void setJob(JobTitleResource job) {
    
    
    
    this.job = job;
  }


  public WorkerResource organization(OrganizationResource organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrganizationResource getOrganization() {
    return organization;
  }


  public void setOrganization(OrganizationResource organization) {
    
    
    
    this.organization = organization;
  }


  public WorkerResource supervisor(SupervisorResource supervisor) {
    
    
    
    
    this.supervisor = supervisor;
    return this;
  }

   /**
   * Get supervisor
   * @return supervisor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SupervisorResource getSupervisor() {
    return supervisor;
  }


  public void setSupervisor(SupervisorResource supervisor) {
    
    
    
    this.supervisor = supervisor;
  }


  public WorkerResource currentStatus(Status currentStatus) {
    
    
    
    
    this.currentStatus = currentStatus;
    return this;
  }

   /**
   * Get currentStatus
   * @return currentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Status getCurrentStatus() {
    return currentStatus;
  }


  public void setCurrentStatus(Status currentStatus) {
    
    
    
    this.currentStatus = currentStatus;
  }


  public WorkerResource communications(List<CommunicationResource> communications) {
    
    
    
    
    this.communications = communications;
    return this;
  }

  public WorkerResource addCommunicationsItem(CommunicationResource communicationsItem) {
    if (this.communications == null) {
      this.communications = new ArrayList<>();
    }
    this.communications.add(communicationsItem);
    return this;
  }

   /**
   * Worker Communications. This data field cannot be updated for worker endpoint.
   * @return communications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Worker Communications. This data field cannot be updated for worker endpoint.")

  public List<CommunicationResource> getCommunications() {
    return communications;
  }


  public void setCommunications(List<CommunicationResource> communications) {
    
    
    
    this.communications = communications;
  }


  public WorkerResource workerCorrelationId(String workerCorrelationId) {
    
    
    
    
    this.workerCorrelationId = workerCorrelationId;
    return this;
  }

   /**
   * Id that you define which is used for error handling/responses.This data field is used while POSTING multiple IN_PROGRESS workers
   * @return workerCorrelationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id that you define which is used for error handling/responses.This data field is used while POSTING multiple IN_PROGRESS workers")

  public String getWorkerCorrelationId() {
    return workerCorrelationId;
  }


  public void setWorkerCorrelationId(String workerCorrelationId) {
    
    
    
    this.workerCorrelationId = workerCorrelationId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkerResource instance itself
   */
  public WorkerResource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerResource workerResource = (WorkerResource) o;
    return Objects.equals(this.workerId, workerResource.workerId) &&
        Objects.equals(this.employeeId, workerResource.employeeId) &&
        Objects.equals(this.workerType, workerResource.workerType) &&
        Objects.equals(this.employmentType, workerResource.employmentType) &&
        Objects.equals(this.exemptionType, workerResource.exemptionType) &&
        Objects.equals(this.birthDate, workerResource.birthDate) &&
        Objects.equals(this.sex, workerResource.sex) &&
        Objects.equals(this.ethnicityCode, workerResource.ethnicityCode) &&
        Objects.equals(this.hireDate, workerResource.hireDate) &&
        Objects.equals(this.clockId, workerResource.clockId) &&
        Objects.equals(this.name, workerResource.name) &&
        Objects.equals(this.legalId, workerResource.legalId) &&
        Objects.equals(this.laborAssignmentId, workerResource.laborAssignmentId) &&
        Objects.equals(this.jobId, workerResource.jobId) &&
        Objects.equals(this.locationId, workerResource.locationId) &&
        Objects.equals(this.job, workerResource.job) &&
        Objects.equals(this.organization, workerResource.organization) &&
        Objects.equals(this.supervisor, workerResource.supervisor) &&
        Objects.equals(this.currentStatus, workerResource.currentStatus) &&
        Objects.equals(this.communications, workerResource.communications) &&
        Objects.equals(this.workerCorrelationId, workerResource.workerCorrelationId)&&
        Objects.equals(this.additionalProperties, workerResource.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workerId, employeeId, workerType, employmentType, exemptionType, birthDate, sex, ethnicityCode, hireDate, clockId, name, legalId, laborAssignmentId, jobId, locationId, job, organization, supervisor, currentStatus, communications, workerCorrelationId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerResource {\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    workerType: ").append(toIndentedString(workerType)).append("\n");
    sb.append("    employmentType: ").append(toIndentedString(employmentType)).append("\n");
    sb.append("    exemptionType: ").append(toIndentedString(exemptionType)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    ethnicityCode: ").append(toIndentedString(ethnicityCode)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    clockId: ").append(toIndentedString(clockId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    legalId: ").append(toIndentedString(legalId)).append("\n");
    sb.append("    laborAssignmentId: ").append(toIndentedString(laborAssignmentId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    supervisor: ").append(toIndentedString(supervisor)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    communications: ").append(toIndentedString(communications)).append("\n");
    sb.append("    workerCorrelationId: ").append(toIndentedString(workerCorrelationId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("workerId");
    openapiFields.add("employeeId");
    openapiFields.add("workerType");
    openapiFields.add("employmentType");
    openapiFields.add("exemptionType");
    openapiFields.add("birthDate");
    openapiFields.add("sex");
    openapiFields.add("ethnicityCode");
    openapiFields.add("hireDate");
    openapiFields.add("clockId");
    openapiFields.add("name");
    openapiFields.add("legalId");
    openapiFields.add("laborAssignmentId");
    openapiFields.add("jobId");
    openapiFields.add("locationId");
    openapiFields.add("job");
    openapiFields.add("organization");
    openapiFields.add("supervisor");
    openapiFields.add("currentStatus");
    openapiFields.add("communications");
    openapiFields.add("workerCorrelationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkerResource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkerResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerResource is not found in the empty JSON string", WorkerResource.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("workerType") != null && !jsonObj.get("workerType").isJsonNull()) && !jsonObj.get("workerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerType").toString()));
      }
      if ((jsonObj.get("employmentType") != null && !jsonObj.get("employmentType").isJsonNull()) && !jsonObj.get("employmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentType").toString()));
      }
      if ((jsonObj.get("exemptionType") != null && !jsonObj.get("exemptionType").isJsonNull()) && !jsonObj.get("exemptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exemptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exemptionType").toString()));
      }
      if ((jsonObj.get("sex") != null && !jsonObj.get("sex").isJsonNull()) && !jsonObj.get("sex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex").toString()));
      }
      if ((jsonObj.get("ethnicityCode") != null && !jsonObj.get("ethnicityCode").isJsonNull()) && !jsonObj.get("ethnicityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethnicityCode").toString()));
      }
      if ((jsonObj.get("clockId") != null && !jsonObj.get("clockId").isJsonNull()) && !jsonObj.get("clockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clockId").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameResource.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      // validate the optional field `legalId`
      if (jsonObj.get("legalId") != null && !jsonObj.get("legalId").isJsonNull()) {
        LegalIdResource.validateJsonObject(jsonObj.getAsJsonObject("legalId"));
      }
      if ((jsonObj.get("laborAssignmentId") != null && !jsonObj.get("laborAssignmentId").isJsonNull()) && !jsonObj.get("laborAssignmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `laborAssignmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("laborAssignmentId").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        JobTitleResource.validateJsonObject(jsonObj.getAsJsonObject("job"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        OrganizationResource.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
      // validate the optional field `supervisor`
      if (jsonObj.get("supervisor") != null && !jsonObj.get("supervisor").isJsonNull()) {
        SupervisorResource.validateJsonObject(jsonObj.getAsJsonObject("supervisor"));
      }
      // validate the optional field `currentStatus`
      if (jsonObj.get("currentStatus") != null && !jsonObj.get("currentStatus").isJsonNull()) {
        Status.validateJsonObject(jsonObj.getAsJsonObject("currentStatus"));
      }
      if (jsonObj.get("communications") != null && !jsonObj.get("communications").isJsonNull()) {
        JsonArray jsonArraycommunications = jsonObj.getAsJsonArray("communications");
        if (jsonArraycommunications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("communications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `communications` to be an array in the JSON string but got `%s`", jsonObj.get("communications").toString()));
          }

          // validate the optional field `communications` (array)
          for (int i = 0; i < jsonArraycommunications.size(); i++) {
            CommunicationResource.validateJsonObject(jsonArraycommunications.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("workerCorrelationId") != null && !jsonObj.get("workerCorrelationId").isJsonNull()) && !jsonObj.get("workerCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerCorrelationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerResource.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerResource>() {
           @Override
           public void write(JsonWriter out, WorkerResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerResource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkerResource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkerResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkerResource
  * @throws IOException if the JSON string is invalid with respect to WorkerResource
  */
  public static WorkerResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerResource.class);
  }

 /**
  * Convert an instance of WorkerResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

