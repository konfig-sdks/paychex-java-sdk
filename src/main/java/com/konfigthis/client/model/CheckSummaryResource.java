/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Link;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckSummaryResource
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckSummaryResource {
  public static final String SERIALIZED_NAME_PAY_PERIOD_ID = "payPeriodId";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_ID)
  private String payPeriodId;

  public static final String SERIALIZED_NAME_CHECK_DATE = "checkDate";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private OffsetDateTime checkDate;

  public static final String SERIALIZED_NAME_PAY_RUN_DATE = "payRunDate";
  @SerializedName(SERIALIZED_NAME_PAY_RUN_DATE)
  private OffsetDateTime payRunDate;

  public static final String SERIALIZED_NAME_TOTAL_HRS = "totalHrs";
  @SerializedName(SERIALIZED_NAME_TOTAL_HRS)
  private String totalHrs;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "checkNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private String checkNumber;

  public static final String SERIALIZED_NAME_TOTAL_EARNINGS = "totalEarnings";
  @SerializedName(SERIALIZED_NAME_TOTAL_EARNINGS)
  private String totalEarnings;

  public static final String SERIALIZED_NAME_TOTAL_WITHHOLDINGS = "totalWithholdings";
  @SerializedName(SERIALIZED_NAME_TOTAL_WITHHOLDINGS)
  private String totalWithholdings;

  public static final String SERIALIZED_NAME_TOTAL_DEDUCTIONS = "totalDeductions";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEDUCTIONS)
  private String totalDeductions;

  public static final String SERIALIZED_NAME_NET_PAY = "netPay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private String netPay;

  public static final String SERIALIZED_NAME_CHECK_TYPE = "checkType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private String checkType;

  public static final String SERIALIZED_NAME_GROSS_Y_T_D = "grossYTD";
  @SerializedName(SERIALIZED_NAME_GROSS_Y_T_D)
  private String grossYTD;

  public static final String SERIALIZED_NAME_NET_Y_T_D = "netYTD";
  @SerializedName(SERIALIZED_NAME_NET_Y_T_D)
  private String netYTD;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;

  public CheckSummaryResource() {
  }

  public CheckSummaryResource payPeriodId(String payPeriodId) {
    
    
    
    
    this.payPeriodId = payPeriodId;
    return this;
  }

   /**
   * Get payPeriodId
   * @return payPeriodId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayPeriodId() {
    return payPeriodId;
  }


  public void setPayPeriodId(String payPeriodId) {
    
    
    
    this.payPeriodId = payPeriodId;
  }


  public CheckSummaryResource checkDate(OffsetDateTime checkDate) {
    
    
    
    
    this.checkDate = checkDate;
    return this;
  }

   /**
   * Get checkDate
   * @return checkDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCheckDate() {
    return checkDate;
  }


  public void setCheckDate(OffsetDateTime checkDate) {
    
    
    
    this.checkDate = checkDate;
  }


  public CheckSummaryResource payRunDate(OffsetDateTime payRunDate) {
    
    
    
    
    this.payRunDate = payRunDate;
    return this;
  }

   /**
   * Get payRunDate
   * @return payRunDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPayRunDate() {
    return payRunDate;
  }


  public void setPayRunDate(OffsetDateTime payRunDate) {
    
    
    
    this.payRunDate = payRunDate;
  }


  public CheckSummaryResource totalHrs(String totalHrs) {
    
    
    
    
    this.totalHrs = totalHrs;
    return this;
  }

   /**
   * Get totalHrs
   * @return totalHrs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalHrs() {
    return totalHrs;
  }


  public void setTotalHrs(String totalHrs) {
    
    
    
    this.totalHrs = totalHrs;
  }


  public CheckSummaryResource checkNumber(String checkNumber) {
    
    
    
    
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * Get checkNumber
   * @return checkNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckNumber() {
    return checkNumber;
  }


  public void setCheckNumber(String checkNumber) {
    
    
    
    this.checkNumber = checkNumber;
  }


  public CheckSummaryResource totalEarnings(String totalEarnings) {
    
    
    
    
    this.totalEarnings = totalEarnings;
    return this;
  }

   /**
   * Get totalEarnings
   * @return totalEarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalEarnings() {
    return totalEarnings;
  }


  public void setTotalEarnings(String totalEarnings) {
    
    
    
    this.totalEarnings = totalEarnings;
  }


  public CheckSummaryResource totalWithholdings(String totalWithholdings) {
    
    
    
    
    this.totalWithholdings = totalWithholdings;
    return this;
  }

   /**
   * Get totalWithholdings
   * @return totalWithholdings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalWithholdings() {
    return totalWithholdings;
  }


  public void setTotalWithholdings(String totalWithholdings) {
    
    
    
    this.totalWithholdings = totalWithholdings;
  }


  public CheckSummaryResource totalDeductions(String totalDeductions) {
    
    
    
    
    this.totalDeductions = totalDeductions;
    return this;
  }

   /**
   * Get totalDeductions
   * @return totalDeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalDeductions() {
    return totalDeductions;
  }


  public void setTotalDeductions(String totalDeductions) {
    
    
    
    this.totalDeductions = totalDeductions;
  }


  public CheckSummaryResource netPay(String netPay) {
    
    
    
    
    this.netPay = netPay;
    return this;
  }

   /**
   * Get netPay
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNetPay() {
    return netPay;
  }


  public void setNetPay(String netPay) {
    
    
    
    this.netPay = netPay;
  }


  public CheckSummaryResource checkType(String checkType) {
    
    
    
    
    this.checkType = checkType;
    return this;
  }

   /**
   * Get checkType
   * @return checkType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckType() {
    return checkType;
  }


  public void setCheckType(String checkType) {
    
    
    
    this.checkType = checkType;
  }


  public CheckSummaryResource grossYTD(String grossYTD) {
    
    
    
    
    this.grossYTD = grossYTD;
    return this;
  }

   /**
   * Get grossYTD
   * @return grossYTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGrossYTD() {
    return grossYTD;
  }


  public void setGrossYTD(String grossYTD) {
    
    
    
    this.grossYTD = grossYTD;
  }


  public CheckSummaryResource netYTD(String netYTD) {
    
    
    
    
    this.netYTD = netYTD;
    return this;
  }

   /**
   * Get netYTD
   * @return netYTD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNetYTD() {
    return netYTD;
  }


  public void setNetYTD(String netYTD) {
    
    
    
    this.netYTD = netYTD;
  }


  public CheckSummaryResource links(List<Link> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public CheckSummaryResource addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    
    
    
    this.links = links;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckSummaryResource instance itself
   */
  public CheckSummaryResource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckSummaryResource checkSummaryResource = (CheckSummaryResource) o;
    return Objects.equals(this.payPeriodId, checkSummaryResource.payPeriodId) &&
        Objects.equals(this.checkDate, checkSummaryResource.checkDate) &&
        Objects.equals(this.payRunDate, checkSummaryResource.payRunDate) &&
        Objects.equals(this.totalHrs, checkSummaryResource.totalHrs) &&
        Objects.equals(this.checkNumber, checkSummaryResource.checkNumber) &&
        Objects.equals(this.totalEarnings, checkSummaryResource.totalEarnings) &&
        Objects.equals(this.totalWithholdings, checkSummaryResource.totalWithholdings) &&
        Objects.equals(this.totalDeductions, checkSummaryResource.totalDeductions) &&
        Objects.equals(this.netPay, checkSummaryResource.netPay) &&
        Objects.equals(this.checkType, checkSummaryResource.checkType) &&
        Objects.equals(this.grossYTD, checkSummaryResource.grossYTD) &&
        Objects.equals(this.netYTD, checkSummaryResource.netYTD) &&
        Objects.equals(this.links, checkSummaryResource.links)&&
        Objects.equals(this.additionalProperties, checkSummaryResource.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payPeriodId, checkDate, payRunDate, totalHrs, checkNumber, totalEarnings, totalWithholdings, totalDeductions, netPay, checkType, grossYTD, netYTD, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckSummaryResource {\n");
    sb.append("    payPeriodId: ").append(toIndentedString(payPeriodId)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    payRunDate: ").append(toIndentedString(payRunDate)).append("\n");
    sb.append("    totalHrs: ").append(toIndentedString(totalHrs)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    totalEarnings: ").append(toIndentedString(totalEarnings)).append("\n");
    sb.append("    totalWithholdings: ").append(toIndentedString(totalWithholdings)).append("\n");
    sb.append("    totalDeductions: ").append(toIndentedString(totalDeductions)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("    grossYTD: ").append(toIndentedString(grossYTD)).append("\n");
    sb.append("    netYTD: ").append(toIndentedString(netYTD)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payPeriodId");
    openapiFields.add("checkDate");
    openapiFields.add("payRunDate");
    openapiFields.add("totalHrs");
    openapiFields.add("checkNumber");
    openapiFields.add("totalEarnings");
    openapiFields.add("totalWithholdings");
    openapiFields.add("totalDeductions");
    openapiFields.add("netPay");
    openapiFields.add("checkType");
    openapiFields.add("grossYTD");
    openapiFields.add("netYTD");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckSummaryResource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckSummaryResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckSummaryResource is not found in the empty JSON string", CheckSummaryResource.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payPeriodId") != null && !jsonObj.get("payPeriodId").isJsonNull()) && !jsonObj.get("payPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payPeriodId").toString()));
      }
      if ((jsonObj.get("totalHrs") != null && !jsonObj.get("totalHrs").isJsonNull()) && !jsonObj.get("totalHrs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalHrs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalHrs").toString()));
      }
      if ((jsonObj.get("checkNumber") != null && !jsonObj.get("checkNumber").isJsonNull()) && !jsonObj.get("checkNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkNumber").toString()));
      }
      if ((jsonObj.get("totalEarnings") != null && !jsonObj.get("totalEarnings").isJsonNull()) && !jsonObj.get("totalEarnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalEarnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalEarnings").toString()));
      }
      if ((jsonObj.get("totalWithholdings") != null && !jsonObj.get("totalWithholdings").isJsonNull()) && !jsonObj.get("totalWithholdings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalWithholdings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalWithholdings").toString()));
      }
      if ((jsonObj.get("totalDeductions") != null && !jsonObj.get("totalDeductions").isJsonNull()) && !jsonObj.get("totalDeductions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalDeductions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalDeductions").toString()));
      }
      if ((jsonObj.get("netPay") != null && !jsonObj.get("netPay").isJsonNull()) && !jsonObj.get("netPay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netPay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netPay").toString()));
      }
      if ((jsonObj.get("checkType") != null && !jsonObj.get("checkType").isJsonNull()) && !jsonObj.get("checkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkType").toString()));
      }
      if ((jsonObj.get("grossYTD") != null && !jsonObj.get("grossYTD").isJsonNull()) && !jsonObj.get("grossYTD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grossYTD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grossYTD").toString()));
      }
      if ((jsonObj.get("netYTD") != null && !jsonObj.get("netYTD").isJsonNull()) && !jsonObj.get("netYTD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netYTD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netYTD").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckSummaryResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckSummaryResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckSummaryResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckSummaryResource.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckSummaryResource>() {
           @Override
           public void write(JsonWriter out, CheckSummaryResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckSummaryResource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckSummaryResource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckSummaryResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckSummaryResource
  * @throws IOException if the JSON string is invalid with respect to CheckSummaryResource
  */
  public static CheckSummaryResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckSummaryResource.class);
  }

 /**
  * Convert an instance of CheckSummaryResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

