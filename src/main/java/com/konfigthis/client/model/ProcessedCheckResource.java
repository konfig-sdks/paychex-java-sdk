/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Link;
import com.konfigthis.client.model.ProcessedCheckComponentResource;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProcessedCheckResource
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProcessedCheckResource {
  public static final String SERIALIZED_NAME_PAY_PERIOD_ID = "payPeriodId";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_ID)
  private String payPeriodId;

  public static final String SERIALIZED_NAME_PAYCHECK_ID = "paycheckId";
  @SerializedName(SERIALIZED_NAME_PAYCHECK_ID)
  private String paycheckId;

  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public static final String SERIALIZED_NAME_CHECK_DATE = "checkDate";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private OffsetDateTime checkDate;

  public static final String SERIALIZED_NAME_NET_PAY = "netPay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private String netPay;

  public static final String SERIALIZED_NAME_CHECK_TYPE = "checkType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private String checkType;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "checkNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private String checkNumber;

  public static final String SERIALIZED_NAME_EARNINGS = "earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private List<ProcessedCheckComponentResource> earnings = null;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private List<ProcessedCheckComponentResource> deductions = null;

  public static final String SERIALIZED_NAME_INFORMATIONAL = "informational";
  @SerializedName(SERIALIZED_NAME_INFORMATIONAL)
  private List<ProcessedCheckComponentResource> informational = null;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<ProcessedCheckComponentResource> taxes = null;

  public static final String SERIALIZED_NAME_GROSS_EARNINGS = "grossEarnings";
  @SerializedName(SERIALIZED_NAME_GROSS_EARNINGS)
  private String grossEarnings;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;

  public ProcessedCheckResource() {
  }

  public ProcessedCheckResource payPeriodId(String payPeriodId) {
    
    
    
    
    this.payPeriodId = payPeriodId;
    return this;
  }

   /**
   * Get payPeriodId
   * @return payPeriodId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayPeriodId() {
    return payPeriodId;
  }


  public void setPayPeriodId(String payPeriodId) {
    
    
    
    this.payPeriodId = payPeriodId;
  }


  public ProcessedCheckResource paycheckId(String paycheckId) {
    
    
    
    
    this.paycheckId = paycheckId;
    return this;
  }

   /**
   * Get paycheckId
   * @return paycheckId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaycheckId() {
    return paycheckId;
  }


  public void setPaycheckId(String paycheckId) {
    
    
    
    this.paycheckId = paycheckId;
  }


  public ProcessedCheckResource workerId(String workerId) {
    
    
    
    
    this.workerId = workerId;
    return this;
  }

   /**
   * Get workerId
   * @return workerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWorkerId() {
    return workerId;
  }


  public void setWorkerId(String workerId) {
    
    
    
    this.workerId = workerId;
  }


  public ProcessedCheckResource checkDate(OffsetDateTime checkDate) {
    
    
    
    
    this.checkDate = checkDate;
    return this;
  }

   /**
   * Get checkDate
   * @return checkDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCheckDate() {
    return checkDate;
  }


  public void setCheckDate(OffsetDateTime checkDate) {
    
    
    
    this.checkDate = checkDate;
  }


  public ProcessedCheckResource netPay(String netPay) {
    
    
    
    
    this.netPay = netPay;
    return this;
  }

   /**
   * Get netPay
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNetPay() {
    return netPay;
  }


  public void setNetPay(String netPay) {
    
    
    
    this.netPay = netPay;
  }


  public ProcessedCheckResource checkType(String checkType) {
    
    
    
    
    this.checkType = checkType;
    return this;
  }

   /**
   * Get checkType
   * @return checkType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckType() {
    return checkType;
  }


  public void setCheckType(String checkType) {
    
    
    
    this.checkType = checkType;
  }


  public ProcessedCheckResource checkNumber(String checkNumber) {
    
    
    
    
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * Get checkNumber
   * @return checkNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckNumber() {
    return checkNumber;
  }


  public void setCheckNumber(String checkNumber) {
    
    
    
    this.checkNumber = checkNumber;
  }


  public ProcessedCheckResource earnings(List<ProcessedCheckComponentResource> earnings) {
    
    
    
    
    this.earnings = earnings;
    return this;
  }

  public ProcessedCheckResource addEarningsItem(ProcessedCheckComponentResource earningsItem) {
    if (this.earnings == null) {
      this.earnings = new ArrayList<>();
    }
    this.earnings.add(earningsItem);
    return this;
  }

   /**
   * Get earnings
   * @return earnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProcessedCheckComponentResource> getEarnings() {
    return earnings;
  }


  public void setEarnings(List<ProcessedCheckComponentResource> earnings) {
    
    
    
    this.earnings = earnings;
  }


  public ProcessedCheckResource deductions(List<ProcessedCheckComponentResource> deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

  public ProcessedCheckResource addDeductionsItem(ProcessedCheckComponentResource deductionsItem) {
    if (this.deductions == null) {
      this.deductions = new ArrayList<>();
    }
    this.deductions.add(deductionsItem);
    return this;
  }

   /**
   * Get deductions
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProcessedCheckComponentResource> getDeductions() {
    return deductions;
  }


  public void setDeductions(List<ProcessedCheckComponentResource> deductions) {
    
    
    
    this.deductions = deductions;
  }


  public ProcessedCheckResource informational(List<ProcessedCheckComponentResource> informational) {
    
    
    
    
    this.informational = informational;
    return this;
  }

  public ProcessedCheckResource addInformationalItem(ProcessedCheckComponentResource informationalItem) {
    if (this.informational == null) {
      this.informational = new ArrayList<>();
    }
    this.informational.add(informationalItem);
    return this;
  }

   /**
   * Get informational
   * @return informational
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProcessedCheckComponentResource> getInformational() {
    return informational;
  }


  public void setInformational(List<ProcessedCheckComponentResource> informational) {
    
    
    
    this.informational = informational;
  }


  public ProcessedCheckResource taxes(List<ProcessedCheckComponentResource> taxes) {
    
    
    
    
    this.taxes = taxes;
    return this;
  }

  public ProcessedCheckResource addTaxesItem(ProcessedCheckComponentResource taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProcessedCheckComponentResource> getTaxes() {
    return taxes;
  }


  public void setTaxes(List<ProcessedCheckComponentResource> taxes) {
    
    
    
    this.taxes = taxes;
  }


  public ProcessedCheckResource grossEarnings(String grossEarnings) {
    
    
    
    
    this.grossEarnings = grossEarnings;
    return this;
  }

   /**
   * Get grossEarnings
   * @return grossEarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGrossEarnings() {
    return grossEarnings;
  }


  public void setGrossEarnings(String grossEarnings) {
    
    
    
    this.grossEarnings = grossEarnings;
  }


  public ProcessedCheckResource links(List<Link> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public ProcessedCheckResource addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    
    
    
    this.links = links;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProcessedCheckResource instance itself
   */
  public ProcessedCheckResource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessedCheckResource processedCheckResource = (ProcessedCheckResource) o;
    return Objects.equals(this.payPeriodId, processedCheckResource.payPeriodId) &&
        Objects.equals(this.paycheckId, processedCheckResource.paycheckId) &&
        Objects.equals(this.workerId, processedCheckResource.workerId) &&
        Objects.equals(this.checkDate, processedCheckResource.checkDate) &&
        Objects.equals(this.netPay, processedCheckResource.netPay) &&
        Objects.equals(this.checkType, processedCheckResource.checkType) &&
        Objects.equals(this.checkNumber, processedCheckResource.checkNumber) &&
        Objects.equals(this.earnings, processedCheckResource.earnings) &&
        Objects.equals(this.deductions, processedCheckResource.deductions) &&
        Objects.equals(this.informational, processedCheckResource.informational) &&
        Objects.equals(this.taxes, processedCheckResource.taxes) &&
        Objects.equals(this.grossEarnings, processedCheckResource.grossEarnings) &&
        Objects.equals(this.links, processedCheckResource.links)&&
        Objects.equals(this.additionalProperties, processedCheckResource.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payPeriodId, paycheckId, workerId, checkDate, netPay, checkType, checkNumber, earnings, deductions, informational, taxes, grossEarnings, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessedCheckResource {\n");
    sb.append("    payPeriodId: ").append(toIndentedString(payPeriodId)).append("\n");
    sb.append("    paycheckId: ").append(toIndentedString(paycheckId)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    informational: ").append(toIndentedString(informational)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    grossEarnings: ").append(toIndentedString(grossEarnings)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payPeriodId");
    openapiFields.add("paycheckId");
    openapiFields.add("workerId");
    openapiFields.add("checkDate");
    openapiFields.add("netPay");
    openapiFields.add("checkType");
    openapiFields.add("checkNumber");
    openapiFields.add("earnings");
    openapiFields.add("deductions");
    openapiFields.add("informational");
    openapiFields.add("taxes");
    openapiFields.add("grossEarnings");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProcessedCheckResource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProcessedCheckResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessedCheckResource is not found in the empty JSON string", ProcessedCheckResource.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payPeriodId") != null && !jsonObj.get("payPeriodId").isJsonNull()) && !jsonObj.get("payPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payPeriodId").toString()));
      }
      if ((jsonObj.get("paycheckId") != null && !jsonObj.get("paycheckId").isJsonNull()) && !jsonObj.get("paycheckId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paycheckId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paycheckId").toString()));
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
      if ((jsonObj.get("netPay") != null && !jsonObj.get("netPay").isJsonNull()) && !jsonObj.get("netPay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netPay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netPay").toString()));
      }
      if ((jsonObj.get("checkType") != null && !jsonObj.get("checkType").isJsonNull()) && !jsonObj.get("checkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkType").toString()));
      }
      if ((jsonObj.get("checkNumber") != null && !jsonObj.get("checkNumber").isJsonNull()) && !jsonObj.get("checkNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkNumber").toString()));
      }
      if (jsonObj.get("earnings") != null && !jsonObj.get("earnings").isJsonNull()) {
        JsonArray jsonArrayearnings = jsonObj.getAsJsonArray("earnings");
        if (jsonArrayearnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("earnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `earnings` to be an array in the JSON string but got `%s`", jsonObj.get("earnings").toString()));
          }

          // validate the optional field `earnings` (array)
          for (int i = 0; i < jsonArrayearnings.size(); i++) {
            ProcessedCheckComponentResource.validateJsonObject(jsonArrayearnings.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) {
        JsonArray jsonArraydeductions = jsonObj.getAsJsonArray("deductions");
        if (jsonArraydeductions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deductions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deductions` to be an array in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
          }

          // validate the optional field `deductions` (array)
          for (int i = 0; i < jsonArraydeductions.size(); i++) {
            ProcessedCheckComponentResource.validateJsonObject(jsonArraydeductions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("informational") != null && !jsonObj.get("informational").isJsonNull()) {
        JsonArray jsonArrayinformational = jsonObj.getAsJsonArray("informational");
        if (jsonArrayinformational != null) {
          // ensure the json data is an array
          if (!jsonObj.get("informational").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `informational` to be an array in the JSON string but got `%s`", jsonObj.get("informational").toString()));
          }

          // validate the optional field `informational` (array)
          for (int i = 0; i < jsonArrayinformational.size(); i++) {
            ProcessedCheckComponentResource.validateJsonObject(jsonArrayinformational.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            ProcessedCheckComponentResource.validateJsonObject(jsonArraytaxes.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("grossEarnings") != null && !jsonObj.get("grossEarnings").isJsonNull()) && !jsonObj.get("grossEarnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grossEarnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grossEarnings").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessedCheckResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessedCheckResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessedCheckResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessedCheckResource.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessedCheckResource>() {
           @Override
           public void write(JsonWriter out, ProcessedCheckResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessedCheckResource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProcessedCheckResource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProcessedCheckResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProcessedCheckResource
  * @throws IOException if the JSON string is invalid with respect to ProcessedCheckResource
  */
  public static ProcessedCheckResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessedCheckResource.class);
  }

 /**
  * Convert an instance of ProcessedCheckResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

