/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Link;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CommunicationResource1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CommunicationResource1 {
  public static final String SERIALIZED_NAME_COMMUNICATION_ID = "communicationId";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_ID)
  private String communicationId;

  /**
   * A set of communication types classifying an instruction that the customer, requester, or subject must comply with in order for the screening to go forward. NOTE: PHONE and EMAIL type supports BUSINESS and PERSONAL usage type only.MOBILE_PHONE, FAX and PAGER supports BUSINESS usage type only.This data field cannot be PATCHED.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    STREET_ADDRESS("STREET_ADDRESS"),
    
    PO_BOX_ADDRESS("PO_BOX_ADDRESS"),
    
    PHONE("PHONE"),
    
    MOBILE_PHONE("MOBILE_PHONE"),
    
    FAX("FAX"),
    
    EMAIL("EMAIL"),
    
    PAGER("PAGER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * A code classifying a designated use associated with a contact method. For example, whether a telephone or email address is one for business communications or one primarily for personal use.This data field cannot be PATCHED.
   */
  @JsonAdapter(UsageTypeEnum.Adapter.class)
 public enum UsageTypeEnum {
    PERSONAL("PERSONAL"),
    
    BUSINESS("BUSINESS"),
    
    HOME("HOME"),
    
    WORK("WORK"),
    
    LOCATION_STREET_ADDRESS("LOCATION_STREET_ADDRESS"),
    
    MAILING_ADDRESS("MAILING_ADDRESS");

    private String value;

    UsageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageTypeEnum fromValue(String value) {
      for (UsageTypeEnum b : UsageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USAGE_TYPE = "usageType";
  @SerializedName(SERIALIZED_NAME_USAGE_TYPE)
  private UsageTypeEnum usageType;

  public static final String SERIALIZED_NAME_DIAL_COUNTRY = "dialCountry";
  @SerializedName(SERIALIZED_NAME_DIAL_COUNTRY)
  private String dialCountry;

  public static final String SERIALIZED_NAME_DIAL_AREA = "dialArea";
  @SerializedName(SERIALIZED_NAME_DIAL_AREA)
  private String dialArea;

  public static final String SERIALIZED_NAME_DIAL_NUMBER = "dialNumber";
  @SerializedName(SERIALIZED_NAME_DIAL_NUMBER)
  private String dialNumber;

  public static final String SERIALIZED_NAME_DIAL_EXTENSION = "dialExtension";
  @SerializedName(SERIALIZED_NAME_DIAL_EXTENSION)
  private String dialExtension;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_STREET_LINE_ONE = "streetLineOne";
  @SerializedName(SERIALIZED_NAME_STREET_LINE_ONE)
  private String streetLineOne;

  public static final String SERIALIZED_NAME_STREET_LINE_TWO = "streetLineTwo";
  @SerializedName(SERIALIZED_NAME_STREET_LINE_TWO)
  private String streetLineTwo;

  public static final String SERIALIZED_NAME_POST_OFFICE_BOX = "postOfficeBox";
  @SerializedName(SERIALIZED_NAME_POST_OFFICE_BOX)
  private String postOfficeBox;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_POSTAL_CODE_EXTENSION = "postalCodeExtension";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_EXTENSION)
  private String postalCodeExtension;

  public static final String SERIALIZED_NAME_COUNTRY_SUBDIVISION_CODE = "countrySubdivisionCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_SUBDIVISION_CODE)
  private String countrySubdivisionCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;

  public CommunicationResource1() {
  }

  public CommunicationResource1 communicationId(String communicationId) {
    
    
    
    
    this.communicationId = communicationId;
    return this;
  }

   /**
   * The ID for the workers specific communication item.
   * @return communicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID for the workers specific communication item.")

  public String getCommunicationId() {
    return communicationId;
  }


  public void setCommunicationId(String communicationId) {
    
    
    
    this.communicationId = communicationId;
  }


  public CommunicationResource1 type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * A set of communication types classifying an instruction that the customer, requester, or subject must comply with in order for the screening to go forward. NOTE: PHONE and EMAIL type supports BUSINESS and PERSONAL usage type only.MOBILE_PHONE, FAX and PAGER supports BUSINESS usage type only.This data field cannot be PATCHED.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A set of communication types classifying an instruction that the customer, requester, or subject must comply with in order for the screening to go forward. NOTE: PHONE and EMAIL type supports BUSINESS and PERSONAL usage type only.MOBILE_PHONE, FAX and PAGER supports BUSINESS usage type only.This data field cannot be PATCHED.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CommunicationResource1 usageType(UsageTypeEnum usageType) {
    
    
    
    
    this.usageType = usageType;
    return this;
  }

   /**
   * A code classifying a designated use associated with a contact method. For example, whether a telephone or email address is one for business communications or one primarily for personal use.This data field cannot be PATCHED.
   * @return usageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A code classifying a designated use associated with a contact method. For example, whether a telephone or email address is one for business communications or one primarily for personal use.This data field cannot be PATCHED.")

  public UsageTypeEnum getUsageType() {
    return usageType;
  }


  public void setUsageType(UsageTypeEnum usageType) {
    
    
    
    this.usageType = usageType;
  }


  public CommunicationResource1 dialCountry(String dialCountry) {
    
    
    
    
    this.dialCountry = dialCountry;
    return this;
  }

   /**
   * The country dialing code for a communication number
   * @return dialCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The country dialing code for a communication number")

  public String getDialCountry() {
    return dialCountry;
  }


  public void setDialCountry(String dialCountry) {
    
    
    
    this.dialCountry = dialCountry;
  }


  public CommunicationResource1 dialArea(String dialArea) {
    
    
    
    
    this.dialArea = dialArea;
    return this;
  }

   /**
   * The area dialing code for a communication number
   * @return dialArea
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The area dialing code for a communication number")

  public String getDialArea() {
    return dialArea;
  }


  public void setDialArea(String dialArea) {
    
    
    
    this.dialArea = dialArea;
  }


  public CommunicationResource1 dialNumber(String dialNumber) {
    
    
    
    
    this.dialNumber = dialNumber;
    return this;
  }

   /**
   * The communication number, not including country dialing or area dialing codes
   * @return dialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The communication number, not including country dialing or area dialing codes")

  public String getDialNumber() {
    return dialNumber;
  }


  public void setDialNumber(String dialNumber) {
    
    
    
    this.dialNumber = dialNumber;
  }


  public CommunicationResource1 dialExtension(String dialExtension) {
    
    
    
    
    this.dialExtension = dialExtension;
    return this;
  }

   /**
   * The extension of the associated communication number
   * @return dialExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The extension of the associated communication number")

  public String getDialExtension() {
    return dialExtension;
  }


  public void setDialExtension(String dialExtension) {
    
    
    
    this.dialExtension = dialExtension;
  }


  public CommunicationResource1 uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The mailto address as specified in RFC2368
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mailto address as specified in RFC2368")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public CommunicationResource1 streetLineOne(String streetLineOne) {
    
    
    
    
    this.streetLineOne = streetLineOne;
    return this;
  }

   /**
   * The street address line one
   * @return streetLineOne
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The street address line one")

  public String getStreetLineOne() {
    return streetLineOne;
  }


  public void setStreetLineOne(String streetLineOne) {
    
    
    
    this.streetLineOne = streetLineOne;
  }


  public CommunicationResource1 streetLineTwo(String streetLineTwo) {
    
    
    
    
    this.streetLineTwo = streetLineTwo;
    return this;
  }

   /**
   * The street address line two
   * @return streetLineTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The street address line two")

  public String getStreetLineTwo() {
    return streetLineTwo;
  }


  public void setStreetLineTwo(String streetLineTwo) {
    
    
    
    this.streetLineTwo = streetLineTwo;
  }


  public CommunicationResource1 postOfficeBox(String postOfficeBox) {
    
    
    
    
    this.postOfficeBox = postOfficeBox;
    return this;
  }

   /**
   * The postal office box. This data field cannot be PATCHED
   * @return postOfficeBox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The postal office box. This data field cannot be PATCHED")

  public String getPostOfficeBox() {
    return postOfficeBox;
  }


  public void setPostOfficeBox(String postOfficeBox) {
    
    
    
    this.postOfficeBox = postOfficeBox;
  }


  public CommunicationResource1 city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * The city name
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The city name")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public CommunicationResource1 postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * The zip-code
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The zip-code")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public CommunicationResource1 postalCodeExtension(String postalCodeExtension) {
    
    
    
    
    this.postalCodeExtension = postalCodeExtension;
    return this;
  }

   /**
   * The zip-code extension
   * @return postalCodeExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The zip-code extension")

  public String getPostalCodeExtension() {
    return postalCodeExtension;
  }


  public void setPostalCodeExtension(String postalCodeExtension) {
    
    
    
    this.postalCodeExtension = postalCodeExtension;
  }


  public CommunicationResource1 countrySubdivisionCode(String countrySubdivisionCode) {
    
    
    
    
    this.countrySubdivisionCode = countrySubdivisionCode;
    return this;
  }

   /**
   * The state code (ISO 3166 subdivision code). This data field cannot be PATCHED for ACTIVE worker
   * @return countrySubdivisionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state code (ISO 3166 subdivision code). This data field cannot be PATCHED for ACTIVE worker")

  public String getCountrySubdivisionCode() {
    return countrySubdivisionCode;
  }


  public void setCountrySubdivisionCode(String countrySubdivisionCode) {
    
    
    
    this.countrySubdivisionCode = countrySubdivisionCode;
  }


  public CommunicationResource1 countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The country code (ISO 3166 alpha-2)
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The country code (ISO 3166 alpha-2)")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public CommunicationResource1 links(List<Link> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public CommunicationResource1 addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    
    
    
    this.links = links;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CommunicationResource1 instance itself
   */
  public CommunicationResource1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationResource1 communicationResource1 = (CommunicationResource1) o;
    return Objects.equals(this.communicationId, communicationResource1.communicationId) &&
        Objects.equals(this.type, communicationResource1.type) &&
        Objects.equals(this.usageType, communicationResource1.usageType) &&
        Objects.equals(this.dialCountry, communicationResource1.dialCountry) &&
        Objects.equals(this.dialArea, communicationResource1.dialArea) &&
        Objects.equals(this.dialNumber, communicationResource1.dialNumber) &&
        Objects.equals(this.dialExtension, communicationResource1.dialExtension) &&
        Objects.equals(this.uri, communicationResource1.uri) &&
        Objects.equals(this.streetLineOne, communicationResource1.streetLineOne) &&
        Objects.equals(this.streetLineTwo, communicationResource1.streetLineTwo) &&
        Objects.equals(this.postOfficeBox, communicationResource1.postOfficeBox) &&
        Objects.equals(this.city, communicationResource1.city) &&
        Objects.equals(this.postalCode, communicationResource1.postalCode) &&
        Objects.equals(this.postalCodeExtension, communicationResource1.postalCodeExtension) &&
        Objects.equals(this.countrySubdivisionCode, communicationResource1.countrySubdivisionCode) &&
        Objects.equals(this.countryCode, communicationResource1.countryCode) &&
        Objects.equals(this.links, communicationResource1.links)&&
        Objects.equals(this.additionalProperties, communicationResource1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(communicationId, type, usageType, dialCountry, dialArea, dialNumber, dialExtension, uri, streetLineOne, streetLineTwo, postOfficeBox, city, postalCode, postalCodeExtension, countrySubdivisionCode, countryCode, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationResource1 {\n");
    sb.append("    communicationId: ").append(toIndentedString(communicationId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usageType: ").append(toIndentedString(usageType)).append("\n");
    sb.append("    dialCountry: ").append(toIndentedString(dialCountry)).append("\n");
    sb.append("    dialArea: ").append(toIndentedString(dialArea)).append("\n");
    sb.append("    dialNumber: ").append(toIndentedString(dialNumber)).append("\n");
    sb.append("    dialExtension: ").append(toIndentedString(dialExtension)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    streetLineOne: ").append(toIndentedString(streetLineOne)).append("\n");
    sb.append("    streetLineTwo: ").append(toIndentedString(streetLineTwo)).append("\n");
    sb.append("    postOfficeBox: ").append(toIndentedString(postOfficeBox)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    postalCodeExtension: ").append(toIndentedString(postalCodeExtension)).append("\n");
    sb.append("    countrySubdivisionCode: ").append(toIndentedString(countrySubdivisionCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("communicationId");
    openapiFields.add("type");
    openapiFields.add("usageType");
    openapiFields.add("dialCountry");
    openapiFields.add("dialArea");
    openapiFields.add("dialNumber");
    openapiFields.add("dialExtension");
    openapiFields.add("uri");
    openapiFields.add("streetLineOne");
    openapiFields.add("streetLineTwo");
    openapiFields.add("postOfficeBox");
    openapiFields.add("city");
    openapiFields.add("postalCode");
    openapiFields.add("postalCodeExtension");
    openapiFields.add("countrySubdivisionCode");
    openapiFields.add("countryCode");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommunicationResource1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommunicationResource1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationResource1 is not found in the empty JSON string", CommunicationResource1.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("communicationId") != null && !jsonObj.get("communicationId").isJsonNull()) && !jsonObj.get("communicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communicationId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("usageType") != null && !jsonObj.get("usageType").isJsonNull()) && !jsonObj.get("usageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageType").toString()));
      }
      if ((jsonObj.get("dialCountry") != null && !jsonObj.get("dialCountry").isJsonNull()) && !jsonObj.get("dialCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialCountry").toString()));
      }
      if ((jsonObj.get("dialArea") != null && !jsonObj.get("dialArea").isJsonNull()) && !jsonObj.get("dialArea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialArea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialArea").toString()));
      }
      if ((jsonObj.get("dialNumber") != null && !jsonObj.get("dialNumber").isJsonNull()) && !jsonObj.get("dialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialNumber").toString()));
      }
      if ((jsonObj.get("dialExtension") != null && !jsonObj.get("dialExtension").isJsonNull()) && !jsonObj.get("dialExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialExtension").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("streetLineOne") != null && !jsonObj.get("streetLineOne").isJsonNull()) && !jsonObj.get("streetLineOne").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetLineOne` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetLineOne").toString()));
      }
      if ((jsonObj.get("streetLineTwo") != null && !jsonObj.get("streetLineTwo").isJsonNull()) && !jsonObj.get("streetLineTwo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetLineTwo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetLineTwo").toString()));
      }
      if ((jsonObj.get("postOfficeBox") != null && !jsonObj.get("postOfficeBox").isJsonNull()) && !jsonObj.get("postOfficeBox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postOfficeBox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postOfficeBox").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("postalCodeExtension") != null && !jsonObj.get("postalCodeExtension").isJsonNull()) && !jsonObj.get("postalCodeExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCodeExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCodeExtension").toString()));
      }
      if ((jsonObj.get("countrySubdivisionCode") != null && !jsonObj.get("countrySubdivisionCode").isJsonNull()) && !jsonObj.get("countrySubdivisionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countrySubdivisionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countrySubdivisionCode").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationResource1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationResource1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationResource1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationResource1.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationResource1>() {
           @Override
           public void write(JsonWriter out, CommunicationResource1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationResource1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CommunicationResource1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommunicationResource1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommunicationResource1
  * @throws IOException if the JSON string is invalid with respect to CommunicationResource1
  */
  public static CommunicationResource1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationResource1.class);
  }

 /**
  * Convert an instance of CommunicationResource1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

