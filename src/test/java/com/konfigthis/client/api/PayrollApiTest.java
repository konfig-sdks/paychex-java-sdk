/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CheckResource;
import com.konfigthis.client.model.CheckResource1;
import com.konfigthis.client.model.CheckResource2;
import com.konfigthis.client.model.Link;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PayComponentResource;
import com.konfigthis.client.model.PayComponentResource1;
import com.konfigthis.client.model.PayComponentResource2;
import com.konfigthis.client.model.PayPeriodResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayrollApi
 */
@Disabled
public class PayrollApiTest {

    private static PayrollApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayrollApi(apiClient);
    }

    /**
     * Company Checks
     *
     * Add a check for one or more worker within a company for an available pay period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCompanyChecksTest() throws ApiException {
        String companyId = null;
        String workerId = null;
        String paycheckId = null;
        String payPeriodId = null;
        String checkCorrelationId = null;
        Boolean blockAutoDistribution = null;
        List<PayComponentResource> earnings = null;
        List<PayComponentResource> deductions = null;
        String checkDate = null;
        List<PayComponentResource> informational = null;
        List<PayComponentResource> taxes = null;
        List<Link> links = null;
        CheckResource response = api.addCompanyChecks(companyId)
                .workerId(workerId)
                .paycheckId(paycheckId)
                .payPeriodId(payPeriodId)
                .checkCorrelationId(checkCorrelationId)
                .blockAutoDistribution(blockAutoDistribution)
                .earnings(earnings)
                .deductions(deductions)
                .checkDate(checkDate)
                .informational(informational)
                .taxes(taxes)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Pay Component to a check.
     *
     * Add a new pay component on an individual unprocessed check.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPayComponentToCheckTest() throws ApiException {
        String checkId = null;
        String description = null;
        String componentId = null;
        String checkComponentId = null;
        String name = null;
        String classificationType = null;
        String effectOnPay = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<String> appliesToWorkerTypes = null;
        String jobId = null;
        String laborAssignmentId = null;
        String payRateId = null;
        String payRate = null;
        String payHours = null;
        String payUnits = null;
        String payAmount = null;
        Boolean memoed = null;
        OffsetDateTime lineDate = null;
        CheckResource2 response = api.addPayComponentToCheck(checkId)
                .description(description)
                .componentId(componentId)
                .checkComponentId(checkComponentId)
                .name(name)
                .classificationType(classificationType)
                .effectOnPay(effectOnPay)
                .startDate(startDate)
                .endDate(endDate)
                .appliesToWorkerTypes(appliesToWorkerTypes)
                .jobId(jobId)
                .laborAssignmentId(laborAssignmentId)
                .payRateId(payRateId)
                .payRate(payRate)
                .payHours(payHours)
                .payUnits(payUnits)
                .payAmount(payAmount)
                .memoed(memoed)
                .lineDate(lineDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Check
     *
     * Add a check to a worker for an unprocessed pay period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWorkerCheckTest() throws ApiException {
        String workerId = null;
        String workerId = null;
        String paycheckId = null;
        String payPeriodId = null;
        String checkCorrelationId = null;
        Boolean blockAutoDistribution = null;
        List<PayComponentResource1> earnings = null;
        List<PayComponentResource1> deductions = null;
        List<PayComponentResource1> informational = null;
        List<PayComponentResource1> taxes = null;
        CheckResource1 response = api.addWorkerCheck(workerId)
                .workerId(workerId)
                .paycheckId(paycheckId)
                .payPeriodId(payPeriodId)
                .checkCorrelationId(checkCorrelationId)
                .blockAutoDistribution(blockAutoDistribution)
                .earnings(earnings)
                .deductions(deductions)
                .informational(informational)
                .taxes(taxes)
                .execute();
        // TODO: test validations
    }

    /**
     * Checks by Pay Period and User
     *
     * Delete checks by pay period Id and user Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChecksByPayPeriodAndUserTest() throws ApiException {
        String payperiodid = null;
        Boolean deletebyuserid = null;
        api.deleteChecksByPayPeriodAndUser(payperiodid, deletebyuserid)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Checks
     *
     * Get check(s) that are for a specific company within a processed or unprocessed pay period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyChecksByPayPeriodTest() throws ApiException {
        String companyId = null;
        String payperiodid = null;
        Integer offset = null;
        Integer limit = null;
        Boolean filterbyuserid = null;
        CheckResource response = api.getCompanyChecksByPayPeriod(companyId, payperiodid)
                .offset(offset)
                .limit(limit)
                .filterbyuserid(filterbyuserid)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Pay Component
     *
     * Pay component associated with the company.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyPayComponentTest() throws ApiException {
        String companyId = null;
        String paycomponentId = null;
        String asof = null;
        PayComponentResource response = api.getCompanyPayComponent(companyId, paycomponentId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Pay Components
     *
     * Array of pay components that are configured for a company. Pay components are earnings and deductions which are used for payroll.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyPayComponentsTest() throws ApiException {
        String companyId = null;
        String effectonpay = null;
        String asof = null;
        String classificationtype = null;
        String name = null;
        PayComponentResource response = api.getCompanyPayComponents(companyId)
                .effectonpay(effectonpay)
                .asof(asof)
                .classificationtype(classificationtype)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Pay Periods
     *
     * Array of pay periods associated with the company.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyPayPeriodsTest() throws ApiException {
        String companyId = null;
        List<String> status = null;
        String from = null;
        String to = null;
        PayPeriodResource response = api.getCompanyPayPeriods(companyId)
                .status(status)
                .from(from)
                .to(to)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Pay Period
     *
     * A single pay period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayPeriodTest() throws ApiException {
        String companyId = null;
        String payperiodId = null;
        PayPeriodResource response = api.getPayPeriod(companyId, payperiodId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Check
     *
     * Retrieve a specific unprocessed or processed check that a worker has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkerCheckTest() throws ApiException {
        String workerId = null;
        String paycheckId = null;
        CheckResource1 response = api.getWorkerCheck(workerId, paycheckId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Checks
     *
     * Get check(s) that are for a specific worker   within a processed or unprocessed pay period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkerChecksByPayPeriodTest() throws ApiException {
        String workerId = null;
        String payperiodid = null;
        Boolean filterbyuserid = null;
        CheckResource1 response = api.getWorkerChecksByPayPeriod(workerId, payperiodid)
                .filterbyuserid(filterbyuserid)
                .execute();
        // TODO: test validations
    }

    /**
     * Pay Component of a check
     *
     * Remove a single pay component on an individual unprocessed check.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePayComponentTest() throws ApiException {
        String checkId = null;
        String checkComponentId = null;
        api.removePayComponent(checkId, checkComponentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Check
     *
     * Remove a specific unprocessed check that a worker has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeWorkerCheckTest() throws ApiException {
        String workerId = null;
        String paycheckId = null;
        CheckResource1 response = api.removeWorkerCheck(workerId, paycheckId)
                .execute();
        // TODO: test validations
    }

    /**
     * Pay Component of a Check
     *
     *  Update a single pay component on an individual unprocessed check.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayComponentTest() throws ApiException {
        String checkId = null;
        String checkComponentId = null;
        String description = null;
        String componentId = null;
        String checkComponentId = null;
        String name = null;
        String classificationType = null;
        String effectOnPay = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<String> appliesToWorkerTypes = null;
        String jobId = null;
        String laborAssignmentId = null;
        String payRateId = null;
        String payRate = null;
        String payHours = null;
        String payUnits = null;
        String payAmount = null;
        Boolean memoed = null;
        OffsetDateTime lineDate = null;
        PayComponentResource2 response = api.updatePayComponent(checkId, checkComponentId)
                .description(description)
                .componentId(componentId)
                .checkComponentId(checkComponentId)
                .name(name)
                .classificationType(classificationType)
                .effectOnPay(effectOnPay)
                .startDate(startDate)
                .endDate(endDate)
                .appliesToWorkerTypes(appliesToWorkerTypes)
                .jobId(jobId)
                .laborAssignmentId(laborAssignmentId)
                .payRateId(payRateId)
                .payRate(payRate)
                .payHours(payHours)
                .payUnits(payUnits)
                .payAmount(payAmount)
                .memoed(memoed)
                .lineDate(lineDate)
                .execute();
        // TODO: test validations
    }

}
