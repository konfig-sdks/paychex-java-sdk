/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CalculationBase;
import com.konfigthis.client.model.CommunicationResource;
import com.konfigthis.client.model.CompanyResource;
import com.konfigthis.client.model.ContactTypeResource;
import com.konfigthis.client.model.CustomFieldsCategoryResource;
import com.konfigthis.client.model.CustomFieldsDropdownResource;
import com.konfigthis.client.model.CustomFieldsResource;
import com.konfigthis.client.model.FrequencyCombinationUnitResource;
import com.konfigthis.client.model.JobResource;
import com.konfigthis.client.model.JobSegmentsConfigResource;
import com.konfigthis.client.model.JobSegmentsResource;
import com.konfigthis.client.model.JobTitleResource;
import com.konfigthis.client.model.LaborAssignmentResource;
import com.konfigthis.client.model.LegalIdResource;
import com.konfigthis.client.model.Link;
import com.konfigthis.client.model.LocationResource;
import com.konfigthis.client.model.NameResource;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrganizationResource;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.SupervisorResource;
import com.konfigthis.client.model.WorkerResource;
import com.konfigthis.client.model.WorkerStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompanyApi
 */
@Disabled
public class CompanyApiTest {

    private static CompanyApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompanyApi(apiClient);
    }

    /**
     * In Progress Workers
     *
     * Add one or more workers to a specific company that your application has been granted access to. These workers will be added with an IN_PROGRESS status assigned to them.  In_Progress workers will pre-populated within Paychex Flex and will require someone to complete them to be fully available with the Flex platform.  Paychex Flex UI will hold a majority of validation, rules, and enforced required fields based on the clients configuration.  Required fields are givenName, familyName, &amp; workerType (when adding multiple workers at a time you will need to also include a \&quot;workerCorrelationId\&quot; data element on each worker, that will be used as an identifier in our responses). Optionally you can include a workers communications object within the worker.  Once generated the IN_PROGRESS worker can have their communications, Compensation and Federal Taxes POSTed and PATCHed using the generated workerId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addInProgressWorkersTest() throws ApiException {
        String companyId = null;
        String workerId = null;
        String employeeId = null;
        String workerType = null;
        String employmentType = null;
        String exemptionType = null;
        OffsetDateTime birthDate = null;
        String sex = null;
        String ethnicityCode = null;
        OffsetDateTime hireDate = null;
        String clockId = null;
        NameResource name = null;
        LegalIdResource legalId = null;
        String laborAssignmentId = null;
        String jobId = null;
        String locationId = null;
        JobTitleResource job = null;
        OrganizationResource organization = null;
        SupervisorResource supervisor = null;
        Status currentStatus = null;
        List<CommunicationResource> communications = null;
        String workerCorrelationId = null;
        WorkerResource response = api.addInProgressWorkers(companyId)
                .workerId(workerId)
                .employeeId(employeeId)
                .workerType(workerType)
                .employmentType(employmentType)
                .exemptionType(exemptionType)
                .birthDate(birthDate)
                .sex(sex)
                .ethnicityCode(ethnicityCode)
                .hireDate(hireDate)
                .clockId(clockId)
                .name(name)
                .legalId(legalId)
                .laborAssignmentId(laborAssignmentId)
                .jobId(jobId)
                .locationId(locationId)
                .job(job)
                .organization(organization)
                .supervisor(supervisor)
                .currentStatus(currentStatus)
                .communications(communications)
                .workerCorrelationId(workerCorrelationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Job
     *
     * Add a company level job. If a client has their job numbering structured in 2-3 separate &#39;segments&#39;, you may need to first do a GET on the jobsegements endpoint, so you can see how many segments and the character length of each segment, as well as the name of those segments, which you will need to have before you POST.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addJobTest() throws ApiException {
        String companyId = null;
        String jobId = null;
        String jobCorrelationId = null;
        String jobName = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<Link> links = null;
        JobSegmentsResource jobNumber = null;
        JobResource response = api.addJob(companyId)
                .jobId(jobId)
                .jobCorrelationId(jobCorrelationId)
                .jobName(jobName)
                .startDate(startDate)
                .endDate(endDate)
                .links(links)
                .jobNumber(jobNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Field
     *
     * Create CustomFields at the company level which a company could be assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomFieldAtCompanyLevelTest() throws ApiException {
        String companyId = null;
        String customFieldId = null;
        String customFieldName = null;
        String categoryId = null;
        Boolean required = null;
        Boolean checkStub = null;
        Boolean employeeEditable = null;
        String type = null;
        Boolean booleanValue = null;
        List<Link> links = null;
        OffsetDateTime dateValue = null;
        String textValue = null;
        Double maxTextLength = null;
        Double numericValue = null;
        List<CustomFieldsDropdownResource> dropdown = null;
        CustomFieldsResource response = api.createCustomFieldAtCompanyLevel(companyId)
                .customFieldId(customFieldId)
                .customFieldName(customFieldName)
                .categoryId(categoryId)
                .required(required)
                .checkStub(checkStub)
                .employeeEditable(employeeEditable)
                .type(type)
                .booleanValue(booleanValue)
                .links(links)
                .dateValue(dateValue)
                .textValue(textValue)
                .maxTextLength(maxTextLength)
                .numericValue(numericValue)
                .dropdown(dropdown)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Fields Category
     *
     * Create CustomFieldsCategory at the company level which a company could be assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomFieldCategoryTest() throws ApiException {
        String companyId = null;
        String categoryId = null;
        String categoryName = null;
        List<Link> links = null;
        CustomFieldsCategoryResource response = api.createCustomFieldCategory(companyId)
                .categoryId(categoryId)
                .categoryName(categoryName)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Field
     *
     * Delete CustomField at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomFieldTest() throws ApiException {
        String companyId = null;
        String customfieldid = null;
        api.deleteCustomField(companyId, customfieldid)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Fields Category
     *
     * Delete CustomFieldsCategory at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomFieldsCategoryTest() throws ApiException {
        String companyId = null;
        String categoryid = null;
        api.deleteCustomFieldsCategory(companyId, categoryid)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Calculation Bases
     *
     * Array of calculation bases that are used with a worker pay components that are not FLAT_DOLLAR_AMOUNT allow you to determine what to apply the calculation against when determining the amount during the pay run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalculationBasesTest() throws ApiException {
        String companyId = null;
        CalculationBase response = api.getCalculationBases(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Contact Types
     *
     * Information about contact types that your application has been granted access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTypesTest() throws ApiException {
        String companyId = null;
        ContactTypeResource response = api.getContactTypes(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Field
     *
     * Information about a single CustomField.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldTest() throws ApiException {
        String companyId = null;
        String customFieldId = null;
        CustomFieldsResource response = api.getCustomField(companyId, customFieldId)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Fields Categories
     *
     * Array of CustomFieldsCategories Configured at the company level 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldCategoriesTest() throws ApiException {
        String companyId = null;
        CustomFieldsCategoryResource response = api.getCustomFieldCategories(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Fields
     *
     * Array of customFields Configured at the company level 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        String companyId = null;
        CustomFieldsResource response = api.getCustomFields(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Fields Category
     *
     * Information about a single CustomFieldsCategory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsCategoryTest() throws ApiException {
        String companyId = null;
        String categoryId = null;
        CustomFieldsCategoryResource response = api.getCustomFieldsCategory(companyId, categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * A Company
     *
     * Information about a single company that your application has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInformationTest() throws ApiException {
        String companyId = null;
        CompanyResource response = api.getInformation(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Job
     *
     * Information about a single Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobInformationTest() throws ApiException {
        String companyId = null;
        String jobId = null;
        String asof = null;
        JobResource response = api.getJobInformation(companyId, jobId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Job Segments
     *
     * Retrieve job segment structure setup for this client. This endpoint is only available if the client has their job numbering set up in &#39;2-3 separate &#39;segments&#39;.  The response will give you back the exact character lengths and the segment names so you are able to POST.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobSegmentStructureSetupTest() throws ApiException {
        String companyId = null;
        JobSegmentsConfigResource response = api.getJobSegmentStructureSetup(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Job Title
     *
     * Information about a single Job Title.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTitleTest() throws ApiException {
        String companyId = null;
        String workerJobTitleId = null;
        JobTitleResource response = api.getJobTitle(companyId, workerJobTitleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Jobs
     *
     * Array of jobs set at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String companyId = null;
        String asof = null;
        JobResource response = api.getJobs(companyId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Labour Assignment
     *
     * Information about a single Labor Assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaborAssignmentTest() throws ApiException {
        String companyId = null;
        String laborAssignmentId = null;
        String asof = null;
        LaborAssignmentResource response = api.getLaborAssignment(companyId, laborAssignmentId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Location
     *
     * Information about a single Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationTest() throws ApiException {
        String companyId = null;
        String locationId = null;
        String asof = null;
        LocationResource response = api.getLocation(companyId, locationId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Locations
     *
     * Array of locations set at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationsTest() throws ApiException {
        String companyId = null;
        String asof = null;
        LocationResource response = api.getLocations(companyId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Organization
     *
     * Information about a single Organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationTest() throws ApiException {
        String companyId = null;
        String organizationId = null;
        OrganizationResource response = api.getOrganization(companyId, organizationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Organizations
     *
     * Array of organizations set at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsTest() throws ApiException {
        String companyId = null;
        OrganizationResource response = api.getOrganizations(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Pay Frequencies
     *
     * Array of pay frequencies that workers maybe paid on. This is a generic array that is currently not specific to the companies pay frequency. This is to be used with the workers pay components to determine what the frequency, occurrence, and intervals are allowed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayFrequenciesTest() throws ApiException {
        String companyId = null;
        String payfrequency = null;
        FrequencyCombinationUnitResource response = api.getPayFrequencies(companyId)
                .payfrequency(payfrequency)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Worker Status
     *
     * Information about a single status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        String companyId = null;
        String workerStatusId = null;
        WorkerStatus response = api.getStatus(companyId, workerStatusId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Workers
     *
     * Array of workers (employee and contractor) for all of the companies who are associated with a specific company that your application has been granted access to. The combination of query parameters to be used with this endpoint are as follows:  1. givenname, familyname, legallastfour  2. from, to (start date, end date)  3. employeeid  4. locationid  5. offset, limit (paging).  Note: Paging and filtering attributes cannot be applied together. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkersTest() throws ApiException {
        String companyId = null;
        String givenname = null;
        String familyname = null;
        String legallastfour = null;
        String employeeid = null;
        String from = null;
        String to = null;
        String locationid = null;
        WorkerResource response = api.getWorkers(companyId)
                .givenname(givenname)
                .familyname(familyname)
                .legallastfour(legallastfour)
                .employeeid(employeeid)
                .from(from)
                .to(to)
                .locationid(locationid)
                .execute();
        // TODO: test validations
    }

    /**
     * Companies
     *
     * Array of companies that your application has been granted with some level of access. Your Application (API Key) can be granted access to one or more companies (clients) accounts that are associated with one or more product lines within Paychex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String displayid = null;
        CompanyResource response = api.list()
                .displayid(displayid)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Job Titles
     *
     * Array of job titles set at the company level which a worker could be assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJobTitlesTest() throws ApiException {
        String companyId = null;
        JobTitleResource response = api.listJobTitles(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Labour Assignments
     *
     * Array of labor assignments set at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLaborAssignmentsTest() throws ApiException {
        String companyId = null;
        String asof = null;
        LaborAssignmentResource response = api.listLaborAssignments(companyId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Worker Statuses
     *
     * Array of statuses set at the company level which a worker could be assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkerStatusesTest() throws ApiException {
        String companyId = null;
        WorkerStatus response = api.listWorkerStatuses(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Field
     *
     * Update CustomFields at the company level which a company could be assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        String companyId = null;
        String customfieldid = null;
        String customFieldId = null;
        String customFieldName = null;
        String categoryId = null;
        Boolean required = null;
        Boolean checkStub = null;
        Boolean employeeEditable = null;
        String type = null;
        Boolean booleanValue = null;
        List<Link> links = null;
        OffsetDateTime dateValue = null;
        String textValue = null;
        Double maxTextLength = null;
        Double numericValue = null;
        List<CustomFieldsDropdownResource> dropdown = null;
        CustomFieldsResource response = api.updateCustomField(companyId, customfieldid)
                .customFieldId(customFieldId)
                .customFieldName(customFieldName)
                .categoryId(categoryId)
                .required(required)
                .checkStub(checkStub)
                .employeeEditable(employeeEditable)
                .type(type)
                .booleanValue(booleanValue)
                .links(links)
                .dateValue(dateValue)
                .textValue(textValue)
                .maxTextLength(maxTextLength)
                .numericValue(numericValue)
                .dropdown(dropdown)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom Fields Category
     *
     * Update  CustomFieldsCategory at the company level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldsCategoryTest() throws ApiException {
        String companyId = null;
        String categoryid = null;
        String categoryId = null;
        String categoryName = null;
        List<Link> links = null;
        CustomFieldsCategoryResource response = api.updateCustomFieldsCategory(companyId, categoryid)
                .categoryId(categoryId)
                .categoryName(categoryName)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Company Job
     *
     * Update a single Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobTest() throws ApiException {
        String companyId = null;
        String jobId = null;
        String jobId = null;
        String jobCorrelationId = null;
        String jobName = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<Link> links = null;
        JobSegmentsResource jobNumber = null;
        JobResource response = api.updateJob(companyId, jobId)
                .jobId(jobId)
                .jobCorrelationId(jobCorrelationId)
                .jobName(jobName)
                .startDate(startDate)
                .endDate(endDate)
                .links(links)
                .jobNumber(jobNumber)
                .execute();
        // TODO: test validations
    }

}
