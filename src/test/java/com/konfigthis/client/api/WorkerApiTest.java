/*
 * External API
 *   # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CollectionResource;
import com.konfigthis.client.model.CommunicationResource1;
import com.konfigthis.client.model.ContactTypeResource1;
import com.konfigthis.client.model.DirectDepositResource;
import com.konfigthis.client.model.JobTitleResource1;
import com.konfigthis.client.model.LegalIdResource1;
import com.konfigthis.client.model.Link;
import com.konfigthis.client.model.NameResource1;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrganizationResource1;
import com.konfigthis.client.model.PayComponentFrequencyTypeResource1;
import com.konfigthis.client.model.PayRateResource;
import com.konfigthis.client.model.PayRatesStandardResource;
import com.konfigthis.client.model.PayStandardResource;
import com.konfigthis.client.model.RecurringResource;
import com.konfigthis.client.model.RelationshipResource;
import com.konfigthis.client.model.Status1;
import com.konfigthis.client.model.SupervisorResource1;
import com.konfigthis.client.model.TimeOffResource;
import com.konfigthis.client.model.WorkerAssignmentDistributionsResource;
import com.konfigthis.client.model.WorkerContactResource;
import com.konfigthis.client.model.WorkerCustomFieldsResource;
import com.konfigthis.client.model.WorkerFederalTaxResource;
import com.konfigthis.client.model.WorkerResource1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkerApi
 */
@Disabled
public class WorkerApiTest {

    private static WorkerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkerApi(apiClient);
    }

    /**
     * Worker Communication
     *
     * Add a single communication to the \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCommunicationTest() throws ApiException {
        String workerId = null;
        String communicationId = null;
        String type = null;
        String usageType = null;
        String dialCountry = null;
        String dialArea = null;
        String dialNumber = null;
        String dialExtension = null;
        String uri = null;
        String streetLineOne = null;
        String streetLineTwo = null;
        String postOfficeBox = null;
        String city = null;
        String postalCode = null;
        String postalCodeExtension = null;
        String countrySubdivisionCode = null;
        String countryCode = null;
        List<Link> links = null;
        CommunicationResource1 response = api.addCommunication(workerId)
                .communicationId(communicationId)
                .type(type)
                .usageType(usageType)
                .dialCountry(dialCountry)
                .dialArea(dialArea)
                .dialNumber(dialNumber)
                .dialExtension(dialExtension)
                .uri(uri)
                .streetLineOne(streetLineOne)
                .streetLineTwo(streetLineTwo)
                .postOfficeBox(postOfficeBox)
                .city(city)
                .postalCode(postalCode)
                .postalCodeExtension(postalCodeExtension)
                .countrySubdivisionCode(countrySubdivisionCode)
                .countryCode(countryCode)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Direct Deposit
     *
     * Add a direct deposit to an \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDirectDepositTest() throws ApiException {
        String workerId = null;
        String directDepositId = null;
        OffsetDateTime startDate = null;
        String paymentType = null;
        String accountType = null;
        Double value = null;
        String routingNumber = null;
        String accountNumber = null;
        String priority = null;
        List<Link> links = null;
        DirectDepositResource response = api.addDirectDeposit(workerId)
                .directDepositId(directDepositId)
                .startDate(startDate)
                .paymentType(paymentType)
                .accountType(accountType)
                .value(value)
                .routingNumber(routingNumber)
                .accountNumber(accountNumber)
                .priority(priority)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Federal Tax
     *
     * Add federal tax setup for a \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFederalTaxSetupTest() throws ApiException {
        String workerId = null;
        String taxId = null;
        String filingStatus = null;
        String multipleJobs = null;
        String dependentsAmount = null;
        String otherIncome = null;
        String deductionsAmount = null;
        String extraWithholdingAmount = null;
        String taxesWithheld = null;
        WorkerFederalTaxResource response = api.addFederalTaxSetup(workerId)
                .taxId(taxId)
                .filingStatus(filingStatus)
                .multipleJobs(multipleJobs)
                .dependentsAmount(dependentsAmount)
                .otherIncome(otherIncome)
                .deductionsAmount(deductionsAmount)
                .extraWithholdingAmount(extraWithholdingAmount)
                .taxesWithheld(taxesWithheld)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Component
     *
     * Add a single pay component to the \&quot;Active\&quot; worker. This pay component will be used for apply recurring pay components on a workers check based on the frequency specified. supports the ability to POST both Addition and Reduction type pay components.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPayComponentTest() throws ApiException {
        String workerId = null;
        String workerComponentId = null;
        String componentId = null;
        String name = null;
        String calculationType = null;
        String calculationBaseId = null;
        Double value = null;
        OffsetDateTime startDate = null;
        OffsetDateTime effectiveDate = null;
        OffsetDateTime endDate = null;
        String effectOnPay = null;
        String classificationType = null;
        PayComponentFrequencyTypeResource1 frequency = null;
        List<Link> links = null;
        RecurringResource response = api.addPayComponent(workerId)
                .workerComponentId(workerComponentId)
                .componentId(componentId)
                .name(name)
                .calculationType(calculationType)
                .calculationBaseId(calculationBaseId)
                .value(value)
                .startDate(startDate)
                .effectiveDate(effectiveDate)
                .endDate(endDate)
                .effectOnPay(effectOnPay)
                .classificationType(classificationType)
                .frequency(frequency)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Rate
     *
     * Add a single compensation rate to the \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPayRateTest() throws ApiException {
        String workerId = null;
        String description = null;
        String rateId = null;
        OffsetDateTime startDate = null;
        String rateNumber = null;
        String rateType = null;
        String amount = null;
        String standardHours = null;
        String standardOvertime = null;
        Boolean _default = null;
        String effectiveDate = null;
        List<Link> links = null;
        PayRateResource response = api.addPayRate(workerId)
                .description(description)
                .rateId(rateId)
                .startDate(startDate)
                .rateNumber(rateNumber)
                .rateType(rateType)
                .amount(amount)
                .standardHours(standardHours)
                .standardOvertime(standardOvertime)
                ._default(_default)
                .effectiveDate(effectiveDate)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Contacts
     *
     * Add one or more contacts to a worker. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. If one or more contacts are posted for the same contact type, and there are currently no contacts of that type for the worker, the first contact in the list will be made primary unless another in the list is expressly marked as primary. When a new contact is made primary the previous primary contact will be marked as not primary. Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWorkerContactsTest() throws ApiException {
        String workerId = null;
        String contactId = null;
        ContactTypeResource1 contactType = null;
        RelationshipResource relationship = null;
        WorkerContactResource response = api.addWorkerContacts(workerId)
                .contactId(contactId)
                .contactType(contactType)
                .relationship(relationship)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Custom Field
     *
     * Create CustomField at the worker level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomFieldTest() throws ApiException {
        String workerId = null;
        String workerCustomFieldId = null;
        String customFieldId = null;
        String type = null;
        Boolean booleanValue = null;
        String textValue = null;
        Double numericValue = null;
        OffsetDateTime dateValue = null;
        String dropdownId = null;
        String dropdownValue = null;
        String customFieldName = null;
        Boolean required = null;
        Boolean checkStub = null;
        Boolean employeeEditable = null;
        WorkerCustomFieldsResource response = api.createCustomField(workerId)
                .workerCustomFieldId(workerCustomFieldId)
                .customFieldId(customFieldId)
                .type(type)
                .booleanValue(booleanValue)
                .textValue(textValue)
                .numericValue(numericValue)
                .dateValue(dateValue)
                .dropdownId(dropdownId)
                .dropdownValue(dropdownValue)
                .customFieldName(customFieldName)
                .required(required)
                .checkStub(checkStub)
                .employeeEditable(employeeEditable)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Contact
     *
     * Delete a worker contact by contactId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactByContactIdTest() throws ApiException {
        String workerId = null;
        String contactId = null;
        api.deleteContactByContactId(workerId, contactId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Custom Field
     *
     * Delete CustomField at the worker level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomFieldTest() throws ApiException {
        String workerId = null;
        String workerCustomFieldId = null;
        api.deleteCustomField(workerId, workerCustomFieldId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker
     *
     * Delete in progress Worker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInProgressTest() throws ApiException {
        String workerId = null;
        api.deleteInProgress(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Communication
     *
     * A \&quot;Active\&quot; or \&quot;In-progress\&quot; workers single communication item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommunicationItemTest() throws ApiException {
        String workerId = null;
        String communicationId = null;
        CommunicationResource1 response = api.getCommunicationItem(workerId, communicationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Communications
     *
     * Information about \&quot;Active\&quot; or \&quot;In-progress\&quot;  workers communications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommunicationsTest() throws ApiException {
        String workerId = null;
        CommunicationResource1 response = api.getCommunications(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Compensation
     *
     * Information about a workers compensation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompensationInformationTest() throws ApiException {
        String workerId = null;
        CollectionResource response = api.getCompensationInformation(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Contact
     *
     * Get a worker contact by contactId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactByContactIdTest() throws ApiException {
        String workerId = null;
        String contactId = null;
        WorkerContactResource response = api.getContactByContactId(workerId, contactId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Contacts
     *
     * Get all contacts for the specified worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        String workerId = null;
        WorkerContactResource response = api.getContacts(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Custom Field
     *
     * Get the worker&#39;s customFields by workerCustomFieldId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldTest() throws ApiException {
        String workerId = null;
        String workerCustomFieldId = null;
        String asof = null;
        WorkerCustomFieldsResource response = api.getCustomField(workerId, workerCustomFieldId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Custom Fields
     *
     * Get the worker&#39;s customFields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        String workerId = null;
        String asof = null;
        WorkerCustomFieldsResource response = api.getCustomFields(workerId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Direct Deposit
     *
     * Single direct deposit for an \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectDepositTest() throws ApiException {
        String workerId = null;
        String directDepositId = null;
        String effectivitydate = null;
        DirectDepositResource response = api.getDirectDeposit(workerId, directDepositId)
                .effectivitydate(effectivitydate)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Federal Tax
     *
     * Federal tax setup for \&quot;Active\&quot; or \&quot;In-progress\&quot;  worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFederalTaxSetupTest() throws ApiException {
        String workerId = null;
        WorkerFederalTaxResource response = api.getFederalTaxSetup(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker
     *
     * Information about a unique worker (employee and contractor) that your application has been granted access to. Currently workers that exist within Paychex Flex payroll will be available, future enhancements will make workers from other Paychex systems available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInformationTest() throws ApiException {
        String workerId = null;
        WorkerResource1 response = api.getInformation(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Component
     *
     * Retrieve a specific pay component that a \&quot;Active\&quot; worker has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayComponentTest() throws ApiException {
        String workerId = null;
        String workerComponentId = null;
        String asof = null;
        RecurringResource response = api.getPayComponent(workerId, workerComponentId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Components
     *
     * Get all the the pay components for a specific \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayComponentsTest() throws ApiException {
        String workerId = null;
        String effectonpay = null;
        String asof = null;
        String name = null;
        String componentid = null;
        String classificationtype = null;
        RecurringResource response = api.getPayComponents(workerId)
                .effectonpay(effectonpay)
                .asof(asof)
                .name(name)
                .componentid(componentid)
                .classificationtype(classificationtype)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Rate
     *
     * A workers single compensation rate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRateTest() throws ApiException {
        String workerId = null;
        String rateId = null;
        String asof = null;
        PayRateResource response = api.getPayRate(workerId, rateId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Rates
     *
     * Information about a workers compensation rates. Rate one is only one available if the worker is In-Progress. The multiple rates is available for workers that have been completed within Flex. It’s not required for a worker to have a rate in the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRatesByWorkerIdTest() throws ApiException {
        String workerId = null;
        String asof = null;
        PayRateResource response = api.getPayRatesByWorkerId(workerId)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Standards
     *
     * Information about a workers compensation pay standards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayStandardsTest() throws ApiException {
        String workerId = null;
        PayStandardResource response = api.getPayStandards(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Time Off
     *
     * Array of time off balance(s) a worker has for each policy type of time off, for that worker. NOTE: This data is only available if the client has the Time Off Accrual product (This is not related to the Flex Time product which has it is own dev portal for those APIs).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffBalanceTest() throws ApiException {
        String workerId = null;
        TimeOffResource response = api.getTimeOffBalance(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Statuses
     *
     * Retrieve the full list of worker statuses (past, present, and future). For each status the workerStatusId is the value of the corresponding company worker status ID. If no company worker status with a matching type/reason exists then workerStatusId is omitted. If multiple statuses share an effective date the order field will indicate the order in which they were posted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkerStatusListTest() throws ApiException {
        String workerId = null;
        Status1 response = api.getWorkerStatusList(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Assignments
     *
     * Array of assignments that will be used for auto distribution assigned to the worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssignmentDistributionsTest() throws ApiException {
        String workerId = null;
        WorkerAssignmentDistributionsResource response = api.listAssignmentDistributions(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Direct Deposits
     *
     * Array of direct deposits on the \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDirectDepositsTest() throws ApiException {
        String workerId = null;
        String effectivitydate = null;
        String asof = null;
        DirectDepositResource response = api.listDirectDeposits(workerId)
                .effectivitydate(effectivitydate)
                .asof(asof)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Communication
     *
     * Remove a communication item from a \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCommunicationTest() throws ApiException {
        String workerId = null;
        String communicationId = null;
        CommunicationResource1 response = api.removeCommunication(workerId, communicationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Direct Deposit
     *
     * Remove a single direct deposit for a \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDirectDepositTest() throws ApiException {
        String workerId = null;
        String directDepositId = null;
        String effectivitydate = null;
        api.removeDirectDeposit(workerId, directDepositId)
                .effectivitydate(effectivitydate)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Federal Tax
     *
     * Remove the federal tax setup for an \&quot;In-progress\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFederalTaxTest() throws ApiException {
        String workerId = null;
        api.removeFederalTax(workerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Component
     *
     * Remove a specific pay component that a \&quot;Active\&quot; worker has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePayComponentTest() throws ApiException {
        String workerId = null;
        String workerComponentId = null;
        api.removePayComponent(workerId, workerComponentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Rate
     *
     * Remove a compensation rate from a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePayRateTest() throws ApiException {
        String workerId = null;
        String rateId = null;
        api.removePayRate(workerId, rateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Communication
     *
     * Update a \&quot;Active\&quot; or \&quot;In-progress\&quot; workers specific communication item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCommunicationItemTest() throws ApiException {
        String workerId = null;
        String communicationId = null;
        String communicationId = null;
        String type = null;
        String usageType = null;
        String dialCountry = null;
        String dialArea = null;
        String dialNumber = null;
        String dialExtension = null;
        String uri = null;
        String streetLineOne = null;
        String streetLineTwo = null;
        String postOfficeBox = null;
        String city = null;
        String postalCode = null;
        String postalCodeExtension = null;
        String countrySubdivisionCode = null;
        String countryCode = null;
        List<Link> links = null;
        CommunicationResource1 response = api.updateCommunicationItem(workerId, communicationId)
                .communicationId(communicationId)
                .type(type)
                .usageType(usageType)
                .dialCountry(dialCountry)
                .dialArea(dialArea)
                .dialNumber(dialNumber)
                .dialExtension(dialExtension)
                .uri(uri)
                .streetLineOne(streetLineOne)
                .streetLineTwo(streetLineTwo)
                .postOfficeBox(postOfficeBox)
                .city(city)
                .postalCode(postalCode)
                .postalCodeExtension(postalCodeExtension)
                .countrySubdivisionCode(countrySubdivisionCode)
                .countryCode(countryCode)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Rate
     *
     * Update a workers specific compensation rate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompensationRateTest() throws ApiException {
        String workerId = null;
        String rateId = null;
        String description = null;
        String rateId = null;
        OffsetDateTime startDate = null;
        String rateNumber = null;
        String rateType = null;
        String amount = null;
        String standardHours = null;
        String standardOvertime = null;
        Boolean _default = null;
        String effectiveDate = null;
        List<Link> links = null;
        PayRateResource response = api.updateCompensationRate(workerId, rateId)
                .description(description)
                .rateId(rateId)
                .startDate(startDate)
                .rateNumber(rateNumber)
                .rateType(rateType)
                .amount(amount)
                .standardHours(standardHours)
                .standardOvertime(standardOvertime)
                ._default(_default)
                .effectiveDate(effectiveDate)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Contacts
     *
     * Update a worker contact. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. When a new contact is made primary the previous primary contact will be marked as not primary. A postal contact can be switched from a street address to a PO box and vice versa. This is done by setting either streetLineOne or postOfficeBox (a postal communication may not have both). Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String workerId = null;
        String contactId = null;
        String contactId = null;
        ContactTypeResource1 contactType = null;
        RelationshipResource relationship = null;
        WorkerContactResource response = api.updateContact(workerId, contactId)
                .contactId(contactId)
                .contactType(contactType)
                .relationship(relationship)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker CustomField
     *
     * Update CustomField at the worker level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        String workerId = null;
        String workerCustomFieldId = null;
        String workerCustomFieldId = null;
        String customFieldId = null;
        String type = null;
        Boolean booleanValue = null;
        String textValue = null;
        Double numericValue = null;
        OffsetDateTime dateValue = null;
        String dropdownId = null;
        String dropdownValue = null;
        String customFieldName = null;
        Boolean required = null;
        Boolean checkStub = null;
        Boolean employeeEditable = null;
        WorkerCustomFieldsResource response = api.updateCustomField(workerId, workerCustomFieldId)
                .workerCustomFieldId(workerCustomFieldId)
                .customFieldId(customFieldId)
                .type(type)
                .booleanValue(booleanValue)
                .textValue(textValue)
                .numericValue(numericValue)
                .dateValue(dateValue)
                .dropdownId(dropdownId)
                .dropdownValue(dropdownValue)
                .customFieldName(customFieldName)
                .required(required)
                .checkStub(checkStub)
                .employeeEditable(employeeEditable)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Direct Deposit
     *
     * Update a single direct deposit for a an \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDirectDepositTest() throws ApiException {
        String workerId = null;
        String directDepositId = null;
        String directDepositId = null;
        OffsetDateTime startDate = null;
        String paymentType = null;
        String accountType = null;
        Double value = null;
        String routingNumber = null;
        String accountNumber = null;
        String priority = null;
        List<Link> links = null;
        String effectivitydate = null;
        DirectDepositResource response = api.updateDirectDeposit(workerId, directDepositId)
                .directDepositId(directDepositId)
                .startDate(startDate)
                .paymentType(paymentType)
                .accountType(accountType)
                .value(value)
                .routingNumber(routingNumber)
                .accountNumber(accountNumber)
                .priority(priority)
                .links(links)
                .effectivitydate(effectivitydate)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Direct Deposits
     *
     * Update multiple direct deposits of an \&quot;Active\&quot; Worker at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDirectDepositsTest() throws ApiException {
        String workerId = null;
        String directDepositId = null;
        OffsetDateTime startDate = null;
        String paymentType = null;
        String accountType = null;
        Double value = null;
        String routingNumber = null;
        String accountNumber = null;
        String priority = null;
        List<Link> links = null;
        String effectivitydate = null;
        DirectDepositResource response = api.updateDirectDeposits(workerId)
                .directDepositId(directDepositId)
                .startDate(startDate)
                .paymentType(paymentType)
                .accountType(accountType)
                .value(value)
                .routingNumber(routingNumber)
                .accountNumber(accountNumber)
                .priority(priority)
                .links(links)
                .effectivitydate(effectivitydate)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Federal Tax
     *
     * Update the federal tax setup for a \&quot;Active\&quot; or \&quot;In-progress\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFederalTaxSetupTest() throws ApiException {
        String workerId = null;
        String taxId = null;
        String filingStatus = null;
        String multipleJobs = null;
        String dependentsAmount = null;
        String otherIncome = null;
        String deductionsAmount = null;
        String extraWithholdingAmount = null;
        String taxesWithheld = null;
        WorkerFederalTaxResource response = api.updateFederalTaxSetup(workerId)
                .taxId(taxId)
                .filingStatus(filingStatus)
                .multipleJobs(multipleJobs)
                .dependentsAmount(dependentsAmount)
                .otherIncome(otherIncome)
                .deductionsAmount(deductionsAmount)
                .extraWithholdingAmount(extraWithholdingAmount)
                .taxesWithheld(taxesWithheld)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Component
     *
     *  Update a single pay component associated to the \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayComponentTest() throws ApiException {
        String workerId = null;
        String workerComponentId = null;
        String workerComponentId = null;
        String componentId = null;
        String name = null;
        String calculationType = null;
        String calculationBaseId = null;
        Double value = null;
        OffsetDateTime startDate = null;
        OffsetDateTime effectiveDate = null;
        OffsetDateTime endDate = null;
        String effectOnPay = null;
        String classificationType = null;
        PayComponentFrequencyTypeResource1 frequency = null;
        List<Link> links = null;
        RecurringResource response = api.updatePayComponent(workerId, workerComponentId)
                .workerComponentId(workerComponentId)
                .componentId(componentId)
                .name(name)
                .calculationType(calculationType)
                .calculationBaseId(calculationBaseId)
                .value(value)
                .startDate(startDate)
                .effectiveDate(effectiveDate)
                .endDate(endDate)
                .effectOnPay(effectOnPay)
                .classificationType(classificationType)
                .frequency(frequency)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker Pay Components
     *
     * Batch update pay components associated to the \&quot;Active\&quot; worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayComponentsTest() throws ApiException {
        String workerId = null;
        String workerComponentId = null;
        String componentId = null;
        String name = null;
        String calculationType = null;
        String calculationBaseId = null;
        Double value = null;
        OffsetDateTime startDate = null;
        OffsetDateTime effectiveDate = null;
        OffsetDateTime endDate = null;
        String effectOnPay = null;
        String classificationType = null;
        PayComponentFrequencyTypeResource1 frequency = null;
        List<Link> links = null;
        RecurringResource response = api.updatePayComponents(workerId)
                .workerComponentId(workerComponentId)
                .componentId(componentId)
                .name(name)
                .calculationType(calculationType)
                .calculationBaseId(calculationBaseId)
                .value(value)
                .startDate(startDate)
                .effectiveDate(effectiveDate)
                .endDate(endDate)
                .effectOnPay(effectOnPay)
                .classificationType(classificationType)
                .frequency(frequency)
                .links(links)
                .execute();
        // TODO: test validations
    }

    /**
     * Worker
     *
     * Update a unique worker (employee and contractor) that your application has been granted access to modify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUniqueWorkerTest() throws ApiException {
        String workerId = null;
        String workerId = null;
        String employeeId = null;
        String workerType = null;
        String employmentType = null;
        String exemptionType = null;
        OffsetDateTime birthDate = null;
        String sex = null;
        String ethnicityCode = null;
        OffsetDateTime hireDate = null;
        String clockId = null;
        NameResource1 name = null;
        LegalIdResource1 legalId = null;
        String laborAssignmentId = null;
        String locationId = null;
        String jobId = null;
        JobTitleResource1 job = null;
        OrganizationResource1 organization = null;
        SupervisorResource1 supervisor = null;
        Status1 currentStatus = null;
        List<CommunicationResource1> communications = null;
        List<Link> links = null;
        String workerCorrelationId = null;
        WorkerResource1 response = api.updateUniqueWorker(workerId)
                .workerId(workerId)
                .employeeId(employeeId)
                .workerType(workerType)
                .employmentType(employmentType)
                .exemptionType(exemptionType)
                .birthDate(birthDate)
                .sex(sex)
                .ethnicityCode(ethnicityCode)
                .hireDate(hireDate)
                .clockId(clockId)
                .name(name)
                .legalId(legalId)
                .laborAssignmentId(laborAssignmentId)
                .locationId(locationId)
                .jobId(jobId)
                .job(job)
                .organization(organization)
                .supervisor(supervisor)
                .currentStatus(currentStatus)
                .communications(communications)
                .links(links)
                .workerCorrelationId(workerCorrelationId)
                .execute();
        // TODO: test validations
    }

}
